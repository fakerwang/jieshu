<?php
namespace app\api\controller;
use think\Controller;
use think\Db;
use think\Request;
class User extends Common{
    public function  _initialize(){
        parent::_initialize(); // TODO: Change the autogenerated stub
    }
    /**
     * 获取用户信息
     */
    public function user_info(){
        if (Request::instance()->isPost()) {
            //待优化
            $user = $this->checklogin();
            $user['header_img'] = $user['header_img'];
            $user['follow'] = DB::name('Follow')->where(['user_id' => $user['member_id']])->count();
            $user['follow_to'] = DB::name('Follow')->where(['user_id2' => $user['member_id']])->count();
            $user['live_count'] = DB::name('Live_store')->where(['user_id' => $user['member_id'], 'is_del' => 1])->count();
            $userinfo = DB::name("merchants")->where("member_id", $user["member_id"])->find();
            if (!$userinfo) {
                $user["apply_state"] = '0';
            } else {
                $user["apply_state"] = $userinfo["apply_state"];
            }
            //商家状态
            $userinfo['pay_state'] ? $user["pay_state"] = $userinfo["pay_state"] : $user["pay_state"] = '0';
            //今日收益
            $user["today_earnings"] = (string)(DB::name("give_gift")->where(["user_id2" => $user["member_id"], "date" => date("Y-m-d",time())])->sum("jewel"));
            //昨日收益
            $user["yesterday_earnings"] = (string)(DB::name("give_gift")->where(["user_id2" => $user["member_id"], 'date' => date("Y-m-d", strtotime("-1 day"))])->sum("jewel"));
            //本月收益
            $this_month = strtotime(date("Y-m",time()));
            $user["month_earnings"] = (string)(DB::name("give_gift")->where(['date'=>['gt',$this_month],'user_id'=>$user['member_id']])->sum("jewel"));
            $give_count = DB::name('Give_gift')->where(['user_id' => $user['member_id']])->sum('jewel');
            $give_count ? $user['give_count'] = (string)$give_count : $user['give_count'] = "0";

            //待支付订单
            $user['wait_count'] = (string)(Db::name('order_merchants')->alias('a')
                ->join('th_merchants b', 'a.merchants_id = b.member_id')
                ->where(['a.is_delete'=>'0','a.member_id'=>$user['member_id'],'a.order_state'=>'wait_pay'])
                ->count());
            $user['seed_count'] = (string)(Db::name('order_merchants')->alias('a')
                ->join('th_merchants b', 'a.merchants_id = b.member_id')
                ->where(['a.is_delete'=>'0','a.member_id'=>$user['member_id'],'a.order_state'=>'wait_send'])
                ->count());
            $user['receive_count'] = (string)(Db::name('order_merchants')->alias('a')
                ->join('th_merchants b', 'a.merchants_id = b.member_id')
                ->where(['a.is_delete'=>'0','a.member_id'=>$user['member_id'],'a.order_state'=>'wait_receive'])
                ->count());
            $user['assessment_count'] = (string)(Db::name('order_merchants')->alias('a')
                ->join('th_merchants b', 'a.merchants_id = b.member_id')
                ->where(['a.is_delete'=>'0','a.member_id'=>$user['member_id'],'a.order_state'=>'wait_assessment'])
                ->count());
            $user['returns_count'] = (string)(Db::name('order_refund')->where(['is_delete'=>'0','member_id'=>$user['member_id']])->count());
//        $authen = M('User_authen')->where(['user_id'=>$user['user_id']])->find();
//        if ($authen){
//            $user['is_authen'] = $authen['status'];
//        }else{
//            $user['is_authen'] = "-1";
//        }
            success($user);
        }
    }
    /**
     * @编辑个人资料
     */
    public function edit_user(){
        if (Request::instance()->isPost()) {
            $user = $this->checklogin();
            $params = Request::instance()->request();
            empty($params["header_img"]) ? true : $data["header_img"] = $params["header_img"];
            empty($params["username"]) ? true : $data["username"] = $params["username"];
            empty($params["sex"]) ? true : $data["sex"] = $params["sex"];
            empty($params["birth_day"]) ? true : $data["birth_day"] = $params["birth_day"];
            empty($params["province"]) ? true : $data["province"] = $params["province"];
            empty($params["city"]) ? true : $data["city"] = $params["city"];
            empty($params["area"]) ? true : $data["area"] = $params["area"];
            empty($params["signature"]) ?  true : $data["signature"] = $params["signature"];
            if (!empty($username)) {
                $user = DB::name('member')->where(['username' => $username])->find();
                if ($user) {
                    error('昵称已存在!');
                }
            }
            //待处理
            $data['uptime'] = time();
            $old_img = DB::name('member')->where(['member_id' => $user['member_id']])->value('header_img');
            if (DB::name('member')->where(['member_id' => $user['member_id']])->update($data)) {
                //bug(旧文件的删除
                $imgs = DB::name('member')->where(['member_id' => $user['member_id']])->value('header_img');
                success($imgs);
            } else {
                error('失败!');
            }
        }
    }

    /**
     *@充值列表
     */
    public function price_list(){

        $user = $this->checklogin();
        $list = Db::name('PriceList')->order("price asc")->select();
        if (!$list){$list=[];}
        success(['amount'=>$user['b_diamond'],'list'=>$list]);
    }

    /**
     *@充值记录
     */
    public function recharge_record()
    {
        if (Request::instance()->isPost()) {
            $member = $this->checklogin();
            $map['member_id'] = $member['member_id'];
            $map['pay_state'] = '2';
            $p = input('p');
            empty($p) && $p = 1;
            $pagesize = input('pagesize');
            $pagesize ? $pagesize : $pagesize = 10;
            $count = Db::name('Recharge')->where($map)->count();
            $page = ceil($count / $pagesize);
            $data = Db::name('Recharge')->field('amount,uptime,pay_type,meters,zeng')
                ->where($map)->limit(($p - 1) * $pagesize, $pagesize)->select();
            foreach($data as &$val){
                switch($val['pay_type']){
                    case 'wx':
                        $val['pay_type'] = '微信';
                        break;
                    case 'alipay':
                        $val['pay_type'] = '支付宝';
                        break;
                    case 'uppay':
                        $val['pay_type'] = '银联';
                        break;
                    case 'online':
                        $val['pay_type'] = '后台';
                        break;
                    case 'applepay':
                        $val['pay_type'] = '苹果内购';
                        break;
                }
                $val['meters'] = (string)($val['meters'] + $val['zeng']);
                $val['title'] = '充值'.$val['amount'].'元,获得'.$val['meters'].'钻石';
            }
            success(['page' => $page,'data' => $data]);
        }

    }

    /**
     * @关注（取消关注）

     */
    public function follow_merchants(){
        $user = $this->checklogin();
        $user_id2 = input('user_id2');
        if(!$user_id2)      error("参数错误");
        if ($user["member_id"] == $user_id2) error("传值错误");
        $check = Db::name('follow_merchants')->where(['user_id' => $user['member_id'], 'user_id2' => $user_id2])->find();
        if ($check) {
            if ($check['is_delete'] == '1') {
                $update['is_delete'] = '2';
                $action = '成功!';

            } else {
                $update['is_delete'] = '1';
                $action = '关注成功!';
            }
            $update['uptime'] = time();
            $result = Db::name('follow_merchants')->where(['follow_id' => $check['follow_id']])->update($update);
            if ($result) {
                success($action);
            } else {
                error("操作失败");
            }
        } else {
            $data['user_id'] = $user['member_id'];
            $data['user_id2'] = $user_id2;
            $data['intime'] = time();
            $result = Db::name('follow_merchants')->insert($data);
            if ($result) {
                success('关注成功!');
            } else {
                error("失败");
            }
        }
    }

    /**
     *@用户关注列表
     */
    public function user_follow(){
        $member = $this->checklogin();
        $p = input('p');
        $p  ?   $p  :   $p = 1;
        $pagesize = input('pagesize');
        $pagesize   ?   $pagesize   :   $pagesize = 10;
        $where = [
            'a.user_id' =>  $member['member_id'],
            'a.is_delete'   =>  '1',
            'b.is_delete'   => '0'
        ];
        $count = Db::name('follow_merchants')->alias('a')
            ->join('th_merchants b','a.user_id2 = b.member_id')
            ->where($where)->count();
        $list =  Db::name('follow_merchants')->alias('a')
            ->field('a.follow_id,b.member_id,b.live_id,b.merchants_name,b.merchants_img,b.merchants_content,b.month_sales')
            ->join('th_merchants b','a.user_id2 = b.member_id')
            ->where($where)->order("a.intime desc")
            ->limit(($p-1)*$pagesize,$pagesize)->select();
        $page = ceil($count/$pagesize);
        success(['page'=>$page,'list'=>$list]);
    }

    /**
     *@取消关注
     */
    public function del_user_follow(){
        $member = $this->checklogin();
        $follow_id = input('follow_id');
        if(!$follow_id)         error("参数错误");
        $result = Db::name('follow_merchants')->where(['user_id'=>$member['member_id'],'follow_id'=>$follow_id])->update(['is_delete'=>'2','uptime'=>time()]);
        if($result){
            success("操作成功");
        }else{
            error("操作失败");
        }
    }

    /**
     *@取消关注
     */
    public function del_all_follow(){
        $member = $this->checklogin();
        $result = Db::name('follow_merchants')->where(['user_id'=>$member['member_id']])->update(['is_delete'=>'2','uptime'=>time()]);
        if($result){
            success("操作成功");
        }else{
            error("操作失败");
        }
    }

    /**
     *@判断是否有未读消息
     */
    public function has_message(){
        $member = $this->checklogin();
        $map[]=['exp','FIND_IN_SET('.$member['type'].',object)'];
        $map['is_delete'] = '0';
        $map['state'] = '2';
        $check = Db::name('Message')->where(['type'=>'1','member_id'=>$member['member_id']])->column('system_notice_id');
        $notice = Db::name('system_notice')->where($map)->column('id');
        $list = array_diff($notice,$check);
        if($list){
            $intime = date("Y-m-d H:i:s",time());
            foreach ($list as $v){
                $message[]=[
                    'type' => '1',
                    'member_id' =>  $member['member_id'],
                    'system_notice_id'   =>  $v,
                    'intime'    => $intime
                ];
            }
            if($message){
                Db::name('message')->insertAll($message);
            }
            success('1');
        }else{
            $count = Db::name('message')->where(['member_id'=>$member['member_id'],'is_read'=>'1'])->count();
            if($count){
                success('1');
            }else{
                success('2');
            }
        }
    }

    public function message(){
        $member = $this->checklogin();
        $type = input('type');
        $p = input('p');
        $p  ?   $p  :   $p = 1;
        $pagesize = input('pagesize');
        $pagesize   ?   $pagesize   :   $pagesize = 10;
        $type ?    $type = $type    :   $type = 1;
        switch ($type){
            case 1://系统消息
                $map['a.member_id'] = $member['member_id'];
                $map['a.type'] = '1';
                $map['b.is_delete'] = '0';
                $count = Db::name('Message')->alias('a')
                       ->join('th_system_notice b','a.system_notice_id = b.id')
                       ->where($map)->count();
                $page = ceil($count/$pagesize);
                $list = Db::name('Message')->alias('a')
                    ->field('a.intime,a.order_id,b.content as message,b.title')
                    ->join('th_system_notice b','a.system_notice_id = b.id')
                    ->where($map)->limit(($p-1)*$pagesize,$pagesize)
                    ->select();
                if(!empty($list)){
                    Db::name('message')->where(['member_id'=>$member['member_id'],'type'=>1])->update(['is_read'=>'2']);
                }
                break;
            case 2://订单消息
                $map['member_id'] = $member['member_id'];
                $map['type'] = '2';
                $count = Db::name('message')->where($map)->count();
                $page = ceil($count/$pagesize);
                $list = Db::name('message')->field('message,intime,order_id')
                    ->where($map)->limit(($p-1)*$pagesize,$pagesize)->order('intime desc')->select();
                if(!empty($list)){
                    Db::name('message')->where($map)->update(['is_read'=>'2']);
                    foreach ($list as $k=>$v){
                        $list[$k]['goods'] = Db::name('order_goods')->alias('a')
                            ->field('a.*,b.order_no')
                            ->join('th_order_merchants b','a.order_merchants_id = b.order_merchants_id')
                            ->where(['a.order_merchants_id'=>$v['order_id']])->limit(1)->find();
                    }
                }
                break;
            case 3://其他消息
                $map['member_id'] = $member['member_id'];
                $map['type'] = '3';
                $count = Db::name('message')->where($map)->count();
                $page = ceil($count/$pagesize);
                $list = Db::name('message')->field('message,intime,order_id')
                    ->where($map)->limit(($p-1)*$pagesize,$pagesize)->order('intime desc')->select();
                if(!empty($list)){
                    Db::name('message')->where($map)->update(['is_read'=>'2']);
                }
                break;
        }
        success(['page'=>$page,'list'=>$list]);

    }

    /**
     *@反馈信息
     */
    public function feedback(){
        if(Request::instance()->isPost()){
            $member = $this->checklogin();
            $data['content'] = input('content');
            if(empty($data['content']))        error("反馈信息不能为空");
            $data['intime'] = date("Y-m-d H:i:s",time());
            $data['member_id'] = $member['member_id'];
            $result = Db::name('Feedback')->insert($data);
            if($result){
                success("反馈成功");
            }else{
                error("反馈失败");
            }
        }
    }


    public function is_this(){
        $version = input('version');
        empty($version) ? error('参数错误!') : true;
        $ve = Db::name('System')->where(['id'=>1])->value('ios_version');
        if ($ve==$version){
            $result = "1";
        }else{
            $result = "2";
        }
        success($result);
    }

    /**
     *@优惠券领券中心
     */
    public function coupon(){
        $uid = input('uid');
        $p = input('p');
        empty($p) && $p = 1;
        $pagesize = input('pagesize');
        $pagesize ? $pagesize : $pagesize = 10;
        $where['is_delete'] = '0';
        $where['status'] = '2';
        $count = Db::name('Coupon')->where($where)->count();
        $list = Db::name('Coupon')->field('coupon_id,title,start_time,end_time,value,balance,number,goods_id,type,merchants_id')
              ->where($where)->order('intime desc')->select();
        $page = ceil($count/$pagesize);
        if(!empty($uid)) {
            $member_coupon = Db::name('member_coupon')->where(['member_id' => $uid])->column('coupon_id');
        }else{
            $member_coupon = [];
        }
        foreach($list as $k=>$v){
            if($v['type'] == 2){
                $merchants = Db::name('merchants')->where(['member_id'=>$v['merchants_id']])->find();
                $list[$k]['merchants_name'] = $merchants['merchants_name'];
                $list[$k]['merchants_img'] = $merchants['merchants_img'];
            }else{
                $list[$k]['name'] = '通用优惠券';
                $list[$k]['merchants_name'] = '';
                $list[$k]['merchants_img'] = '';
            }
            if(in_array($v['id'],$member_coupon)){
                $list[$k]['is_check'] = '1';
            }else{
                $list[$k]['is_check'] = '2';
            }
        }
        success(['page'=>$page,'list'=>$list]);
    }

    /**
     *@领取优惠券
     */
    public function draw_coupon(){
        if(Request::instance()->isPost()){
            $member = $this->checklogin();
            $coupon_id = input('coupon_id');
            if(empty($coupon_id))          error("参数错误");
            $coupon = Db::name('Coupon')->where(['coupon_id'=>$coupon_id])->find();
            if(!$coupon)                   error('参数错误');
            if($coupon['balance']>=$coupon['number'])    error("该优惠券没有库存");
            $map['coupon_id'] = $coupon_id;
            $map['member_id'] = $member['member_id'];
            $check = Db::name('MemberCoupon')->where($map)->find();
            if($check)                  error("已领取，不能重复领取");
            $data['coupon_id'] = $coupon_id;
            $data['member_id'] = $member['member_id'];
            $data['intime'] = date("Y-m-d H:i:s",time());
            $result = Db::name('MemberCoupon')->insert($data);
            if($result){
                if($coupon['number']>$coupon['balance']){
                    Db::name('Coupon')->where(['coupon_id'=>$coupon_id])->setInc('balance');
                }
                success("领取成功");
            }else{
                error("领取失败");
            }
        }
    }

    /**
     *@优惠券
     * @param $status 1未使用；2已使用；3已过期
     */
    public function my_coupon(){
            $member = $this->checklogin();
            $status = input('status');
            $status ? $status : $status = '1';
            $data = Db::name('MemberCoupon')->alias('a')
                ->field('a.intime,b.end_time,b.end_strtotime,a.id')
                ->join('th_coupon b','a.coupon_id = b.coupon_id')
                ->where(['a.member_id'=>$member['member_id'],'a.status'=>'1','b.is_delete'=>'0','b.status'=>'2'])->select();
            foreach($data as $key=>$val){
                if(time()>$val['end_strtotime']){
                    Db::name('MemberCoupon')->where(['id'=>$val['id']])->update(['status'=>3]);
                }
            }
            $list = Db::name('MemberCoupon')->alias('a')
                ->field('a.id,b.title,b.img,b.limit_value,b.value,b.start_time,b.end_time,b.type,b.merchants_id')
                ->join('th_coupon b','a.coupon_id = b.coupon_id')
                ->where(['a.member_id'=>$member['member_id'],'a.status'=>$status,'b.is_delete'=>'0','b.status'=>'2'])->select();
            if(!empty($list)){
                foreach ($list as $k=>$v) {
                    if ($v['type'] == 2) {
                        $merchants = Db::name('merchants')->where(['member_id' => $v['merchants_id']])->find();
                        $list[$k]['merchants_name'] = $merchants['merchants_name'];
                        $list[$k]['merchants_img'] = $merchants['merchants_img'];
                    } else {
                        $list[$k]['name'] = '通用优惠券';
                        $list[$k]['merchants_name'] = '';
                        $list[$k]['merchants_img'] = '';
                    }
                }
                success($list);
            }else{
                success([]);
            }
    }


    /**
     *@
     */


}
















<?php
namespace app\api\controller;
use Qiniu\QiniuPili;
use lib\Easemob;
use lib\Upload;
use think\Controller;
use think\View;
use think\Db;
use opensearch;
use \think\Session;
use \think\Request;
use \think\model;
class Live extends Common{
    private $domain = 'http://dxplay.tstmobile.com/';
    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
    }
    /**
     * 判断是否有开播权限
     */
    public function  is_prohibition_live(){
        $user = $this->checklogin();
        if($user["type"]==1){
            success(["status"=>"2","info"=>"无开播权限"]);
        }else{
            success(["status"=>"1",'info'=>'']);
        }
    }


    /**
     * 商家直播申请列表
     */
    public function apply_list(){
        $user = $this->checklogin();
        $map['is_del'] = '0';
        $map['is_shenhe'] = '2';
        $map['merchants_id'] = $user['member_id'];
        $p = input('p');
        $p  ?   $p  :   $p = 1;
        $pagesize = input('pagesize');
        $pagesize ? $pagesize  :  $pagesize = 10;
        $count = Db::name('apply')->where($map)->count();

        $page = ceil($count/$pagesize);
        if($count){
            $data = Db::name('apply')
                ->where($map)
                ->limit(($p-1)*$pagesize,$pagesize)
                ->select();
        }else{
            $data = [];
        }
        success(['page'=>$page,'list'=>$data]);

    }

    /**
     * @param lag
     * @param log
     * @param t
     * @开启直播
     */
    public function start_live(){
        $user = $this->checklogin();
        $param = Request::instance()->request();
        $log = empty($param["log"]) ? '116.42669': $param["log"];
        $lag = empty($param["lag"]) ? '39.917149': $param["lag"];
        $title = empty($param["title"]) ? '': $param["title"];
        $img = empty($param["img"]) ? DB::name("Member")->where("member_id",$user["member_id"])->value("header_img"): $param["img"];
        //设置观看金额
        $live_money = empty($param["live_money"]) ? 0 : $param["live_money"];
        if($log && $lag){
            $gwd = $lag.','.$log;
            $baidu_apikey = DB::name('System')->value('baidu_apikey');
            $file_contents = file_get_contents('http://api.map.baidu.com/geocoder/v2/?ak='.$baidu_apikey.'&location='.$gwd.'&output=json');
            $rs = json_decode($file_contents,true);
            $sheng = $rs['result']['addressComponent']['province'];
            $shi = $rs['result']['addressComponent']['city'];
            $qu = $rs['result']['addressComponent']['district'];
            $address = $rs['result']['formatted_address'];
        }
        $room_id = DB::name('apply')->where(['apply_id' =>$param["apply_id"]])->value("room_id");
        //七牛生成流地址
        $qn = new QiniuPili();
        $play_address = $qn->push_address();
        $qiniu_room_id = time().rand(100, 999);
        $qiniu_room_name = "主播".rand(10000,99999);
        $create_room = $qn->creatroom($qiniu_room_id,$qiniu_room_name);    //七牛创建房间
        $time = time();
        $data = [
            'live_money'=>$live_money,
            'user_id'=>$user['member_id'],
            "live_tag"=>$user["live_tag"],
            'play_img'=>$img,
            'title'=>$title,
            'push_flow_address'=>$play_address['url'],
            'play_address'=>$play_address['url2'],
            'play_address_m3u8'=>$play_address['m3u8'],
            'start_time'=>$time,
            'stream_key'=>$play_address['streamKey'],
            'live_status'=>1,
            'live_time'=>0,
            'room_id'=>$room_id,
            'intime'=>$time,
            'date'=>date('Y-m-d',$time),
            'log'=>$log,
            'lag'=>$lag,
            'sheng'=>$sheng,
            'shi'=>$shi,
            'qu'=>$qu,
            'address'=>$address,
            'qiniu_room_id'=>$create_room['room_id'],
            'qiniu_room_name'=>$create_room['room_name'],
            'qiniu_token'=>$create_room['token'],
            "livewindow_type"  => 1,
        ];
        if ($live_id = Db::name('Live')->insertGetId($data)) {
            DB::name("merchants")->where(["member_id"=>$user["member_id"]])->update(["live_id"=>$live_id]);
            DB::name("member")->where(["member_id"=>$user["member_id"]])->update(["mlive_id"=>$live_id]);
            Db::name('live')->where(['user_id'=>$user['member_id'],'live_id'=>['neq',$live_id]])->update(['live_status'=>'2']);
            $result = [
                'nums' => '0',
                'push_flow_address' => $play_address['url'],
                'play_address'=>$play_address['url2'],
                'room_id' => $room_id,
                'ID' => $user['ID'],
                'e_ticket' => $user['e_ticket'],
                'start_time' =>(string)$time,
                'share_url' => config("domain")."/mall_live/#/liveRoom_mobile?live_id=".$live_id."&room_id=".$room_id,
                'live_id'=>$live_id,
                'time'=>date('Y.m.d',$time),
                'qiniu_room_id'=>$create_room['room_id'],
                'qiniu_room_name'=>$create_room['room_name'],
                'qiniu_token'=>$create_room['token'],
                'is_wheat'=>$user['is_wheat'],
//                'grade_img'=>$get_gradeinfo['img'],
//                'name'=>$get_gradeinfo['name']
            ];

            //添加直播商品
            if($param['goods_id']){
                $create_time = date("Y-m-d H:i:s",time());
                $goods_id = explode(',',$param['goods_id']);
                foreach ($goods_id as $v){
                    $live_goods[] = [
                        'goods_id' => $v,
                        'member_id' =>  $user['member_id'],
                        'live_id'   =>  $live_id,
                        'create_time'=> $create_time
                    ];
                }
                Db::name('live_goods')->insertAll($live_goods);
            }
            success($result);
        } else {
            error('开启失败!');
        };
    }
    /**
     *直播上传背景图
     * @dirname //头像上传路径
     */
    public function upload_playimg(){
        $up = new Upload();
        $up->upload('playimg');
    }
    /**
     * 判断是否在直播状态
     */
    public function check_anchor_state(){
        $this->checklogin();
        $param = Request::instance()->request();
        $live_id = empty($param["live_id"]) ?  error("无法进入直播间") : $param["live_id"];
        $res = DB::name("live")->where(["live_id"=>$live_id])->find();
        success($res["live_status"]);
    }

    /**
     * @进入直播间
     */
    public function into_live(){
        $user = $this->checklogin();
        $param = Request::instance()->request();
        $live_id = empty($param["live_id"]) ?  error("无法进入直播间") : $param["live_id"];
        //判断是否被踢
        DB::name('Live_kicking')->where(['live_id'=>$live_id,'user_id'=>$user["member_id"]])->find() ? error('你已被踢出直播间，无法进入!') : true;
        //进入直播间,把进入的其他正在直播的记录删除
        $live = DB::name('Live')
            ->alias('a')
            ->field('a.live_id,b.user_id2')
            ->join('__LIVE_NUMBER__ b', 'a.live_id=b.live_id',"right")
            ->where(['a.live_status'=>1])
            ->select();
        if ($live){
            $ids = array_map(function($v){ return $v['user_id2'];},$live);
            if (in_array($user["member_id"],$ids)){
                $live_number = DB::name('Live_number')->where(['live_id'=>$live_id,'user_id2'=>$user["member_id"]])->find();
                if ($live_number){DB::name('Live_number')->where(['live_number_id'=>$live_number['live_number_id']])->delete();}
            }
        }
        $user_id2 = DB::name('Live')->where(["live_id"=>$live_id])->value('user_id');
        //判断用户是否进入直播间
        $anchor = DB::name("Live_number")->where(["live_id" =>$live_id,"user_id2"=>$user["member_id"]])->find();
        $anchor_res = $anchor ? true : DB::name('Live_number')->insert(['live_id'=>$live_id,'user_id'=>$user_id2,'user_id2'=>$user["member_id"],'intime'=>time()]);
        if ($anchor_res){
            DB::name('Live')->comment('观看总人数加1')->where(['live_id'=>$live_id])->setInc('nums');
            DB::name('Live')->comment('观看人数加1')->where(['live_id'=>$live_id])->setInc('watch_nums');
            $is_follow = DB::name('Follow')->comment("判断是否关注")->where(['user_id' => $user["member_id"], 'user_id2' => $user_id2])->find();
            $is_follow ? $is_follow = "2" : $is_follow = "1";
            $lignt_up = DB::name('Live_light_up')->comment("判断是否点亮")->where(['live_id'=>$live_id,'user_id'=>$user["member_id"],'user_id2'=>$user_id2])->find();
            $lignt_up ? $is_lignt_up = "2" : $is_lignt_up = "1";
            $result = ['is_follow'=>$is_follow,'is_lignt_up'=>$is_lignt_up,"prompt"=>"提倡绿色直播"];
        }else{
            error('失败!');
        }
        success($result);
    }
    /**
     * @获取主播信息
     * @param  header_img头像
     * @param  follow_count关注人数
     * @param  fans_count 粉丝数量
     * @param  give_count 送礼数量
     */
    public function get_live_info(){
        $user = $this->checklogin();
        $params = Request::instance()->request();
        $user_id = empty($params["user_id"]) ? error("参数错误") : $params["user_id"];
        $live_id = empty($params["live_id"]) ? error("无法获取直播间信息") : $params["live_id"];
        $info = DB::name('member')->where(['member_id'=>$user_id])->find();
        //$info['header_img'] = $info['header_img'];
        $info['follow_count'] = DB::name('Follow')->comment('关注数')->where(['user_id' =>$user_id])->count();
        $info['fans_count']  = DB::name('Follow')->comment('粉丝数')->where(['user_id2' =>$user_id])->count();
        $info['give_count'] = DB::name('Give_gift')->comment('送礼数')->where(['user_id'=>$user_id])->count();
        $info['room_id'] = DB::name('live')->comment('直播间')->where(['live_id'=>$live_id])->value("room_id");
        $is_follow = DB::name('Follow')->where(['user_id'=>$user["member_id"],'user_id2'=>$user_id])->find();
        $is_follow ? $info['is_follow'] = "2" : $info['is_follow'] = "1";
        success($info);
    }
    /**
     *
     * @直播间用户列表
     */
    public function show_viewer(){
        $user = $this->checklogin();
        $params = Request::instance()->request();
        $live_id = empty($params["live_id"]) ? error("无法获取直播间信息") : $params["live_id"];
        $live = Db::name('live')->where(['live_id'=>$live_id])->find();
        $p = empty($params['p']) ? 1 : $params['p'];
            $pageSize = empty($params["pagesize"]) ? 20 : $params["pagesize"];
        //获取直播总的僵尸粉数量(包括观看人数)
        $count  = DB::name('Live_number')->alias('a')
            ->join('__MEMBER__ b', 'a.user_id2=b.member_id')
            ->where(['a.live_id'=>$live_id])
            ->count();
        $page = ceil($count/$pageSize);
        if($count) {
            //获取僵尸粉信息
            $list = DB::name('Live_number')->alias('a')
                ->field('a.user_id2,b.member_id,b.header_img,b.username,b.grade,b.ID,b.hx_username,b.hx_password,b.b_diamond,b.e_ticket,b.sex,b.province,b.city,b.area')
                ->join('__MEMBER__ b', 'a.user_id2=b.member_id')
                ->where(['a.live_id' => $live_id])
                ->order('a.intime desc')
                ->limit(($p - 1) * $pageSize, $pageSize)
                ->select();
            if ($list) {
                $management = DB::name('Live_management')->comment("判断是否为管理员")->where(['user_id' => $live['user_id']])->column('user_id2');//管理员
                $banned = DB::name('Banned')->comment("判断是否禁言")->where(['live_id' => $live_id])->column('user_id2'); //禁言
                $follow = DB::name('Follow')->where(['user_id' => $user["member_id"]])->column('user_id2');
                foreach ($list as $k => $v) {
                    $list[$k]['header_img'] = $v['header_img'];
//                $list[$k]['follow_count'] = DB::name('Follow')->comment('关注数')->where(['user_id' =>$v['user_id2']])->count();
//                $list[$k]['fans_count']  = DB::name('Follow')->comment('粉丝数')->where(['user_id2' =>$v['user_id2']])->count();
                    in_array($v['user_id2'], $follow) ? $list[$k]['is_follow'] = "2" : $list[$k]['is_follow'] = "1";
                    //查询是否被禁言
                    in_array($v['user_id2'], $banned) ? $list[$k]['is_banned'] = "2" : $list[$k]['is_banned'] = "1";
                    //查询是否是管理
                    in_array($v['user_id2'], $management) ? $list[$k]['is_management'] = "2" : $list[$k]['is_management'] = "1";
//                $list[$k]['give_count'] = DB::name('Give_gift')->comment('送礼数')->where(['user_id'=>$v['member_id']])->count();
                }
            } else {
                $list = [];
            }
        }else{
            $list = [];
        }
        success(["list" =>$list,"count"=>strval($count),'page'=>$page]);
    }
    /**
     *直播列表(电商直播商户列表)
     */
    public function merchants_list(){
       $params = Request::instance()->request();
//     $type = empty($params["type"]) ? error("参数有误") : $params["type"];
       $page = empty($params["p"]) ? 1 :$params["p"];
       $pageSize = empty($params["pagesize"]) ? 20 : $params["pagesize"];
        $qn = new QiniuPili();
        $stream_list = $qn->listLiveStreams();
        //对用户的正常退出进行处理
        if ($stream_list){
            $rs = DB::name('Live')->where(['stream_key'=>['in',$stream_list],'is_normal_exit'=>1])->update(['live_status'=>1,'uptime'=>time()]);
//            foreach ($rs as $k=>$v){
//                if ($v['live_status']==2){
//                    $live_ids[] = $
//                    DB::name('Live')->where(['live_id'=>$v['live_id']])->update(['live_status'=>1,'uptime'=>time()]);
//                }
//            }
        }
        //获取商家总数
        $count = DB::name("merchants")->count();
        $merchants_list = DB::name("merchants")->field('member_id,merchants_img as img ,live_id,merchants_name')->order("live_id desc")->limit(($page-1)*$pageSize,$pageSize)->select();
        foreach ($merchants_list as $k=>$v){
            if($v["live_id"] !=0){
                $live_info = DB::name("live")->where(["live_id"=>$v["live_id"]])->find();
                $merchants_list[$k]["room_id"] = $live_info["room_id"];
                $merchants_list[$k]["play_address"] = $live_info["play_address"];
                //分享连麦的相关信息
//                $merchants_list[$k]["title"] = $live_info["title"];
//                $merchants_list[$k]["qrcode_path"] = $live_info["qrcode_path"];
//                $merchants_list[$k]["qiniu_room_id"] = $live_info["qiniu_room_id"];
//                $merchants_list[$k]["qiniu_room_name"] = $live_info["qiniu_room_name"];
//                $merchants_list[$k]["qiniu_token"] = $live_info["qiniu_token"];

            }
        }
        success(["count"=>$count,"list"=>$merchants_list]);
    }

    public function live_info(){
        $live_id = input('live_id');
        if(empty($live_id))        error("参数错误");
        $live = Db::name('live')->alias('a')
            ->field('a.*,b.username,b.header_img,b.member_id,b.ID')
            ->join('th_member b','a.user_id = b.member_id')
            ->where(['a.live_id'=>$live_id])
            ->find();
        $live['share_url'] = config('domain').'/mall_live/#/liveRoom_mobile?live_id='.$live['live_id'].'&room_id='.$live['room_id'];
        success($live);
    }
    /**
     *非电商直播(无商户)
     */
    public function anchor_live_list(){
        if(Request::instance()->isPost()){
            $uid = input('uid');
            $member = Db::name('member')->where(['member_id'=>$uid])->find();
            $p = input("p");
            $p ? $p :$p = 1;
            $pagesize = input("pagesize");
            $pagesize ? $pagesize : $pagesize = 10;
            $map["live_status"] = 1;
            $type= input("type");
            switch ($type){
                case 1://广场
                    $order = 'a.intime desc';
                    break;
                case 2://关注
                    $follow_user = Db::name('follow')->where(['user_id'=>$member['member_id']])->column('user_id2');
                    if($follow_user){
                        $map['a.user_id'] = ['in',$follow_user];
                    }else{
                        success(['page'=>0,'list'=>[]]);
                    }
                    $order = 'a.intime desc';
                    break;
                case 3://热门
                    $order = 'a.watch_nums desc';
                    break;
                default:$type = 1;
            }
            $count = Db::name('live')->alias('a')
                ->join('__MEMBER__ b','a.user_id = b.member_id')
                ->where($map)->count();
            $page = ceil($count/$pagesize);
            $list = Db::name('live')->alias('a')
                ->field('a.*,b.username,b.header_img,b.member_id')
                ->join('__MEMBER__ b','a.user_id = b.member_id')
                ->where($map)->order($order)
                ->limit(($p-1)*$pagesize,$pagesize)->select();
            foreach ($list as $k=>$v){
                $list[$k]['share_url'] = config('domain').'/mall_live/#/liveRoom_mobile?live_id='.$v['live_id'].'&room_id='.$v['room_id'];
            }
            success(['page'=>$page,'list'=>$list]);
        }
    }
    /**
     *主播列表
     */
    public function anchor_list(){
        $params = Request::instance()->param();
        if(Request::instance()->isPost()){
            $uid =  $params["uid"];
            $p = input("p");
            $p ? $p :$p = 1;
            $pagesize = input("pagesize");
            $pagesize ? $pagesize : $pagesize = 10;
            $type = $params["type"];
            $map["a.type"] = ['in',[2,3]];
            $map["a.is_del"] = 1;
            switch ($type){
                case 1:
                    $order = 'a.mlive_id desc,a.is_recommend desc,b.intime desc';
                    break;
                case 2:
                    $order = 'a.mlive_id desc,a.is_recommend desc,b.intime desc';
                    $follow_user = Db::name('follow')->where(['user_id'=>$uid])->column('user_id2');
                    if($follow_user){
                        $map['a.member_id'] = ['in',$follow_user];
                    }else{
                        success(['page'=>0,'list'=>[]]);
                    }
                    break;
                case 3:
                    $order = 'a.mlive_id desc,a.intime desc';
                    $map["a.is_recommend"] = 1;
                    break;
                default: $type=1;
            }
            $member_where["type"] = ["in",[2,3]];

            $member_where["is_del"] = 1;
            $count = Db::name("Member")
                ->where($member_where)
                ->count();
            $page = ceil($count/$pagesize);
            $list = Db::name('Member')->alias('a')
                ->field('a.username,a.header_img,a.member_id,a.signature,b.live_id,b.live_status,b.title,b.play_img,b.watch_nums,b.play_address,b.room_id')
                ->join('__LIVE__ b','a.mlive_id = b.live_id','LEFT')
                ->where($map)->order($order)
                ->limit(($p-1)*$pagesize,$pagesize)
                ->select();
            foreach ($list as $k=>$v){
                $list[$k]["tv"]= '';
                $fans_count = DB::name("Follow")->where(["user_id2"=>$v['member_id']])->count();
                $list[$k]["fans_count"] = (string)$fans_count;
                if(!$v["live_id"]){
                    $list[$k]["watch_nums"] ='0';
                    $list[$k]["live_id"] = '0';
                    $list[$k]["title"] ='';
                    $list[$k]["play_address"]='';
                    $list[$k]["room_id"]='';
                    $list[$k]['share_url'] = '';
                }else{
                    $list[$k]['share_url'] = config('domain').'/mall_live/#/liveRoom_mobile?live_id='.$v['live_id'].'&room_id='.$v['room_id'];
                }
            }
            success(['page'=>$page,'list'=>$list]);
        }
    }
    public function anchor_lists(){
        $params = Request::instance()->param();
        if(Request::instance()->isPost()){
            $uid = $params["uid"];
            $p = input("p");
            $p ? $p :$p = 1;
            $pagesize = input("pagesize");
            $pagesize ? $pagesize : $pagesize = 10;
            $type = $params["type"];
            $map["a.type"] = ['in',[2,3]];
            $map["a.is_del"] = 1;
            $map["b.live_status"] =1;
            switch ($type){
                case 1:
                    $order = 'b.live_status asc,a.tuijian desc,b.intime desc';
                    break;
                case 2:
                    $order = 'b.live_status asc,a.tuijian desc,b.intime desc';
                    $follow_user = Db::name('follow')->where(['user_id'=>$uid])->column('user_id2');
                    if($follow_user){
                        $map['a.member_id'] = ['in',$follow_user];
                    }else{
                        success(['page'=>0,'list'=>[]]);
                    }
                    break;
                case 3:
                    $order = 'b.live_status asc,a.intime desc';
                    $map["a.tuijian"] = 1;
                    break;
                default: $type=1;
            }
            $anchor["type"] = ["in",[2,3]];
            $anchor["is_del"] = 1;
            $count = Db::name("Member")->where($anchor)->count();
            $member_id = DB::name("Member")->alias("a")->join('__LIVE__ b','a.member_id = b.user_id','LEFT')->where()->column("member_id");
            if(empty($member_id)){
                $anchor["member_id"] = ["not in",[]];
            }else{
                $anchor["member_id"] = ["not in",$member_id];
            }
            $page = ceil($count/$pagesize);
            //直播中的
            $yes_live = Db::name('Member')->alias('a')
                ->field('a.username,a.member_id,a.signature,b.live_id,b.live_status,b.title,b.play_img as header_img,b.watch_nums,b.play_address,b.room_id')
                ->join('__LIVE__ b','a.member_id = b.user_id','LEFT')
                ->where($map)->order($order)
                ->limit(($p-1)*$pagesize,$pagesize)
                ->select();
            //不在直播
            $no_live = DB::name("Member")->field('username,header_img,member_id,signature')->where($anchor)->order("tuijian desc")->select();
            foreach ($no_live as $k=>$v){
                $no_live[$k]["title"] = '';
                $no_live[$k]["watch_nums"] = '0';
                $no_live[$k]["play_address"] = '';
                $no_live[$k]["room_id"] = '';
            }
            $list = array_merge($yes_live,$no_live);
            success(['page'=>$page,'list'=>$list]);
        }
    }
    /**
     *直播列表
     */
    public function live_list(){
        if(Request::instance()->isPost()){
            $uid = input('uid');
            if($uid) {
                $member = Db::name('member')->where(['member_id' => $uid])->find();
            }
            $p = input('p');
            $p ? $p : $p = 1;
            $pagesize = input('pagesize');
            $pagesize ? $pagesize : $pagesize = 10;
            $type = input('type');
            switch ($type){
                case 1://综合
                    $order = 'a.intime desc';
                    break;
                case 2://关注
                    $follow_user = Db::name('follow')->where(['user_id'=>$member['member_id']])->column('user_id2');
                    if($follow_user){
                        $map['a.user_id'] = ['in',$follow_user];
                    }else{
                        success(['page'=>0,'list'=>[]]);
                    }
                    $order = 'a.intime desc';
                    break;
                case 3:
                    $order = 'a.watch_nums desc';
                    break;
                    default:$type = 1;
            }
            $map['a.live_status'] = 1;
            $map['a.is_offline'] = 1;
            $count = Db::name('live')->alias('a')
                   ->join('th_member b','a.user_id = b.member_id')
                   ->join('th_merchants c','c.member_id = a.user_id')
                   ->where($map)->count();
            $page = ceil($count/$pagesize);
            $list = Db::name('live')->alias('a')
                  ->field('a.*,b.username,b.header_img,b.member_id,b.ID,c.merchants_name')
                  ->join('th_member b','a.user_id = b.member_id')
                  ->join('th_merchants c','c.member_id = a.user_id')
                 ->where($map)->order($order)
                 ->limit(($p-1)*$pagesize,$pagesize)->select();
            foreach ($list as $k=>$v){
                $list[$k]['share_url'] = config('domain').'/mall_live/#/liveRoom_mobile?live_id='.$v['live_id'].'&room_id='.$v['room_id'];
            }
            success(['page'=>$page,'list'=>$list]);
        }
    }

    /**
     * 直播列表
     *@param class_id 商家id
     */
    public function queryLiveListByClass(){
        if(Request::instance()->isPost()){
            $uid = input('uid');
            if($uid){
                $member = Db::name('member')->where(['member_id'=>$uid])->find();
            }
            $class_id = input('class_id');
            if(!empty($class_id)){
                $where[] = ['exp','FIND_IN_SET('.$class_id.',class_id)'];
                $anthor = Db::name('goods_merchants_class')->where($where)->column('member_id');
                if($anthor){
                   $map['a.member_id'] = ['in',$anthor];
                }else{
                    success(['page'=>0,'list'=>[]]);
                }
            }
            $p = input('p');
            $p ? $p : $p = 1;
            $pagesize = input('pagesize');
            $pagesize ? $pagesize : $pagesize = 10;
            $type = input('type');
            switch ($type){
                case 1://综合
                    $order = 'a.intime desc';
                    break;
                case 2://关注
                    $follow_user = Db::name('follow')->where(['user_id'=>$member['member_id']])->column('user_id2');
                    if($follow_user){
                        $map['a.member_id'] = ['in',$follow_user];
                    }else{
                        success(['page'=>0,'list'=>[]]);
                    }
                    $order = 'a.intime desc';
                    break;
                case 3:
                    $order = 'a.watch_nums desc';
                    break;
                default:$type = 1;
            }
//            $map['a.live_status'] = 1;
//            $map['a.is_offline'] = 1;
            $map['a.type'] != '1';
            $map['b.is_delete'] = '0';
            $map['b.apply_state'] = '2';
            $count = Db::name('member')->alias('a')
                ->join('th_merchants b','a.member_id = b.member_id')
                ->where($map)->count();
            $page = ceil($count/$pagesize);
            $list = Db::name('member')->alias('a')
                ->field('a.member_id,a.username,a.city,b.merchants_name,b.merchants_img,b.live_id')
                ->join('th_merchants b','a.member_id = b.member_id')
                ->where($map)->order($order)
                ->limit(($p-1)*$pagesize,$pagesize)->select();
            foreach ($list as $k=>$v){
                $list[$k]['goods_class'] = Db::name('goods_merchants_class')->alias('a')
                    ->field('b.class_id,b.class_name,b.class_uuid')
                    ->join('th_goods_class b', 'FIND_IN_SET(b.class_id,a.class_id)')
                    ->where(['a.member_id' => $v['member_id'], 'b.is_delete' => 0])
                    ->select();
                if($v['live_id']){
                    $live = Db::name('live')->where(['live_id'=>$v['live_id']])->find();
                    $list[$k]['play_img'] = $live['play_img'];
                    $list[$k]['title'] = $live['title'];
                    $list[$k]['city'] = $live['shi'];
                    $list[$k]['share_url'] = config('domain').'/mall_live/#/liveRoom_mobile?live_id='.$live['live_id'].'&room_id='.$live['room_id'];
                }else{
                    $list[$k]['play_img'] = $v['merchants_img'];
                    $list[$k]['title'] = '';
                    $list[$k]['city'] = $v['city'];
                    $list[$k]['share_url'] = '';
                }
            }
            success(['page'=>$page,'list'=>$list]);
        }
    }

    /**
     *好货分类
     */
    public function showGoodsClass(){
        if (Request::instance()->isPost()) {
            $where = [
                'class_type' => 'home',
                'is_delete' => '0',
                'class_state' => '1',
                'parent_id' => '-1'
            ];
            $list = Db::name('goods_class')
                ->field('class_id,class_name,class_desc,class_img,class_color,class_uuid,template_img')
                ->where($where)->order("sort desc")->select();
            $arr = [
                'class_id'      =>  '',
                'class_name'    =>  '全部',
                'class_desc'    =>  '',
                'class_img'     =>  '',
                'class_color'   =>  '',
                'class_uuid'    =>  '',
                'template_img'  =>  ''
            ];
            array_push($list,$arr);
            return success($list);
        }
    }

    public function queryLiveByClass(){
        $class_uuid = input('class_uuid');
        if(!$class_uuid)            error("参数错误");
        $city = input('city');
        $p = input('p');
        $p ? $p : $p = 1;
        $pagesize = input('pagesize');
        $pagesize ? $pagesize : $pagesize = 10;
        $merchant = Db::name('goods_merchants_class')->alias('a')
              ->join('th_goods_class b','FIND_IN_SET(b.class_id,a.class_id)')
              ->where(['b.class_uuid'=>$class_uuid])
              ->column('a.member_id');
        if($merchant){
            $map['a.user_id'] = ['in',$merchant];
            $map['a.live_status'] = 1;
            $map['a.is_offline'] = 1;
            if($city)       $map['a.city']  =   ['like','%'.$city.'%'];
            $count = Db::name('live')->alias('a')
                ->join('th_member b','a.user_id = b.member_id')
                ->join('th_merchants c','c.member_id = a.user_id')
                ->where($map)->count();
            $list = Db::name('live')->alias('a')
                ->field('a.*,b.username,b.header_img,b.member_id,c.merchants_name')
                ->join('th_member b','a.user_id = b.member_id')
                ->join('th_merchants c','c.member_id = a.user_id')
                ->where($map)->order("a.intime desc")
                ->limit(($p-1)*$pagesize,$pagesize)->select();
            foreach ($list as $k=>$v){
                $list[$k]['share_url'] = config('domain').'/mall_live/#/liveRoom_mobile?live_id='.$v['live_id'].'&room_id='.$v['room_id'];
            }
            $page = ceil($count/$pagesize);
            success(['page'=>$page,'list'=>$list]);
        }else{
            success(['page'=>0,'list'=>[]]);
        }

    }

    /**
     *商家直播和录播
     */
    public function merchants_live(){
        $params = Request::instance()->request();
        $member_id = empty($params["member_id"]) ? error("无法获取商家信息") : $params["member_id"];
        //获取商家直播
        $live_list = DB::name("live")
                    ->where(["user_id"=>$member_id,"live_status"=>1])
                    ->order("live_id desc")
                    ->find();
        if($live_list){
            $live_list["start_time"] = date("Y-m-d H:m",$live_list["start_time"]);
        }else{
            $live_list =(object)array();
        }
        success($live_list);
    }

    /**
     *商户录播
     */
    public function playback_list(){
        $params = Request::instance()->request();
        $member_id = empty($params["member_id"]) ? error("无法获取商家信息") : $params["member_id"];
        $p = input('p');
        empty($p) && $p = 1;
        $pageSize = input('pagesize');
        $pageSize ? $pageSize : $pageSize = 10;
        //回放列表
        $playback_list = DB::name("live_store")
            ->field('live_store_id,title,url,play_img,date,play_number')
            ->where(["user_id"=>$member_id,"is_del"=>1])
            ->order("intime desc")
            ->limit(($p-1)*$pageSize,$pageSize)
            ->select();
        foreach ($playback_list as $k=>$v){
            $playback_list[$k]['date'] = date('Y-m-d',strtotime($v['date']));
        }
        $count = DB::name("live_store")
            ->field("title,url,play_img,date,play_number")
            ->where(["user_id"=>$member_id,"is_del"=>1])
            ->count();
        $page = ceil($count/$pageSize);
        success(['list'=>$playback_list,'count'=>(string)$count,'page'=>$page]);
    }

    /**
     *@删除录播
     */
    public function del_playback(){
        $user =$this->checklogin();
        $live_store_id = input('live_store_id');
        $result = Db::name('Live_store')->where(['live_store_id'=>$live_store_id])->update(['is_del'=>'2']);
        if($result){
            success('删除成功');
        }else{
            success('删除失败');
        }
    }
    /**
     * @点亮
     */
    public function lignt_up(){
        $user =$this->checklogin();
        $params = Request::instance()->request();
        $live_id = empty($params["live_id"]) ? error("无法获取直播间信息") : $params["live_id"];
        $user_id2 = DB::name('Live')->where(["live_id" =>$live_id])->value('user_id');
        $lignt_up = DB::name('Live_light_up')->where(['live_id'=>$live_id,'user_id'=>$user["member_id"],'user_id2'=>$user_id2])->find();
        if($lignt_up){
            error('已点亮!');
        }else{
            if (DB::name('Live_light_up')->insert(['live_id'=>$live_id,'user_id'=>$user["member_id"],'user_id2'=>$user_id2,'intime'=>time()])){
                DB::name('Live')->comment('点亮数加1')->where(['live_id'=>$live_id])->setInc('light_up_count');
                success('点亮成功!');
            }else{
                error('点亮失败!');
            }
        }
    }

    /**
    * @关注（取消关注）
    * @type  1:关注   2：取消关注
    */
    public function follow(){
        $user = $this->checklogin();
        $user_id2 = input('user_id2');
        if(!$user_id2)      error("参数错误");
        if ($user["member_id"] == $user_id2) error("传值错误");
        $check = Db::name('follow')->where(['user_id' => $user['member_id'], 'user_id2' => $user_id2])->find();
        if ($check) {
            $is_delete = DB::name("follow")->where(["follow_id"=>$check["follow_id"]])->delete();
            if($is_delete){
                success("取消关注");
            }else{
                success("失败");
            }
        } else {
            $data['user_id'] = $user['member_id'];
            $data['user_id2'] = $user_id2;
            $data['intime'] = time();
            $result = Db::name('follow')->insert($data);
            if ($result) {
                success('关注成功!');
            } else {
                error("失败");
            }
        }
    }
    /**
     *主播给主播点赞
     */
    public function give_praise(){
        $params = Request::instance()->param();
        $member_id = empty($params["member_id"]) ? error("无法获取主播信息") : $params["member_id"];
        $res =DB::name('Member')->where(["member_id"=>$member_id])->setInc('zan');
        if($res){
            success("点赞成功");
        }else{
            success("点赞失败");
        }
    }
    /**
     * 踢人
     */
    public function kicking(){
        $user = $this->checklogin();
        $param = Request::instance()->request();
        $live_id = empty($param["live_id"]) ?  error("无法进入直播间") : $param["live_id"];
        $user_id = empty($param["user_id"]) ?  error("无法获取用户信息") : $param["user_id"];
        // 启动事务
        Db::startTrans();
        try{
            DB::name('live_kicking')->insert(['live_id'=>$live_id,'user_id'=>$user_id,'intime'=>time(),'date'=>date('Y-m-d',time())]);
            DB::name('live_number')->where(['live_id'=>$live_id,'user_id2'=>$user_id])->delete();
            // 提交事务
            Db::commit();
            success('成功!');
        } catch (\Exception $e) {
            Db::rollback();
            error('失败!');
        }
    }
    /**
     * @判断是否被禁言
     */
    public function is_banned(){
        $user = $this->checklogin();
        $params = Request::instance()->request();
        $live_id = empty($params["live_id"]) ? error("无法获取直播间信息") : $params["live_id"];
        if (DB::name('Banned')->where(['live_id'=>$live_id,'user_id2'=>$user["member_id"]])->find()){
            $result = "2";
        }else{
            $result = "1";
        }
        success($result);
    }

    /**
     * @禁言(取消禁言)
     */
    public function do_banned(){
        $user = $this->checklogin();
        $params = Request::instance()->request();
        $user_id2 = empty($params["user_id"]) ? error("无法获取用户的信息") : $params["user_id"];
        $live_id = empty($params["live_id"]) ? error("无法获取直播间信息") : $params["live_id"];
        $type = empty($params["type"]) ? error("参数错误") : $params["type"];
        $uid = DB::name('Live')->where(["live_id" =>$live_id])->value('user_id');   //主播id
        $ba = DB::name('Banned')->where(['live_id'=>$live_id,'user_id'=>$uid,'user_id2'=>$user_id2])->find();
        switch ($type){
            case 1:
                if ($ba){
                    error('已被禁言!');
                }else{
                    if (DB::name('Banned')->insert(['live_id'=>$live_id,'user_id'=>$uid,'user_id2'=>$user_id2,'intime'=>time()])){
                        success('禁言成功!');
                    }else{
                        error('失败!');
                    }
                }
                break;
            case 2:
                if ($ba){
                    if (DB::name('Banned')->where(['banned_id'=>$ba['banned_id']])->delete()){
                        success('成功!');
                    }else{
                        error('取消成功!');
                    }
                }else{
                    error('还未被禁言!');
                }
            break;
        }
    }
    /**
     * @获取用户是否开启连麦功能
     */
    public function is_wheat(){
        $user = $this->checklogin();
        $params = Request::instance()->request();
        $user_id = empty($params["user_id"]) ? error("无法获取用户的信息") : $params["user_id"];
        $is_wheat = DB::name('member')->where(['member_id'=>$user_id])->value('is_wheat');
        if($is_wheat){
            $is_wheat = 1;
        }else{
            $is_wheat = 2;
        }
        success($is_wheat);
    }

    /**
     * @开启连麦(关闭连麦)
     * @type  1:开启   2:关闭
     */
    public function do_wheat(){
        $user = $this->checklogin();
        $params = Request::instance()->request();
        $type = empty($params["type"]) ? error("无法进行连麦操作") : $params["type"];
        if (DB::name('member')->where(['member_id'=>$user['member_id']])->update(['is_wheat'=>$type,'uptime'=>time()])){
            success('成功!');
        }else{
            error('失败!');
        }
    }


    /**
     *退出直播间
     */
    public function out_live(){
       $user = $this->checklogin();
        $param = Request::instance()->request();
        $live_id = empty($param["live_id"]) ?  error("无法获取直播间信息") : $param["live_id"];
        $user_id2 = DB::name('Live')->where(["live_id"=>$live_id])->value('user_id');
        if (DB::name('Live')->where(['live_id' =>$live_id])->setDec('watch_nums')){
            DB::name('Live_number')->comment('删除记录')->where(['live_id'=>$live_id,'user_id'=>$user_id2,'user_id2'=>$user["member_id"]])->delete();
            success('成功退出!');
        }else{
            error('退出失败!');
        }
    }

    /**
     * 结束直播(主播端)
     */
    public function end_live(){
        $user = $this->checklogin();
        $param = Request::instance()->request();
        $live_id = empty($param["live_id"]) ?  error("无法进入直播间") : $param["live_id"];
        if (DB::name('live')->where(['live_id'=>$live_id])->update(['end_time'=>time(),'live_status'=>2,'is_normal_exit'=>1])){
            $live = Db::name('Live')->alias('a')
                ->field('a.live_id,a.user_id,a.play_img,a.title,a.start_time,a.end_time,a.nums as watch_nums,a.share,a.stream_key,a.room_id,a.lebel,b.header_img,b.username,b.ID')
                ->join('__MEMBER__ b','a.user_id=b.member_id')
                ->where(['live_id'=>$live_id])
                ->find();
            //商户表结束直播时live_id=0
            DB::name("merchants")->where(["member_id"=>$user["member_id"]])->update(["live_id"=>0]);
            DB::name("Member")->where(["member_id"=>$user["member_id"]])->update(["mlive_id"=>0]);
            if (time()-$live['start_time']>120){
                $streamKey = $live['stream_key'];
                $qn = new QiniuPili();
                $fname = $qn->save_vido($streamKey);
                if ($fname['fname']) {
                    $url = config("speed_domain").'/'.$fname['fname'];
                    $live['url'] = $url;
                    $data =[
                        'stream_key'=>$streamKey,
                        'live_id'=>$live_id,
                        'user_id'=>$live['user_id'],
                        'play_img'=>$live['play_img'],
                        'title'=>$live['title'],
                        'play_number'=>$live["watch_nums"],
                        'url'=>$url,
                        'intime'=>time(),
                        'room_id'=>$live['room_id'],
                        'date'=>date('Y-m-d H:i'),
                        'lebel'=>$live['lebel'],
                        'livewindow_type' => 1,
                        'live_time' => $live["start_time"],

                    ];
                    DB::name('Live_store')->insert($data);
                }
            }
            $url ? $live['url'] = $url : $live['url'] = "";
            $list = DB::name('Live')->where(['date'=>date('Y-m-d',time())])->order('nums desc')->select();
            $live['play_img'] = $live['play_img'];
//            $live['img'] = $live['img'];
            $timediff = $live['end_time']-$live['start_time'];
            //计算小时数
            $remain = $timediff%86400;
            $hours = intval($remain/3600);
            //计算分钟数
            $remain = $remain%3600;
            $mins = intval($remain/60);
            //计算秒数
            $secs = $remain%60;
            $live['time'] = $hours.":".$mins.":".$secs;
            $get_fire = DB::name('Give_gift')->where(['live_id'=>$live_id])->sum('jewel');
            $get_fire ? $live['get_fire'] = $get_fire : $live['get_fire'] = "0";
            success($live);
        }else{
            error('失败!');
        }
    }
    /**
     * @结束直播(观看端)
     */
    public function live_end(){
        //$user = checklogin();
        $user_id = input('uid');
        $live_id = input('live_id');
        empty($live_id) ? error('参数错误!') : true;
        $live = DB::name('Live')->alias('a')
            ->field('a.live_id,a.user_id,a.play_img,a.title,a.start_time,a.end_time,a.nums as watch_nums,b.header_img,b.username,b.signature')
            ->join('__MEMBER__ b','a.user_id=b.member_id')
            ->where(['live_id'=>$live_id])
            ->find();
        if(!$live)          error("参数错误");
        $timediff = $live['end_time']-$live['start_time'];
        //计算小时数
        $remain = $timediff%86400;
        $hours = intval($remain/3600);
        //计算分钟数
        $remain = $remain%3600;
        $mins = intval($remain/60);
        //计算秒数
        $secs = $remain%60;
        $live['time'] = $hours.":".$mins.":".$secs;
        //有bug
        $merchants_res = DB::name("merchants")->where(["member_id"=>$live["user_id"]])->find();
        //1：商户2：主播
        if($merchants_res){
            $live["is_anchor"] =1;
        }else{
            $live["is_anchor"] = 2;
        }
        if (empty($user_id)){
            $live['is_follow'] = "1";
        }else{
            $is_follow = DB::name('Follow')->where(['user_id'=>$user_id,'user_id2'=>$live['user_id']])->find();
            $is_follow ? $live['is_follow'] = "2" : $live['is_follow'] = "1";
        }
        success($live);
    }
    /********************************************************他人部分start***************************************************************/
    /**
     * @他人主页
     */
    public function other_center(){
        $user_id = input('user_id');
        $type = input("type");
        if(empty($type)){
            $user = $this->checklogin();
            empty($user_id) ? error('无法获取用户信息!') : true;
            $u = DB::name('Member')->find($user_id);
            $u['img'] = $u['header_img'];
            $u['follow'] = DB::name('Follow')->where(['user_id'=>$user_id])->count();
            $u['follow_to'] = DB::name('Follow')->where(['user_id2'=>$user_id])->count();
            $u['collection'] = DB::name('Collection')->where(['user_id'=>$user_id])->count();
            $is_follow = DB::name('Follow')->where(['user_id'=>$user['member_id'],'user_id2'=>$user_id])->find();
            if($is_follow){
                $u['is_follow'] = '2';
            }else{
                if($user['member_id'] == $user_id){
                    $u['is_follow'] = '3';
                }else{
                    $u['is_follow'] = '1';
                }
            }
            $u['live_count'] = DB::name('Live_store')->where(['user_id'=>$user_id,'is_del'=>1])->count();
            $give_count = DB::name('Give_gift')->where(['user_id'=>$user_id])->sum('jewel');
            $give_count ? $u['give_count'] = $give_count : $u['give_count'] = "0";
            //判断是否正在直播
            $live = DB::name('Live')
                ->alias('a')
                ->field('a.*,b.username,b.header_img,b.grade,b.hx_username,b.ID,b.sex,b.province,b.city,b.e_ticket,b.b_diamond,b.type')
                ->join('__MEMBER__ b','a.user_id=b.member_id')
                ->where(['a.user_id'=>$user_id,'a.live_status'=>1])
                ->find();
            if ($live){
                $u['is_live'] = "2";
                $live['img'] = $live['header_img'];
                $live['play_img'] = $live['play_img'];
                $live['qrcode_path'] = "baidu.com";//C('IMG_PREFIX').$live['qrcode_path'];
                $live['url'] = config('domain')."/App/Index/share_live/live_id/" . base64_encode($live['live_id']);
                $live['lebel'] = explode(',',$live['lebel']);
                $u['live'] = $live;
            }else{
                $u['is_live'] = "1";
            }
        }else{
            $u = DB::name("Member")->where(["member_id"=>$user_id])->find();
            $u['is_follow'] = '1';
        }
        success($u);
    }
    /**
     * @他人粉丝列表
     * $type   1:粉丝列表   2:关注列表
     */
    public function other_follow_list(){
        $user = $this->checklogin();
        $params = Request::instance()->param();
        $user_id = empty($params["user_id"]) ? error("获取用户信息信息失败") : $params["user_id"];
        $type = empty($params["type"]) ? error("传参数据有误") : $params["type"];
        ($type==1 || $type==2) ? true : error('传值错误!');
        $page = input('p');
        $pageSize = input('pagesize');
        $page ? $page : $page = 1;
        $pageSize ? $pageSize : $pageSize = 10;
        $follow = Db::name('Follow')->where(['user_id'=>$user['member_id'],'is_delete'=>'0'])->column('user_id2');
        switch ($type){
            case 1:
                $list = DB::name('Follow')
                    ->alias('a')
                    ->field('b.member_id,b.header_img,b.username,b.sex,b.signature,b.hx_username,b.grade')
                    ->join('__MEMBER__ b','a.user_id=b.member_id')
                    ->where(['a.user_id2'=>$user_id,'b.is_del'=>1])
                    ->order('a.intime desc')
                    ->limit(($page-1)*$pageSize,$pageSize)
                    ->select();
                break;
            case 2:
                $list = DB::name('Follow')
                    ->alias('a')
                    ->field('b.member_id,b.header_img,b.username,b.sex,b.signature,b.hx_username,b.grade')
                    ->join('__MEMBER__ b','a.user_id2=b.member_id')
                    ->where(['a.user_id'=>$user_id,'b.is_del'=>1])
                    ->order('a.intime desc')
                    ->limit(($page-1)*$pageSize,$pageSize)
                    ->select();
                break;
        }
        if ($list){
            foreach ($list as $k=>$v){
                if(in_array($v['member_id'],$follow)){
                    $list[$k]['is_follow'] = '2';
                }else{
                    if($v['member_id'] != $user['member_id']){
                        $list[$k]['is_follow'] = '1';
                    }else{
                        $list[$k]['is_follow'] = '3';
                    }
                }
            }
        }else{$list=[];}
        success($list);
    }
    /**
     * @我的粉丝列表(关注列表
     * $type   1:粉丝列表   2:关注列表
     */
    public function follow_list(){
        $user = $this->checklogin();
        $params = Request::instance()->param();
        $type = empty($params["type"]) ? error("传参数据有误") : $params["type"];
        ($type==1 || $type==2) ? true : error('传值错误!');
        $page = input('p');
        $pageSize = input('pagesize');
        $page ? $page : $page = 1;
        $pageSize ? $pageSize : $pageSize = 10;
        $follow = Db::name('Follow')->where(['user_id'=>$user['member_id'],'is_delete'=>'0'])->column('user_id2');
        switch ($type){
            case 1:
                $list = DB::name('Follow')->alias('a')
                    ->field('b.member_id,b.header_img,b.username,b.sex,b.signature,b.hx_username,b.grade')
                    ->join('__MEMBER__ b','a.user_id=b.member_id')
                    ->where(['a.user_id2'=>$user['member_id'],'b.is_del'=>1])
                    ->order('a.intime desc')
                    ->limit(($page-1)*$pageSize,$pageSize)
                    ->select();
                break;
            case 2:
                $list = DB::name('Follow')
                    ->alias('a')
                    ->field('b.member_id,b.header_img,b.username,b.sex,b.signature,b.hx_username,b.grade')
                    ->join('__MEMBER__ b','a.user_id2=b.member_id')
                    ->where(['a.user_id'=>$user['member_id'],'b.is_del'=>1])
                    ->order('a.intime desc')
                    ->limit(($page-1)*$pageSize,$pageSize)
                    ->select();
                break;
        }
        if ($list){
            foreach ($list as $k=>$v){
                if(in_array($v['member_id'],$follow)){
                    $list[$k]['is_follow'] = '2';
                }else{
                    if($v['member_id'] != $user['member_id']){
                        $list[$k]['is_follow'] = '1';
                    }else{
                        $list[$k]['is_follow'] = '3';
                    }
                }
            }
        }else{$list=[];}
        success($list);
    }
    /**
     * @他人直播列表(录播列表)
     */
    public function other_live_list(){
        $user = $this->checklogin();
        $user_id = input('user_id');
        empty($user_id) ? error('参数错误!') : true;
        $page = input('p');
        $pageSize = input('pagesize');
        $page ? $page : $page = 1;
        $pageSize ? $pageSize : $pageSize = 10;
        $list = DB::name('Live_store')
            ->alias('a')
            ->field('a.*,b.header_img,b.sex,b.username,b.ID,b.hx_username,b.grade,b.province,b.city,b.zan,b.signature,b.e_ticket,b.b_diamond')
            ->join('__MEMBER__ b ','a.user_id=b.member_id')
            ->where(['a.user_id'=>$user_id,'a.is_del'=>1])
            ->order('a.intime desc')
            ->limit(($page-1)*$pageSize,$pageSize)
            ->select();
        if ($list){
//            foreach ($list as $k=>$v){
//                if (time()-$v['intime']<(7*24*60*60)){
//                    $list[$k]['intime'] = get_times($v['intime']);
//                }else{
//                    $list[$k]['intime'] = $v['date'];
//                }
//                $list[$k]['img'] = DB::name('Member')->where(['member_id'=>$v['user_id']])->value('header_img');
//            }
            success($list);
        }else{$list=[];}
        success($list);

    }
    /********************************************************他人部分end***************************************************************/
    /**
     * @充值价格列表
     */
    public function price_list(){
        $this->checklogin();
        $list = DB::name('Price')->order('price asc')->select();
        if (!$list){$list=[];}
        success($list);
    }
    /**
     * @param  price价格
     * @param img图片
     * @礼物列表
     */
    public function gift_list(){
        $user = $this->checklogin();
        $list = DB::name('Gift')->order('sort desc')->select();
        if ($list){
            foreach($list as $k=>$v){
                $list[$k]['img'] = $v['img'];
            }
        }else{$list=[];}
        success($list);
    }

    protected function  queryTv($tv_id){
        $tv = Db::name('television')->where(['tv_id'=>$tv_id])->find();
        return $tv;
    }

    /**
     * @送礼
     */
    public function give_gift(){
        $user = $this->checklogin();
        $param = Request::instance()->request();
        $num = empty($param["number"])? 1 :$param["number"];
        $live_id = empty($param["live_id"]) ?  error("无法获取直播间信息") : $param["live_id"];
        $gift_id = empty($param["gift_id"]) ?  error("礼物获取失败") : $param["gift_id"];
        $system = DB::name("system")->where(["id"=>1])->find();
        $gift = DB::name("gift")->where(['gift_id' => $gift_id])->find();
        $count_price = $num * $gift["price"];
        $user['b_diamond'] - $count_price< 0 ? error('余额不足!') : true;
        // 启动事务
        $user_money = $user['b_diamond']-$count_price;       //用户扣除之后的金额
        $user_experience = $user['experience'] + $num*$gift['experience'];   //计算用户经验
        $user_give = $user['give_gift_count']+$count_price;
        $up_mebinfo = DB::name("member")->where(['member_id' =>$user['member_id']])->update(['b_diamond' => $user_money,'experience'=>$user_experience,'give_gift_count'=>$user_give,'uptime' => time()]);
        if ($up_mebinfo) {
            Db::startTrans();
            if(!empty($user['tv_id'])){
                $gift_earnings['spread_tv'] = $user['tv_id'];
                $gift_earnings['spread_tv_ratio'] = $system['spread_scale1'];
                $tv = $this->queryTv($user['tv_id']);
                $gift_earnings['spread_tv_amount'] = $count_price*$system['spread_scale1']/100;
                Db::name('television')->where(['tv_id' => $user['tv_id']])->update(['e_ticket' => $tv['e_ticket'] + $gift_earnings['spread_tv_amount'], 'e_ticket_count' => $tv['e_ticket_count'] + $gift_earnings['spread_tv_amount']]);
            }
            $user_id2 = DB::name("live")->where(["live_id"=>$live_id])->value('user_id');    //主播id
            $member = DB::name("member")->field('e_ticket,get_gift_count')->where(["member_id"=>$user_id2])->find();
            //进行主播判断(包括商家主播)
            $anchor = DB::name("anchor_info")->where(["anchor_id"=>$user_id2])->find();
            if($anchor){ //主播（包括平台主播，电视台主播）
                $mer_data = [
                    "user_id" => $user['member_id'],
                    "live_id"=>$live_id,
                    "user_id2"=>$user_id2,
                    'gift_id'=>$gift_id,
                    'intime'=>time(),
                    'date'=>date("Y-m-d",time()),
                    'jewel'=>$gift["price"],
                    'dashang_scale'=> $anchor['dashang_scale'],
                    'member_type'=>1,
                    'experience' => $gift['experience'],
                    'e_ticket' =>$count_price,
                    'tv_id'=>$anchor['tv_id'],
                    'number'=>$num
                ];
                $give_gift_id = DB::name("give_gift")->insertGetId($mer_data);
                if(!$give_gift_id){
                    Db::rollback();
                    error('送礼失败!');
                }
                $gift_earnings['anchor_id'] = $user_id2;
                $gift_earnings['give_gift_id'] = $give_gift_id;
                $gift_earnings['anchor_ratio'] = $anchor['dashang_scale'];
                $gift_earnings['anchor_amount'] = $count_price*$anchor['dashang_scale']/100;
                $gift_earnings['platform_ratio'] = 100-$anchor['dashang_scale']-$gift_earnings['spread_tv_ratio'];
                $gift_earnings['platform_amount'] = $count_price-$gift_earnings['anchor_amount']-$gift_earnings['spread_tv_amount'];
                $gift_earnings['create_time'] = date('Y-m-d H:i:s',time());
                if($anchor['tv_id']){//属于电视台主播
                    $tv_id = $anchor["tv_id"];
                    //获取电视台各级（比例）
                    $tv_relation = Db::name('television_relation')->alias('a')
                        ->field('a.*,b.tv_type')
                        ->join('th_television b','a.tv_id = b.tv_id')
                        ->where(['a.tv_id' => $anchor['tv_id']])->find();
                    if($tv_relation) {
                        if ($tv_relation['gift_ratio'] > 0) {
                            $tv_money1 = $gift_earnings['anchor_amount'] * $tv_relation['gift_ratio']  / 100;
                            $tv = $this->queryTv($tv_id);
                            Db::name('television')->where(['tv_id' => $tv_id])->update(['e_ticket' => $tv['e_ticket'] + $tv_money1, 'e_ticket_count' => $tv['e_ticket_count'] + $tv_money1]);
                            switch ($tv_relation['tv_type']){
                                case 1: //省
                                    $gift_earnings['level_three_tv'] = $tv_id;
                                    $gift_earnings['level_three_ratio'] = $tv_relation['gift_ratio'];
                                    $gift_earnings['level_three_amount'] = $tv_money1;
                                    break;
                                case 2://市
                                    $gift_earnings['level_two_tv'] = $tv_id;
                                    $gift_earnings['level_two_ratio'] = $tv_relation['gift_ratio'];
                                    $gift_earnings['level_two_amount'] = $tv_money1;
                                    break;
                                case 3://区
                                    $gift_earnings['level_one_tv'] = $tv_id;
                                    $gift_earnings['level_one_ratio'] = $tv_relation['gift_ratio'];
                                    $gift_earnings['level_one_amount'] = $tv_money1;
                                    break;
                            }
                        }
                        if ($tv_relation['city_tv_id']) {
                            if ($tv_relation['city_gift_ratio'] > 0) {
                                $tv_money2 = $gift_earnings['anchor_amount'] * $tv_relation['city_gift_ratio'] / 100;
                                $tv = $this->queryTv($tv_relation['city_tv_id']);
                                Db::name('television')->where(['tv_id' => $tv_relation['city_tv_id']])->update(['e_ticket' => $tv['e_ticket'] + $tv_money2, 'e_ticket_count' => $tv['e_ticket_count'] + $tv_money2]);
                                $gift_earnings['level_two_tv'] = $tv_relation['city_tv_id'];
                                $gift_earnings['level_two_ratio'] = $tv_relation['city_gift_ratio'];
                                $gift_earnings['level_two_amount'] = $tv_money2;
                            }
                        }
                        if ($tv_relation['province_tv_id']) {
                            if ($tv_relation['province_gift_ratio'] > 0) {
                                $tv_money3 = $gift_earnings['anchor_amount'] * $tv_relation['province_gift_ratio'] / 100;
                                $tv = $this->queryTv($tv_relation['province_tv_id']);
                                Db::name('television')->where(['tv_id' => $tv_relation['province_tv_id']])->update(['e_ticket' => $tv['e_ticket'] + $tv_money3, 'e_ticket_count' => $tv['e_ticket_count'] + $tv_money3]);
                                $gift_earnings['level_three_tv'] = $tv_relation['province_tv_id'];
                                $gift_earnings['level_three_ratio'] = $tv_relation['province_gift_ratio'];
                                $gift_earnings['level_three_amount'] = $tv_money3;
                            }
                        }
                    }

                    $result = Db::name('member')->where(['member_id'=>$user_id2])->update(['get_gift_count'=>$member['get_gift_count']+$count_price]);
                    if(!$result){
                        Db::rollback();
                        error('送礼失败!');
                    }
;
                    $gift_earnings['other_amount'] = $gift_earnings['anchor_amount'] - $tv_money1- $tv_money2-$tv_money3;

                    $result = Db::name('gift_earnings')->insert($gift_earnings);
                    if(!$result){
                        Db::rollback();
                        error('送礼失败!');
                    }
                    DB::commit();
                    success('送礼成功!');

                }else{//平台主播
                    $e_ticket = $count_price * $anchor['dashang_scale']/100;
                    $result = Db::name('member')->where(['member_id'=>$user_id2])->update(['e_ticket'=>$member['e_ticket']+$e_ticket,'get_gift_count'=>$member['get_gift_count']+$count_price]);
                    if(!$result){
                        Db::rollback();
                        error('点击太快!');
                    }
                    $result = Db::name('gift_earnings')->insert($gift_earnings);
                    if(!$result){
                        Db::rollback();
                        error('送礼失败!');
                    }

                    DB::commit();
                    success('送礼成功!');
                }

            }else{//商家
                $mers = DB::name("merchants")->where(["member_id"=>$user_id2])->find();
                if($mers){
                    $mers['dashang_scale'] ? $anchor_scale = $mers["dashang_scale"] : $anchor_scale = $system["dashang_scale"];
                }else{
                    //总后台设置的主播主播打赏打赏比
                    $anchor_scale = $system["dashang_scale"];
                }
                //获取礼物转化为赏票数量
                $e_ticket = $count_price*$anchor_scale/100;
                //获取后台给主播分配的砖石数量
                $result = DB::name("member")->where(['member_id' => $user_id2])->update(['e_ticket' =>$member['e_ticket']+$e_ticket,'get_gift_count'=>$member['get_gift_count']+$count_price,'uptime' => time()]);
                if (!$result){
                    Db::rollback();
                    error('送礼失败!');
                }
                $data = [
                    'user_id' => $user['member_id'],
                    'live_id'=>$live_id,
                    'user_id2' => $user_id2,
                    'gift_id' => $gift_id,
                    'intime' => time(),
                    'date' => date('Y-m-d H:i:s',time()),
                    'jewel' => $gift['price'],
                    'experience' => $gift['experience'],
                    'e_ticket' =>$count_price,
                    'number'=>$num,
                    'dashang_scale'=> $anchor_scale,
                    'member_type'=>'2',
                ];
                $give_gift_id = DB::name('give_gift')->insertGetId($data);
                if (!$give_gift_id){
                    DB::rollback();
                    error('点击太快!');
                }
                $gift_earnings['anchor_id'] = $user_id2;
                $gift_earnings['give_gift_id'] = $give_gift_id;
                $gift_earnings['anchor_ratio'] = $anchor_scale;
                $gift_earnings['anchor_amount'] = $e_ticket;
                $gift_earnings['platform_ratio'] = 100-$anchor_scale-$gift_earnings['spread_tv_ratio'];
                $gift_earnings['platform_amount'] = $count_price-$gift_earnings['anchor_amount']-$gift_earnings['spread_tv_amount'];
                $gift_earnings['create_time'] = date('Y-m-d H:i:s',time());

                $result = Db::name('gift_earnings')->insert($gift_earnings);
                if(!$result){
                    Db::rollback();
                    error('送礼失败!');
                }
                //等级提升
                // ascension_grade($user['user_id'],$user_experience);
                DB::commit();
                success('送礼成功');
            }
        } else {
            error('送礼失败!');
        }
    }
    /**
     * @获取用户火力（直播间的收益）
     */
    public function get_get_money(){
        $user = $this->checklogin();
        $params = Request::instance()->request();
        $user_id = empty($params["user_id"]) ? error("无法获取主播信息"): $params["user_id"];
        $money = DB::name('member')->where(["member_id"=>$params["user_id"]])->value('e_ticket');
        success((string)$money);
    }
    /**
     * @当前登录用户的钻石余额
     */
    public function get_money(){
        $user =$this->checklogin();
        $result = ['money'=>$user['b_diamond']];
        success($result);
    }
//***************************************************************提现相关部分*********************************************************************************//
    /**
     * @获取支付宝/银行卡信息
     */
    public function get_alipay(){
        $user = $this->checklogin();
        $alipay = DB::name('Alipay')->field("alipay_id,user_id,phone,alipay,relname")->where(['user_id'=>$user['member_id']])->find();
       if(!$alipay){
           $alipay= (object)array();
       }
        success($alipay);
    }
    /**
     * @绑定修改体现账户
     */
    public function binding_alipay(){
        $user = $this->checklogin();
        $params = Request::instance()->request();
        $validate = validate('Alipay');
        //判断验证码是否有效期
        $result = DB::name("Mobile_sms")->where(["mobile"=>$params["phone"],"code"=>$params["yzm"]])->order("intime desc")->find();
        if(!$result){
            error("验证码不正确");
        }
        $state = $result["state"];
        $valid_time =time()-intval($result["intime"]);
        if($valid_time>600){
            error("验证码已失效,请重新发送");
        }
        $data = [
            'user_id'=>$user['member_id'],
            'phone'=>$params["phone"],
            'alipay'=>$params["phone"],
            'relname'=>$params["relname"],
            'intime'=>date("Y-m-d H:i:s", time()),
            'type'=>1,
            'where_it_is'=>"",
        ];
        if(empty($params["alipay_id"])){
            //添加
            if(!$validate->check($params)){
                error($validate->getError());
            }
            $res = DB::name('Alipay')->insert($data);
        }else{
            //修改
             if(!$validate->scene('edit')->check($params)){
                 error($validate->getError());
             }else{
                 $res = DB::name('Alipay')->where(['alipay_id'=>$params["alipay_id"]])->update($data);
             }
        }
        if($res){
            success("保存成功");
        }else{
            error("保存失败");
        }
    }
    /**
     * @输入票据获取兑换金额
     */
    public function return_money(){
        $user = $this->checklogin();
        $diamond = Request::instance()->request('e_ticket');
        empty($diamond) ? error('请输入你要提现的龙票数量') : true;
        $get_money = (string)sprintf("%.2f",($diamond*$this->em_scale()));
        success($get_money);
    }
    /**
     * @提现提交
     */
    public function withdraw(){
        $user = $this->checklogin();
        $params = Request::instance()->request();
        //数据验证
        $money = empty($params["money"]) ? error("输入的金额有误，请核实后重新输入") : $params["money"];
        $e_ticket = empty($params["e_ticket"]) ? error("输入的龙票有误，请核实后重新输入") : $params["e_ticket"];
        $alipay_id = empty($params["alipay_id"]) ? error("提现账号有误") : $params["alipay_id"];
        $withdraw_way = empty($params["withdraw_way"]) ? error("提现账号有误") :$params["withdraw_way"];
        //提现最小额度限制
        $lowest_limit = DB::name("system")->where(["id"=>1])->value("lowest_limit");
        if($e_ticket < $lowest_limit){
            error("提现砖石不能小于".$lowest_limit);
        }
        //进行账号验证
        $zhanghao = DB::name("alipay")->where("alipay_id",$alipay_id)->value("alipay");
        ($withdraw_way != $zhanghao) ? error("提现账号有误") :true;
        //进行提现金额判断
        $user['e_ticket'] - $e_ticket < 0 ? error('余额不足') : true;
        //获取实际可提现的金额(进行金额验证)
        $actual_amount = (string)sprintf("%.2f",($e_ticket*$this->em_scale()));
        //金额进行判断
        $actual_money = (string)sprintf("%.2f",$money);
        if($actual_amount != $actual_money){
            error("提现金额有误，请重新进行提现！！");
        }
        //验证成功后数据处理
        $data = [
            'user_id'=>$user['member_id'],
            'k'=>$e_ticket,
            'money'=>$money,
            'withdraw_type'=>'支付宝',
            'withdraw_way'=>$withdraw_way,
            'intime'=>time(),
            'date'=>date('Y-m-d',time()),
            'relname' =>DB::name("Alipay")->where("alipay_id",$alipay_id)->value("relname"),
        ];
        // 启动事务
        Db::startTrans();
        try{
            DB::name('Withdraw')->insert($data);
            $get_money = $user['e_ticket'] - $e_ticket;
            DB::name("member")->where('member_id',$user['member_id'])->update(['e_ticket'=>$get_money,'uptime'=>time()]);
            // 提交事务
            Db::commit();
            success("提现成功，请等待商家付款");
        } catch (\Exception $e) {
            // 回滚事务
            Db::rollback();
            error("提现失败，请核实提现信息");
        }
    }
    /**
     * @我的钱包
     */
    public function my_wallet(){
        $user = $this->checklogin();
        $all_fire = $user['e_ticket'];
        $all_get_money = sprintf("%.2f",$all_fire*$this->em_scale());
        //提现砖石最小值
        $lowest_limit = DB::name("system")->where(["id"=>1])->value("lowest_limit");
        //提现说明
        $result = ['all_fire'=>$all_fire,'all_get_money'=>$all_get_money,"lowest_limit"=>$lowest_limit];
        success($result);
    }
    /**
     * @提现记录
     */
    public function withdraw_list(){
        $user = $this->checklogin();
        $page = input('p');
        $pageSize = input('pagesize');
        $page ? $page : $page = 1;
        $pageSize ? $pageSize : $pageSize = 10;

        $list = DB::name('Withdraw')
            ->field('k,money,status,intime,withdraw_way,cash_time')
            ->where(['user_id'=>$user['member_id']])
            ->limit(($page-1)*$pageSize,$pageSize)
            ->order('intime desc')
            ->select();
        if ($list){
            foreach ($list as $k=>$v){
                switch ($list[$k]['status'])
                {
                    case 1:
                        $content= "申请中";
                        break;
                    case 2:
                        $content= " 驳回";
                        break;
                    case 3:
                        $content= " 已返现";
                        break;
                }
                $list[$k]["content"]=$content.":".$list[$k]['money']."元";
                $list[$k]['intime'] = date('Y-m-d H:i:s',$v['intime']);
            }
        }else{$list=[];}
        success($list);
    }
    /**
     * @票据兑换金额比例
     */
    private function em_scale(){
        $params = DB::name("system")->where("id",1)->find();
        $em_scale = $params['convert_scale4']/$params['convert_scale3'];
        return $em_scale;
    }
    /**
     * 导购视屏列表
     */
    public function video_list(){
        $user = $this->checklogin();
        $params = Request::instance()->request();
        $member_id = empty($params["mid"]) ? error("无法获取商户信息") : $params["mid"];
        $p = input('p');
        $p  ?   $p  :   $p = 1;
        $pagesize = input('pagesize');
        $pagesize   ?   $pagesize   :   $pagesize = 10;
        $count =  DB::name("video")->where(["is_del"=>1,"member_id"=>$member_id,'is_shenhe'=>'2'])->count();
        $list = DB::name("video")->field("title,video_img,url,watch_nums,video_id,date")->where(["is_del"=>1,"member_id"=>$member_id,'is_shenhe'=>'2'])
            ->limit(($p-1)*$pagesize,$pagesize)->select();
        if(empty($list)){
            $list=[];
        }
       success(["count"=>(string)$count,"list"=>$list]);
    }
    /**
     * 播放视频
     */
    public function play_video(){
        $user = $this->checklogin();
        $params = Request::instance()->request();
        $video_id = empty($params["video_id"]) ? error("无法获取视频信息") : $params["video_id"];
        $ce = DB::name("video")->where(["video_id"=>$video_id])->setInc("watch_nums");
        $watch_num = DB::name("video")->where(["video_id"=>$video_id])->value("watch_nums");
        success($watch_num);
    }
    /***************************************************************其他****************************************************/
    public function  report(){
        success("举报成功！");
    }
    /***************************************************************扩张**************************************************/
    /**
     *直播分类(标签)
     */
    public function live_class(){
        $list= DB::name("live_class")->where("is_del",1)->order("sort desc")->select();
        if(empty($list)){
            success([]);
        }else{
            success($list);
        }
    }
    /**
     *获取分类直播列表
     */
    public function tag_live_list(){
        //$this->checklogin();
        $params = Request::instance()->param();
        $city = input('city');
        $live_class_id = input('live_class_id');
        !empty($live_class_id)  &&   $data[] = ['exp','FIND_IN_SET('.$live_class_id.',a.live_tag)'];
        $p = empty($params["p"]) ? 1 :$params["p"];
        $pageSize = empty($params["pagesize"]) ? 20 : $params["pagesize"];
        //获取主播分配的标签;
        !empty($city)   &&   $data['a.sheng'] = ['like','%'.$city.'%'];
        $data["a.live_status"] = 1;
        $count = DB::name("live")->alias('a')
              ->join('th_member b','a.user_id = b.member_id')
              ->join('th_merchants c','a.user_id = c.member_id')
              ->where($data)->count();
        $page = ceil($count/$pageSize);
        if($count){
            $list = DB::name("live")->alias('a')
                ->field('a.*,b.username,b.header_img,b.member_id,b.ID,c.merchants_name')
                ->join('th_member b','a.user_id = b.member_id')
                ->join('th_merchants c','a.user_id = c.member_id')
                ->where($data)->order("a.intime desc")
                ->limit(($p-1)*$pageSize,$pageSize)
                ->select();
            foreach ($list as $k=>$v){
                $list[$k]['share_url'] = config('domain').'/mall_live/#/liveRoom_mobile?live_id='.$v['live_id'].'&room_id='.$v['room_id'];
            }
        }else{
            $list = [];
        }
        success(['page'=>$page,'list'=>$list]);
    }
}
