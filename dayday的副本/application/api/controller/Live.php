<?php
namespace app\api\controller;
use Qiniu\QiniuPili;
use lib\Easemob;
use lib\Upload;
use think\Controller;
use think\View;
use think\Db;
use opensearch;
use \think\Session;
use \think\Request;
use \think\model;
use WeChat\Jssdk;
class Live extends Common{
    private $cdkey = "8SDK-EMY-6699-RHRPN";
    private $password = "647039";
    private $domain = 'http://dxplay.tstmobile.com/';
    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
    }

    /**
     * 判断是否有开播权限
     */
    public function  is_prohibition_live(){
        $user = $this->checklogin();
        if($user["type"]==1){
            success(["status"=>"2","info"=>"无开播权限"]);
        }else{
            success(["status"=>"1",'info'=>'']);
        }
    }



	
    /**
     * 主播直播列表
     */
    public function apply_list(){
        $type = input("type");
        if($type=='1'){  //主播
            $anchor_id = input("anchor_id");
            $r = Db::name('anchor')->where(['anchor_id'=>$anchor_id])->find();
            $map['merchants_id']= $r['merchants_id'];
            $map['zhu_phone']= $r['anchor_phone'];
            $map['is_del'] = '0';
            $map['is_shenhe'] = ['in','2,4'];
            $p = input('p');
            $p  ?   $p  :   $p = 1;
            $pagesize = input('pagesize');
            $pagesize ? $pagesize  :  $pagesize = 10;
            $count = Db::name('apply')->where($map)->count();
            $page = ceil($count/$pagesize);
            if($count){
                $re = Db::name('apply')->alias('a')
                    ->join('live b','a.room_id=b.room_id')
                    ->where(['a.is_del'=>'0','a.zhu_phone'=>$r['anchor_phone'],'merchants_id'=>$r['merchants_id'],'b.live_status'=>['in','1,2'],'a.is_shenhe' => ['in','2,4']])
                    ->select();
                if($re){
                    $data = Db::name('apply')->alias('a')
                        ->join('live b','a.room_id=b.room_id')
                        ->where(['a.is_del'=>'0','a.zhu_phone'=>$r['anchor_phone'],'merchants_id'=>$r['merchants_id'],'b.live_status'=>['in','1,2'],'a.is_shenhe' => ['in','2,4']])
                        ->limit(($p-1)*$pagesize,$pagesize)
                        ->select();
                    foreach ($data as $a=>$b){
                        $data[$a]['live_state'] = '1';
                        $data[$a]['nums'] = $b['nums'];
                        if($b['status'] == '2'){
                            $data[$a]['goods'] = DB::name("app_goods")->where(["apply_id"=>$b['apply_id']])->select();
                        }elseif($b['status']=='3'){
                            $data[$a]['goods'] = DB::name("app_paimai")->where(["apply_id"=>$b['apply_id']])->select();
                            $arr = [];
                            foreach ($data[$a]['goods'] as $k=>$v){
                                $arr[] = $v['paimai_id'];

                            }
                            $data[$a]['goods'] = [];
                        }
                        if($b['is_shenhe']=='4' && $b['live_status']=='2'){
                            $data[$a]['wz_type'] = '4';
                        }

                    }
                    $data1 = Db::name('apply')
                        ->where(['is_del'=>'0','is_shenhe'=>'2','zhu_phone'=>$r['anchor_phone'],'merchants_id'=>$r['merchants_id']])
                        ->limit(($p-1)*$pagesize,$pagesize)
                        ->select();
                    foreach($data1 as $k=>$v){
                        $data1[$k]['live_state'] = '2';
                        $data1[$k]['nums'] = '0';
                        if($v['status']=='2'){
                            $goods=DB::name("app_goods")->where(["apply_id"=>$v['apply_id']])->select();
                            $data1[$k]['goods']=$goods;
                        }elseif($v['status']=='3'){
                            $goods=DB::name("app_paimai")->where(["apply_id"=>$v['apply_id']])->select();
                            $arr = [];
                            foreach ($goods as $a=>$b){
                                $arr[] = $b['paimai_id'];
                            }
                            $data1[$k]['goods'] = [];
                        }

                    }
                    $data = array_merge($data,$data1);

                }else{
                    $data = Db::name('apply')
                        ->where($map)
                        ->limit(($p-1)*$pagesize,$pagesize)
                        ->select();
                    foreach($data as $k=>$v){
                        $data[$k]['live_state'] = '2';
                        $data[$k]['nums'] = '0';
                        if($v['status']=='2'){
                            $goods=DB::name("app_goods")->where(["apply_id"=>$v['apply_id']])->select();
                            $data[$k]['goods']=$goods;
                        }elseif($v['status']=='3'){
                            $goods=DB::name("app_paimai")->where(["apply_id"=>$v['apply_id']])->select();
                            $arr = [];
                            foreach ($goods as $a=>$b){
                                $arr[] = $b['paimai_id'];
                            }
                            $data[$k]['goods'] = [];
                        }
                    }
                }

            }else{
                $data = [];
            }
            success(['page'=>$page,'list'=>$data]);
        }else{  //场控
            $anchor_id = input("anchor_id");
            $apply_id = Db::name('anchor')->where(['anchor_id'=>$anchor_id,'is_del'=>'0','status'=>'1'])->value('apply_id');
            $map['a.is_shenhe'] = ['in','2,4'];
            $map['a.apply_id'] = $apply_id;
            $re = Db::name("apply")->alias('a')
                ->where($map)
                ->find();
            if($re['is_shenhe']=='2'){
                $re['type'] = '2';
            }elseif ($re['is_shenhe']=='4'){
                $re['type'] = '1';
            }elseif ($re['is_shenhe']=='6'){
                $re['type'] = '3';
            }
            $a[] = $re;
            if($re){
                success(["list"=>$a]);
            }else{
                error("没有直播记录");
            }
        }


    }
   /**
   * 用户端直播列表
   */
  public function user_apply_list(){
	  $type = input("type");
	  if($type=='1'){
		  $map['a.is_del'] = '0';
		  $map['a.is_shenhe'] = ['in','2,4'];
		  $map['b.live_status'] = '1';
		  $p = input('p');
		  $p  ?   $p  :   $p = 1;
		  $pagesize = input('pagesize');
		  $pagesize ? $pagesize  :  $pagesize = 10;
		  $count = Db::name('apply')->alias('a')
                    ->join('live b','a.room_id = b.room_id')
                    ->where($map)->count();
		  $page = ceil($count/$pagesize);
		  if($count){
			  $data = Db::name('apply')->alias('a')
                  ->join('live b','a.room_id = b.room_id')
				  ->where($map)
				  ->limit(($p-1)*$pagesize,$pagesize)
				  ->select();
		  }else{
			  $data = [];
		  }
		  success(['page'=>$page,'list'=>$data]);
	  }else{
		  $control_phone = input("phone");
		  $map['a.is_del'] = '0';
		  $map['b.is_shenhe'] = ['in','2,3,4,5'];
//		  $map['a.control_phone'] = $control_phone;
		  $re = Db::name("control")->alias('a')
			  ->join("apply b",'a.control_id=b.control_id')
			  ->where($map)
			  ->select();
		  if($re){
			  success(["list"=>$re]);
		  }else{
			  error("没有直播记录");
		  }
	  }


  }

    /**
     * @param lag
     * @param log
     * @param t
     * @开启直播
     */
    public function start_live(){
        $param = Request::instance()->request();
        $re1 = DB::name('apply')->field('is_shenhe,room_id,zhu_phone,cover_img')->where(['apply_id' =>$param["apply_id"]])->find();
        $re2 = Db::name('live')->field('live_status')->where(['room_id'=>$re1['room_id']])->find();
        $jin_type = Db::name('anchor')->where(['anchor_phone'=>$re1['zhu_phone']])->value('jin_type');
        if($jin_type=='1'){
            if($re1['is_shenhe']=='2' || $re1['is_shenhe']=='4'){
                $log = empty($param["log"]) ? '116.42669': $param["log"];
                $lag = empty($param["lag"]) ? '39.917149': $param["lag"];
                //设置观看金额
                $live_money = empty($param["live_money"]) ? 0 : $param["live_money"];
                if($log && $lag){
                    $gwd = $lag.','.$log;
                    $baidu_apikey = DB::name('System')->value('baidu_apikey');
                    $file_contents = file_get_contents('http://api.map.baidu.com/geocoder/v2/?ak='.$baidu_apikey.'&location='.$gwd.'&output=json');
                    $rs = json_decode($file_contents,true);
                    $sheng = $rs['result']['addressComponent']['province'];
                    $shi = $rs['result']['addressComponent']['city'];
                    $qu = $rs['result']['addressComponent']['district'];
                    $address = $rs['result']['formatted_address'];
                }
                $room_id = DB::name('apply')->where(['apply_id' =>$param["apply_id"]])->value("room_id");
                $re = DB::name('apply')->where(['apply_id' =>$param["apply_id"]])->find();
                $ce = Db::name('merchants')->where(['gl_merchants_id'=>$re['merchants_id']])->find();
                Db::name("anchor")->where(['anchor_phone'=>$re['zhu_phone']])->update(['is_shenhe'=>'4']);

                $live = Db::name('live')->where(['room_id'=>$room_id])->find();
                if(!$live){
                    //七牛生成流地址
                    $qn = new QiniuPili();
                    $play_address = $qn->push_address();
                    $chars = "abcdefghijklmnopqrstuvwxyz123456789";
                    mt_srand(10000000*(double)microtime());
                    for ($i = 0, $str = '', $lc = strlen($chars)-1; $i < 6; $i++){
                        $str .= $chars[mt_rand(0, $lc)];

                    }
                    $qiniu_room_id = 'qiniu-'.$str.rand(10, 99).'-b'.rand(100.999).'-'.rand(1000,9999);
                    $qiniu_room_name = 'qiniu-'.rand(100,999);
                    $create_room = $qn->creatroom($qiniu_room_id,$qiniu_room_name);    //七牛创建房间
                    $time = time();
                    $data = [
                        'live_money'=>$live_money,
                        'user_id'=>'',
                        "live_tag"=>'',
                        'play_img'=>$re['cover_img'],
                        'title'=>$re['title'],
                        'push_flow_address'=>$play_address['url'],
                        'play_address'=>$play_address['url2'],
                        'play_address_m3u8'=>$play_address['m3u8'],
                        'start_time'=>$time,
                        'stream_key'=>$play_address['streamKey'],
                        'live_status'=>1,
                        'live_time'=>0,
                        'room_id'=>$room_id,
                        'intime'=>$time,
                        'date'=>date('Y-m-d',$time),
                        'log'=>$log,
                        'lag'=>$lag,
                        'sheng'=>$sheng,
                        'shi'=>$shi,
                        'qu'=>$qu,
                        'address'=>$address,
                        'qiniu_room_id'=>$qiniu_room_id,
                        'qiniu_room_name'=>$create_room['room_name'],
                        'qiniu_token'=>$create_room['token'],
                        "livewindow_type"  => 1,
                    ];
                    if ($live_id = Db::name('Live')->insertGetId($data)) {
                        DB::name("apply")->where(["room_id"=>$room_id])->update(["is_shenhe"=>'4']);
                        $result = [
                            'nums' => '0',
                            'push_flow_address' => $play_address['url'],
                            'play_address'=>$play_address['url2'],
                            'room_id' => $room_id,
                            'ID' => '',
                            'e_ticket' => '',
                            'start_time' =>(string)$time,
                            'share_url' => config("domain")."/api/Index/share_live?apply_id=".$param["apply_id"]."&room_id=".$room_id,
                            'live_id'=>$live_id,
                            'time'=>date('Y.m.d',$time),
                            'qiniu_room_id'=>$qiniu_room_id,
                            'qiniu_room_name'=>$create_room['room_name'],
                            'qiniu_token'=>$create_room['token'],
                            'is_wheat'=>'2',
                            'class_id'=>$re['status'],
                            'title'=>$re['title'],
                            'company_name'=>$ce['company_name'],
                            'business_img'=>$ce['business_img'],
                            'address'=>$re['address'],
                            'status' =>$re['status'],
                            'apply_id' =>$param['apply_id'],
                            'merchants_id' =>$re['merchants_id'],
                            'cover_img' =>$re1['cover_img'],
                        ];
                        success($result);
                    } else {
                        error('开启失败!');
                    };
                }else{
                    //七牛生成流地址
                    $qn = new QiniuPili();
                    $play_address = $qn->push_address();
                    $chars = "abcdefghijklmnopqrstuvwxyz123456789";
                    mt_srand(10000000*(double)microtime());
                    for ($i = 0, $str = '', $lc = strlen($chars)-1; $i < 6; $i++){
                        $str .= $chars[mt_rand(0, $lc)];

                    }
//                $qiniu_room_id = 'qiniu-'.$str.rand(10, 99).'-b'.rand(100.999).'-'.rand(1000,9999);
                    $qiniu_room_id = $live['qiniu_room_id'];
                    $qiniu_room_name = 'qiniu-'.rand(100,999);
                    $create_room = $qn->creatroom($qiniu_room_id,$qiniu_room_name);    //七牛创建房间
                    Db::name('live')->where(['live_id'=>$live['live_id']])->update(['live_status'=>'1']);
                    $time = time();
                    $result = [
                        'nums' => '0',
                        'push_flow_address' => $live['push_flow_address'],
                        'play_address'=>$live['play_address'],
                        'room_id' => $room_id,
                        'ID' => '',
                        'e_ticket' => '',
                        'start_time' =>(string)$time,
                        'share_url' => config("domain")."/api/Index/share_live?apply_id=".$param["apply_id"]."&room_id=".$room_id,
                        'live_id'=>$live['live_id'],
                        'time'=>date('Y.m.d',$time),
                        'qiniu_room_id'=>$live['qiniu_room_id'],
                        'qiniu_room_name'=>$live['qiniu_room_name'],
                        'qiniu_token'=>$create_room['token'],
                        'is_wheat'=>'1',
                        'class_id'=>$re['status'],
                        'title'=>$re['title'],
                        'company_name'=>$ce['company_name'],
                        'business_img'=>$ce['business_img'],
                        'address'=>$re['address'],
                        'status' =>$re['status'],
                        'apply_id' =>$param['apply_id'],
                        'merchants_id' =>$re['merchants_id'],
                        'cover_img' =>$re1['cover_img'],

                    ];
                    //$res = Db::name('apply')->where(['apply_id'=>$param['apply_id']])->find();
//                $nick_name = Db::name('anchor')->where(['anchor_phone'=>$res['zhu_phone']])->value('nick_name');
//                $company_name = Db::name('merchants')->where(['gl_merchants_id'=>$res['merchants_id']])->value('company_name');
//                $r = Db::name('follow_merchants')->where(['user_id2'=>$res['merchants_id'],'is_delete'=>'1'])->select();
//                foreach ($r as $k=>&$v){
//                    $mobile = $v['user_phone'];
//                    $this->sendSMS($mobile,$company_name,$nick_name);
//                }
                    success($result);
                }
            }else{
                error('直播活动已结束');
            }
        }else{
            error('您已经被禁播，请联系平台');
        }




    }
    /**
     *直播上传背景图
     * @dirname //头像上传路径
     */
    public function upload_playimg(){
        $up = new Upload();
        $up->upload('playimg');
    }
    /**
     * 判断是否在直播状态
     */
    public function check_anchor_state(){
//        $this->checklogin();
        $param = Request::instance()->request();
        $live_id = empty($param["live_id"]) ?  error("无法进入直播间") : $param["live_id"];
        $res = DB::name("live")->where(["live_id"=>$live_id])->find();
        success($res["live_status"]);
    }

    /**
     * @进入直播间
     */
    public function into_live($uid,$header_img,$live_id,$merchants_id){
        $live_id = empty($live_id) ?  error("无法进入直播间") : $live_id;
        //判断是否被踢
        DB::name('Live_kicking')->where(['live_id'=>$live_id,'user_id'=>$uid])->find() ? error('你已被踢出直播间，无法进入!') : true;
        DB::name('black_list')->where(['merchants_id'=>$merchants_id,'user_id'=>$uid])->find() ? error('你已被拉黑，无法进入!') : true;
        //进入直播间,把进入的其他正在直播的记录删除
        $live = DB::name('Live')
            ->alias('a')
            ->field('a.*,b.user_id')
            ->join('__LIVE_NUMBER__ b', 'a.live_id=b.live_id',"right")
            ->where(['a.live_status'=>1,'a.live_id'=>$live_id])
            ->select();
        if ($live){
            $ids = array_map(function($v){ return $v['user_id2'];},$live);
            if (in_array($uid,$ids)){
                $live_number = DB::name('Live_number')->where(['live_id'=>$live_id,'user_id2'=>$uid])->find();
                if ($live_number){DB::name('Live_number')->where(['live_number_id'=>$live_number['live_number_id']])->delete();}
            }
        }
        $user_id2 = DB::name('Live')->where(["live_id"=>$live_id])->value('user_id');
        //判断用户是否进入直播间
        $anchor = DB::name("Live_number")->where(["live_id" =>$live_id,"user_id"=>$uid])->find();
        $anchor_res = $anchor ? true : DB::name('Live_number')->insert(['live_id'=>$live_id,'user_id'=>$uid,'user_id2'=>$user_id2,'intime'=>time(),'header_img'=>$header_img]);
        if ($anchor_res){
            DB::name('Live')->comment('观看总人数加1')->where(['live_id'=>$live_id])->setInc('nums');
            DB::name('Live')->comment('观看人数加1')->where(['live_id'=>$live_id])->setInc('watch_nums');
            $is_follow = DB::name('follow_merchants')->comment("判断是否关注")->where(['user_id' => $uid, 'user_id2' => $merchants_id])->find();
//            $is_follow ? $is_follow = "1" : $is_follow = "2";
            if($is_follow['is_delete']=='1'){
                $is_follow = '1';
            }else{
                $is_follow = '2';
            }
            $lignt_up = DB::name('Live_light_up')->comment("判断是否点亮")->where(['live_id'=>$live_id,'user_id'=>$uid,'user_id2'=>$user_id2])->find();
            $lignt_up ? $is_lignt_up = "2" : $is_lignt_up = "1";
        }else{
            error('失败!');
        }
        return $is_follow;
    }
    /**
     * 获取主播信息
     * param  header_img头像
     * param  follow_count关注人数
     * param  fans_count 粉丝数量
     * param  give_count 送礼数量
     */
    public function get_live_info(){
        $params = Request::instance()->request();
        $anchor_id = empty($params["anchor_id"]) ? error("参数错误") : $params["anchor_id"];
        $info = DB::name('anchor')->where(['anchor_id'=>$anchor_id])->find();
        $legal = [];
        $legal[] = $info['user_img2'];
        $legal[] = $info['user_img3'];
        $legal[] = $info['user_img4'];
        $legal[] = $info['user_img5'];
        $legal = implode(',',$legal);
        $info['legal_img'] = $legal;
        success($info);
    }


    /**
     * 拉黑列表
     */
    public function block_list(){
        $params = Request::instance()->request();
        $merchants_id = input('merchants_id');
        $p = empty($params["p"]) ? 1 :$params["p"];
        $pageSize = empty($params["pagesize"]) ? 20 : $params["pagesize"];
        $list = Db::name('black_list')
            ->where(['merchants_id'=>$merchants_id])
            ->limit(($p - 1) * $pageSize, $pageSize)
            ->select();
        foreach ($list as $k=>$v){
            $list[$k]['create_time'] = date("Y-m-d H:i:s",$v['create_time']);
            $list[$k]['title'] = Db::name('apply')->where(['apply_id'=>$v['apply_id']])->value('title');
            $list[$k]['huanxin_username'] = Db::name('gl_member')->where(['user_id'=>$v['user_id']])->value('hx_name');
        }
        //获取直播总的僵尸粉数量(包括观看人数)
        $count  = DB::name('black_list')
            ->where(['merchants_id'=>$merchants_id])
            ->count();
        $page = ceil($count/$pageSize);
        if($list){
            success(['list'=>$list,'page'=>$page]);
        }else{
            success(['list'=>[]]);
        }



    }

    /**
     *拉黑和解除拉黑
     */
    public function block_type(){
        $domain = config("domain");
        $apply_id = input('apply_id');
        $user_id = input('uid');
        $type = input('type');
        $huanxin_username = input('huanxin_username');
        $header_img = input('header_img');
        (empty($user_id) || empty($type)) ? error('参数错误!') : true;
        $re = Db::name('black_list')->where(['user_id'=>$user_id,'apply_id'=>$apply_id])->find();
        $re1= Db::name('live')->alias('a')
            ->field('a.live_id,b.*')
             ->field('b.zhu_phone')
             ->join('apply b','a.room_id = b.room_id')
             ->where(['b.apply_id'=>$apply_id])
             ->find();
        $res2 = Db::name('anchor')->where(['anchor_phone'=>$re1['zhu_phone']])->find();
        switch ($type){
            case 1:
                if($re){
                    error('已拉黑');
                }else{
                    $user_name = Db::name('gl_member')->where(['user_id'=>$user_id])->value('user_name');
                    $data['apply_id'] = $apply_id;
                    $data['user_id'] = $user_id;
                    $data['anchor_id'] = $res2['anchor_id'];
                    $data['merchants_id'] = $re1['merchants_id'];
                    $data['create_time'] = time();
                    $data['user_name'] = $user_name;
                    $data['header_img'] = $domain.$header_img;
                    Db::name('black_list')->insert($data);
                    $hx_username = $res2['hx_username'];
                    $hx = new Easemob();
                    $hx->addUserForBlacklist($hx_username,$huanxin_username);
                    success('成功!');
                }
            case 2:
                if($re){
                    if(Db::name('black_list')->where(['user_id'=>$user_id,'apply_id'=>$apply_id])->delete()){
                        $hx_username = $res2['hx_username'];
                        $hx = new Easemob();
                        $hx->deleteUserFromBlacklist($hx_username,$huanxin_username);
                        success('成功!');
                    }else{
                        error('失败');
                    }
                }else{
                    error('未拉黑');
                }


        }
    }

    /**
     *
     * @直播间用户列表
     */
    public function show_viewer(){
        $params = Request::instance()->request();
        $live_id = empty($params["live_id"]) ? error("无法获取直播间信息") : $params["live_id"];
        $live = Db::name('live')->where(['live_id'=>$live_id])->find();
        $p = empty($params['p']) ? 1 : $params['p'];
            $pageSize = empty($params["pagesize"]) ? 20 : $params["pagesize"];
        //获取直播总的僵尸粉数量(包括观看人数)
        $count  = DB::name('Live_number')
            ->where(['live_id'=>$live_id])
            ->count();
        $page = ceil($count/$pageSize);
        if($count) {
            //获取僵尸粉信息
            $list = DB::name('Live_number')
                ->field('user_id,header_img')
                ->where(['live_id' => $live_id])
                ->order('intime desc')
                ->limit(($p - 1) * $pageSize, $pageSize)
                ->select();
            if ($list) {
                //$management = DB::name('Live_management')->comment("判断是否为管理员")->where(['user_id' => $live['user_id']])->column('user_id2');//管理员
                $banned = DB::name('Banned')->comment("判断是否禁言")->where(['live_id' => $live_id])->column('user_id2'); //禁言
//                $follow = DB::name('follow_merchants')->where(['user_id' => $uid])->column('user_id2');
                foreach ($list as $k => $v) {
                    $list[$k]['header_img'] = $v['header_img'];
//                $list[$k]['follow_count'] = DB::name('Follow')->comment('关注数')->where(['user_id' =>$v['user_id2']])->count();
//                $list[$k]['fans_count']  = DB::name('Follow')->comment('粉丝数')->where(['user_id2' =>$v['user_id2']])->count();
//                    in_array($v['user_id2'], $follow) ? $list[$k]['is_follow'] = "2" : $list[$k]['is_follow'] = "1";
                    //查询是否被禁言
                    in_array($v['user_id2'], $banned) ? $list[$k]['is_banned'] = "2" : $list[$k]['is_banned'] = "1";
                    //查询是否是管理
                    //in_array($v['user_id2'], $management) ? $list[$k]['is_management'] = "2" : $list[$k]['is_management'] = "1";
//                $list[$k]['give_count'] = DB::name('Give_gift')->comment('送礼数')->where(['user_id'=>$v['member_id']])->count();
                }
            } else {
                $list = [];
            }
        }else{
            $list = [];
        }
        success(["list" =>$list,"count"=>strval($count),'page'=>$page]);
    }
    /**
     *直播列表(电商直播商户列表)
     */
    public function merchants_list(){
       $params = Request::instance()->request();
//     $type = empty($params["type"]) ? error("参数有误") : $params["type"];
       $page = empty($params["p"]) ? 1 :$params["p"];
       $pageSize = empty($params["pagesize"]) ? 20 : $params["pagesize"];
        $qn = new QiniuPili();
        $stream_list = $qn->listLiveStreams();
        //对用户的正常退出进行处理
        if ($stream_list){
            $rs = DB::name('Live')->where(['stream_key'=>['in',$stream_list],'is_normal_exit'=>1])->update(['live_status'=>1,'uptime'=>time()]);
//            foreach ($rs as $k=>$v){
//                if ($v['live_status']==2){
//                    $live_ids[] = $
//                    DB::name('Live')->where(['live_id'=>$v['live_id']])->update(['live_status'=>1,'uptime'=>time()]);
//                }
//            }
        }
        //获取商家总数
        $count = DB::name("merchants")->count();
        $merchants_list = DB::name("merchants")->field('member_id,merchants_img as img ,live_id,merchants_name')->order("live_id desc")->limit(($page-1)*$pageSize,$pageSize)->select();
        foreach ($merchants_list as $k=>$v){
            if($v["live_id"] !=0){
                $live_info = DB::name("live")->where(["live_id"=>$v["live_id"]])->find();
                $merchants_list[$k]["room_id"] = $live_info["room_id"];
                $merchants_list[$k]["play_address"] = $live_info["play_address"];
                //分享连麦的相关信息
//                $merchants_list[$k]["title"] = $live_info["title"];
//                $merchants_list[$k]["qrcode_path"] = $live_info["qrcode_path"];
//                $merchants_list[$k]["qiniu_room_id"] = $live_info["qiniu_room_id"];
//                $merchants_list[$k]["qiniu_room_name"] = $live_info["qiniu_room_name"];
//                $merchants_list[$k]["qiniu_token"] = $live_info["qiniu_token"];

            }
        }
        success(["count"=>$count,"list"=>$merchants_list]);
    }

    /**
     * 重构开启直播
     */
    public function live_info(){
        $state = input('state');
        $type = input('type');
        if($state=='2'){
//            $screen_id = input('screen_id');
            $apply_id = input('apply_id');
            if(empty($apply_id))        error("参数错误");
            $rs = Db::name('apply')->where(['apply_id'=>$apply_id])->find();
            if($rs['is_shenhe']=='2'){
                $live = Db::name('apply')->alias('a')
                    ->field('a.*,d.contact_name,d.business_img,d.gl_merchants_id,d.company_desc,d.company_name')
                    ->join("th_merchants d", "a.merchants_id = d.gl_merchants_id")
                    ->where(['a.apply_id' => $apply_id])
                    ->find();
                $live['play_address'] = $live['url'];
                $live['follow_num'] = Db::name('follow_merchants')->where(['user_id2' => $live['gl_merchants_id'],'is_delete'=>'1'])->count();
                $live['share_num'] = Db::name('share_merchants')->where(['merchants_id' => $live['gl_merchants_id'],'is_del'=>'1'])->count();
                $live['tag'] = Db::name('home_class')->where(['id' => $live['status']])->value('title');
                $live['anchor_id'] = Db::name('anchor')->where(['anchor_phone' => $live['zhu_phone']])->value('anchor_id');
                $live['hx_username'] = Db::name('anchor')->where(['anchor_phone' => $live['zhu_phone']])->value('hx_username');
                $live['nick_name'] = Db::name('anchor')->where(['anchor_phone' => $live['zhu_phone']])->value('nick_name');
                $live['user_img'] = Db::name('anchor')->where(['anchor_phone' => $live['zhu_phone']])->value('user_img');
                if ($live['status'] == '2') {
                    $goods = Db::name('app_good')->where(['apply_id' => $live['apply_id']])->order('goods_type desc')->select();
                    foreach ($goods as $k => $v) {
                        $url = 'http://m.dev.ttzxh.com/tmpl/product_detail.html?goods_id=' . $v['goods_id'] . '&roomid=' . $v['apply_id'] . '&saletype=1';
                        $qrcode_path = "/qrcode/" . time() . rand(100, 999) . '_qrcode.png';
                        $path = qrcodeLogo($url, $v['goods_img'], './' . $qrcode_path, 8, 9);
                        $goods[$k]['goods_code'] = 'http://daylive.tstmobile.com' . $path;
                        if($v['tbUrl']!==''){
                            $url2 = $v['tbUrl'];
                            $qrcode_path2 = "/qrcode/" . time() . rand(100, 999) . '_qrcode.png';
                            $path2 = qrcodeLogo($url2, $v['goods_img'], './' . $qrcode_path2, 8, 9);
                            $goods[$k]['tao_goods_code'] = 'http://daylive.tstmobile.com' . $path2;
                        }else{
                            $goods[$k]['tao_goods_code'] ='';
                        }
                        if($v['jdUrl']!==''){
                            $url3 = $v['jdUrl'];
                            $qrcode_path3 = "/qrcode/" . time() . rand(100, 999) . '_qrcode.png';
                            $path3 = qrcodeLogo($url3, $v['goods_img'], './' . $qrcode_path3, 8, 9);
                            $goods[$k]['dong_goods_code'] = 'http://daylive.tstmobile.com' . $path3;
                        }else{
                            $goods[$k]['dong_goods_code'] ='';
                        }
                        if($v['jdUrl']!=='' || $v['tbUrl']!==''){
                            $url4 = 'https://m.dev.ttzxh.com/tmpl/MobileZitiCtl/index.html?apply_id='.$v['apply_id'].'&goods_id='.$v['goods_id'].'&company_name='.$live['company_name'].'&address='.$live['address'];
                            $qrcode_path4 = "/qrcode/" . time() . rand(100, 999) . '_qrcode.png';
                            $path4 = qrcodeLogo($url4, $v['goods_img'], './' . $qrcode_path4, 8, 9);
                            $goods[$k]['ti_goods_code'] = 'http://daylive.tstmobile.com' . $path4;
                        }else{
                            $goods[$k]['ti_goods_code'] ='';
                        }

                    }
                    $live['goods'] = $goods;
                } elseif($live['status']=='3') {
                    $goods = DB::name("app_paimai")->where(["apply_id" => $live['apply_id']])->select();
                    $arr = [];
                    foreach ($goods as $a => $c) {
                        $arr[] = $c['paimai_id'];
                    }
                    $live['goods'] = [];
                }
                $live['share_url'] = config('domain') . '/api/Index/share_live?apply_id=' . $live['apply_id'] . "&room_id=" . $live['room_id'];
                $r = Db::name('qiniu_token')->where(['screen_id'=>$rs['screen_id'],'apply_id'=>$apply_id])->find();
                if ($r) {
                    //七牛生成流地址
                    $chars = "abcdefghijklmnopqrstuvwxyz123456789";
                    mt_srand(10000000 * (double)microtime());
                    for ($i = 0, $str = '', $lc = strlen($chars) - 1; $i < 6; $i++) {
                        $str .= $chars[mt_rand(0, $lc)];

                    }

                    $qiniu_room_id = $r['user_qiniu_id'];
                    $qiniu_room_name = $live['qiniu_room_name'];
                    $qn = new QiniuPili();
                    $a = $qn->watch_room($qiniu_room_id, $qiniu_room_name);    //七牛创建房间
                    $live['user_qiniu_token'] = $a;
                    $live['user_qiniu_id'] = $r['user_qiniu_id'];
                } else {
                    //七牛生成流地址
                    $chars = "abcdefghijklmnopqrstuvwxyz123456789";
                    mt_srand(10000000 * (double)microtime());
                    for ($i = 0, $str = '', $lc = strlen($chars) - 1; $i < 6; $i++) {
                        $str .= $chars[mt_rand(0, $lc)];

                    }

                    $qiniu_room_id = 'qiniu-' . $str . rand(10, 99) . '-b' . rand(100.999) . '-' . rand(1000, 9999);
                    $qiniu_room_name = $live['qiniu_room_name'];
                    $qn = new QiniuPili();
                    $live['user_qiniu_id'] = $qiniu_room_id;
                    $a = $qn->watch_room($qiniu_room_id, $qiniu_room_name);    //七牛创建房间
                    $b['qiniu_token'] = $a;
                    $b['apply_id'] = $apply_id;
                    $b['screen_id'] = $rs['screen_id'];
                    $b['user_qiniu_id'] = $qiniu_room_id;
                    $e = Db::name('qiniu_token')->insert($b);
                    if ($e) {
                        $live['user_qiniu_token'] = $a;
                    }

                }
                if($live['is_shenhe']=='2'){
                    $live['type'] = '2';
                }
                success($live);
            }elseif($rs['is_shenhe']=='4'){
                $live = Db::name('live')->alias('a')
                    ->field('a.*,b.*,d.contact_name,d.business_img,d.gl_merchants_id,d.company_desc,d.company_name')
                    ->join('th_apply b', 'a.room_id = b.room_id')
                    ->join("th_merchants d", "b.merchants_id = d.gl_merchants_id")
                    ->where(['b.apply_id' => $apply_id])
                    ->find();
                $live['follow_num'] = Db::name('follow_merchants')->where(['user_id2' => $live['gl_merchants_id'],'is_delete'=>'1'])->count();
                $live['share_num'] = Db::name('share_merchants')->where(['merchants_id' => $live['gl_merchants_id'],'is_del'=>'1'])->count();
                $live['tag'] = Db::name('home_class')->where(['id' => $live['status']])->value('title');
                $live['anchor_id'] = Db::name('anchor')->where(['anchor_phone' => $live['zhu_phone']])->value('anchor_id');
                $live['hx_username'] = Db::name('anchor')->where(['anchor_phone' => $live['zhu_phone']])->value('hx_username');
                $live['nick_name'] = Db::name('anchor')->where(['anchor_phone' => $live['zhu_phone']])->value('nick_name');
                $live['user_img'] = Db::name('anchor')->where(['anchor_phone' => $live['zhu_phone']])->value('user_img');
                if ($live['status'] == '2') {
                    $goods = Db::name('app_good')->where(['apply_id' => $live['apply_id']])->order('goods_type desc')->select();
                    foreach ($goods as $k => $v) {
                        $url = 'http://m.dev.ttzxh.com/tmpl/product_detail.html?goods_id=' . $v['goods_id'] . '&roomid=' . $v['apply_id'] . '&saletype=1';
                        $qrcode_path = "/qrcode/" . time() . rand(100, 999) . '_qrcode.png';
                        $path = qrcodeLogo($url, $v['goods_img'], './' . $qrcode_path, 8, 9);
                        $goods[$k]['goods_code'] = 'http://daylive.tstmobile.com' . $path;
                        if($v['tbUrl']!==''){
                            $url2 = $v['tbUrl'];
                            $qrcode_path2 = "/qrcode/" . time() . rand(100, 999) . '_qrcode.png';
                            $path2 = qrcodeLogo($url2, $v['goods_img'], './' . $qrcode_path2, 8, 9);
                            $goods[$k]['tao_goods_code'] = 'http://daylive.tstmobile.com' . $path2;
                        }else{
                            $goods[$k]['tao_goods_code'] ='';
                        }
                        if($v['jdUrl']!==''){
                            $url3 = $v['jdUrl'];
                            $qrcode_path3 = "/qrcode/" . time() . rand(100, 999) . '_qrcode.png';
                            $path3 = qrcodeLogo($url3, $v['goods_img'], './' . $qrcode_path3, 8, 9);
                            $goods[$k]['dong_goods_code'] = 'http://daylive.tstmobile.com' . $path3;
                        }else{
                            $goods[$k]['dong_goods_code'] ='';
                        }
                        if($v['jdUrl']!=='' || $v['tbUrl']!==''){
                            $url4 = 'https://m.dev.ttzxh.com/tmpl/MobileZitiCtl/index.html?apply_id='.$v['apply_id'].'&goods_id='.$v['goods_id'].'&company_name='.$live['company_name'].'&address='.$live['address'];
                            $qrcode_path4 = "/qrcode/" . time() . rand(100, 999) . '_qrcode.png';
                            $path4 = qrcodeLogo($url4, $v['goods_img'], './' . $qrcode_path4, 8, 9);
                            $goods[$k]['ti_goods_code'] = 'http://daylive.tstmobile.com' . $path4;
                        }else{
                            $goods[$k]['ti_goods_code'] ='';
                        }
                    }
                    $live['goods'] = $goods;
                } elseif($live['status']=='3') {
                    $goods = DB::name("app_paimai")->where(["apply_id" => $live['apply_id']])->select();
                    $arr = [];
                    foreach ($goods as $a => $c) {
                        $arr[] = $c['paimai_id'];
                    }
                    $live['goods'] = [];
                }
                $live['share_url'] = config('domain') . '/api/Index/share_live?apply_id=' . $live['apply_id'] . "&room_id=" . $live['room_id'];
                $r = Db::name('qiniu_token')->where(['screen_id'=>$rs['screen_id'],'apply_id'=>$apply_id])->find();
                if ($r) {
                    //七牛生成流地址
                    $chars = "abcdefghijklmnopqrstuvwxyz123456789";
                    mt_srand(10000000 * (double)microtime());
                    for ($i = 0, $str = '', $lc = strlen($chars) - 1; $i < 6; $i++) {
                        $str .= $chars[mt_rand(0, $lc)];

                    }
                    $qiniu_room_id = $r['user_qiniu_id'];
                    $qiniu_room_name = $live['qiniu_room_name'];
                    $qn = new QiniuPili();
                    $a = $qn->watch_room($qiniu_room_id, $qiniu_room_name);    //七牛创建房间
                    $live['user_qiniu_token'] = $a;
                    $live['user_qiniu_id'] = $r['user_qiniu_id'];
                } else {
                    //七牛生成流地址
                    $chars = "abcdefghijklmnopqrstuvwxyz123456789";
                    mt_srand(10000000 * (double)microtime());
                    for ($i = 0, $str = '', $lc = strlen($chars) - 1; $i < 6; $i++) {
                        $str .= $chars[mt_rand(0, $lc)];

                    }

                    $qiniu_room_id = 'qiniu-' . $str . rand(10, 99) . '-b' . rand(100.999) . '-' . rand(1000, 9999);
                    $qiniu_room_name = $live['qiniu_room_name'];
                    $qn = new QiniuPili();
                    $live['user_qiniu_id'] = $qiniu_room_id;
                    $a = $qn->watch_room($qiniu_room_id, $qiniu_room_name);    //七牛创建房间
                    $b['qiniu_token'] = $a;
                    $b['apply_id'] = $apply_id;
                    $b['screen_id'] = $rs['screen_id'];
                    $b['user_qiniu_id'] = $qiniu_room_id;
                    $e = Db::name('qiniu_token')->insert($b);
                    if ($e) {
                        $live['user_qiniu_token'] = $a;
                    }

                }
                $micro_count = Db::name('private_micro')->where(['apply_id' => $apply_id])->count();
                $live['micro_count'] = $micro_count + 3;
                if($live['is_shenhe']=='4'){
                    $live['type'] = '1';
                }
                if($live['live_status']=='2' && $live['is_shenhe']=='4'){
                    $live['wz_type'] = '4';
                }
                success($live);
            }elseif ($rs['is_shenhe']=='6'){
                $live = Db::name('live_store')->alias('a')
                    ->field('a.*,b.*,c.qiniu_room_name,b.merchants_id,d.contact_name,d.business_img,d.gl_merchants_id,d.company_desc,d.company_name')
                    ->join('th_apply b', 'a.room_id = b.room_id')
                    ->join("th_merchants d", "b.merchants_id = d.gl_merchants_id")
                    ->join('th_live c','a.live_id=c.live_id')
                    ->where(['b.apply_id' => $apply_id])
                    ->find();
                $live['play_address'] = $live['lu_url'];
                $live['follow_num'] = Db::name('follow_merchants')->where(['user_id2' => $live['gl_merchants_id'],'is_delete'=>'1'])->count();
                $live['share_num'] = Db::name('share_merchants')->where(['merchants_id' => $live['gl_merchants_id'],'is_del'=>'1'])->count();
                $live['tag'] = Db::name('home_class')->where(['id' => $live['status']])->value('title');
                $live['anchor_id'] = Db::name('anchor')->where(['anchor_phone' => $live['zhu_phone']])->value('anchor_id');
                $live['hx_username'] = Db::name('anchor')->where(['anchor_phone' => $live['zhu_phone']])->value('hx_username');
                $live['nick_name'] = Db::name('anchor')->where(['anchor_phone' => $live['zhu_phone']])->value('nick_name');
                $live['user_img'] = Db::name('anchor')->where(['anchor_phone' => $live['zhu_phone']])->value('user_img');
                if ($live['status'] == '2') {
                    $goods = Db::name('app_good')->where(['apply_id' => $live['apply_id']])->order('goods_type desc')->select();
                    foreach ($goods as $k => $v) {
                        $url = 'http://m.dev.ttzxh.com/tmpl/product_detail.html?goods_id=' . $v['goods_id'] . '&roomid=' . $v['apply_id'] . '&saletype=1';
                        $qrcode_path = "/qrcode/" . time() . rand(100, 999) . '_qrcode.png';
                        $path = qrcodeLogo($url, $v['goods_img'], './' . $qrcode_path, 8, 9);
                        $goods[$k]['goods_code'] = 'http://daylive.tstmobile.com' . $path;
                        if($v['tbUrl']!==''){
                            $url2 = $v['tbUrl'];
                            $qrcode_path2 = "/qrcode/" . time() . rand(100, 999) . '_qrcode.png';
                            $path2 = qrcodeLogo($url2, $v['goods_img'], './' . $qrcode_path2, 8, 9);
                            $goods[$k]['tao_goods_code'] = 'http://daylive.tstmobile.com' . $path2;
                        }else{
                            $goods[$k]['tao_goods_code'] ='';
                        }
                        if($v['jdUrl']!==''){
                            $url3 = $v['jdUrl'];
                            $qrcode_path3 = "/qrcode/" . time() . rand(100, 999) . '_qrcode.png';
                            $path3 = qrcodeLogo($url3, $v['goods_img'], './' . $qrcode_path3, 8, 9);
                            $goods[$k]['dong_goods_code'] = 'http://daylive.tstmobile.com' . $path3;
                        }else{
                            $goods[$k]['dong_goods_code'] ='';
                        }
                        if($v['jdUrl']!=='' || $v['tbUrl']!==''){
                            $url4 = 'https://m.dev.ttzxh.com/tmpl/MobileZitiCtl/index.html?apply_id='.$v['apply_id'].'&goods_id='.$v['goods_id'].'&company_name='.$live['company_name'].'&address='.$live['address'];
                            $qrcode_path4 = "/qrcode/" . time() . rand(100, 999) . '_qrcode.png';
                            $path4 = qrcodeLogo($url4, $v['goods_img'], './' . $qrcode_path4, 8, 9);
                            $goods[$k]['ti_goods_code'] = 'http://daylive.tstmobile.com' . $path4;
                        }else{
                            $goods[$k]['ti_goods_code'] ='';
                        }

                    }
                    $live['goods'] = $goods;
                } elseif($live['status']=='3') {
                    $goods = DB::name("app_paimai")->where(["apply_id" => $live['apply_id']])->select();
                    $arr = [];
                    foreach ($goods as $a => $c) {
                        $arr[] = $c['paimai_id'];
                    }
                    $live['goods'] = [];
                }
                $live['share_url'] = config('domain') . '/api/Index/share_live?apply_id=' . $live['apply_id'] . "&room_id=" . $live['room_id'];
                $r = Db::name('qiniu_token')->where(['screen_id'=>$rs['screen_id'],'apply_id'=>$apply_id])->find();
                if ($r) {
                    //七牛生成流地址
                    $chars = "abcdefghijklmnopqrstuvwxyz123456789";
                    mt_srand(10000000 * (double)microtime());
                    for ($i = 0, $str = '', $lc = strlen($chars) - 1; $i < 6; $i++) {
                        $str .= $chars[mt_rand(0, $lc)];

                    }
                    $qiniu_room_id = $r['user_qiniu_id'];
                    $qiniu_room_name = $live['qiniu_room_name'];
                    $qn = new QiniuPili();
                    $a = $qn->watch_room($qiniu_room_id, $qiniu_room_name);    //七牛创建房间
                    $live['user_qiniu_token'] = $a;
                    $live['user_qiniu_id'] = $r['user_qiniu_id'];
                } else {
                    //七牛生成流地址
                    $chars = "abcdefghijklmnopqrstuvwxyz123456789";
                    mt_srand(10000000 * (double)microtime());
                    for ($i = 0, $str = '', $lc = strlen($chars) - 1; $i < 6; $i++) {
                        $str .= $chars[mt_rand(0, $lc)];

                    }

                    $qiniu_room_id = 'qiniu-' . $str . rand(10, 99) . '-b' . rand(100.999) . '-' . rand(1000, 9999);
                    $qiniu_room_name = $live['qiniu_room_name'];
                    $qn = new QiniuPili();
                    $live['user_qiniu_id'] = $qiniu_room_id;
                    $a = $qn->watch_room($qiniu_room_id, $qiniu_room_name);    //七牛创建房间
                    $b['qiniu_token'] = $a;
                    $b['apply_id'] = $apply_id;
                    $b['screen_id'] = $rs['screen_id'];
                    $b['user_qiniu_id'] = $qiniu_room_id;
                    $e = Db::name('qiniu_token')->insert($b);
                    if ($e) {
                        $live['user_qiniu_token'] = $a;
                    }

                }
                $micro_count = Db::name('private_micro')->where(['apply_id' => $apply_id])->count();
                $live['micro_count'] = $micro_count + 3;
                if($live['is_shenhe']=='6'){
                    $live['type'] = '3';
                }
                success($live);
            }
        }else {
            if($type=='1'){
                $uid = input('uid');
                $apply_id = input('apply_id');
                $header_img = input('header_img');
                $hx_name = input('hx_name');
                $user_name = input('user_name');
                if (empty($hx_name)) error('hx_name参数错误');
                if ($header_img == '' || $header_img == 'null') {
                    $header_img = '/uploads//image/banner/20180529/ebd23eb942ba1630d18ed1bd249f6397.jpg';
                    $da['header_img'] = config('domain') . $header_img;
                }else{
                    $da['header_img'] = $header_img;
                }
                if (empty($apply_id)) error("参数错误");
                $live = Db::name('live')->alias('a')
                    ->field('a.*,b.*,d.contact_name,d.business_img,d.gl_merchants_id,d.company_desc,d.company_name')
                    ->join('th_apply b', 'a.room_id = b.room_id')
                    ->join("th_merchants d", "b.merchants_id = d.gl_merchants_id")
                    ->where(['b.apply_id' => $apply_id])
                    ->find();
                $live['type'] = $type;
                if($live['live_status']=='2' && $live['is_shenhe']=='4'){
                    $live['wz_type'] = '4';
                }
                $data['user_id'] = $uid;
                $data['merchants_id'] = $live['gl_merchants_id'];
                $data['apply_id'] = $apply_id;
                $data['create_time'] = time();
                $re1 = Db::name('watch_live')->where(['user_id'=>$uid,'apply_id'=>$apply_id])->find();
                if(!$re1){
                    Db::name('watch_live')->insert($data);
                }
                $live['follow_num'] = Db::name('follow_merchants')->where(['user_id2' => $live['gl_merchants_id'],'is_delete'=>'1'])->count();
                $live['share_num'] = Db::name('share_merchants')->where(['merchants_id' => $live['gl_merchants_id']])->count();
                $live['tag'] = Db::name('home_class')->where(['id' => $live['status']])->value('title');
                $live['anchor_id'] = Db::name('anchor')->where(['anchor_phone' => $live['zhu_phone']])->value('anchor_id');
                $live['hx_username'] = Db::name('anchor')->where(['anchor_phone' => $live['zhu_phone']])->value('hx_username');
                $live['nick_name'] = Db::name('anchor')->where(['anchor_phone' => $live['zhu_phone']])->value('nick_name');
                $live['user_img'] = Db::name('anchor')->where(['anchor_phone' => $live['zhu_phone']])->value('user_img');
                if ($live['status'] == '2') {
                    $goods = Db::name('app_good')->where(['apply_id' => $live['apply_id']])->order('goods_type desc')->select();
                    foreach ($goods as $k => $v) {
                        $url = 'http://m.dev.ttzxh.com/tmpl/product_detail.html?goods_id=' . $v['goods_id'] . '&roomid=' . $v['apply_id'] . '&saletype=1';
                        $qrcode_path = "/qrcode/" . time() . rand(100, 999) . '_qrcode.png';
                        $path = qrcodeLogo($url, $v['goods_img'], './' . $qrcode_path, 8, 9);
                        $goods[$k]['goods_code'] = 'http://daylive.tstmobile.com' . $path;
                        if($v['tbUrl']!==''){
                            $url2 = $v['tbUrl'];
                            $qrcode_path2 = "/qrcode/" . time() . rand(100, 999) . '_qrcode.png';
                            $path2 = qrcodeLogo($url2, $v['goods_img'], './' . $qrcode_path2, 8, 9);
                            $goods[$k]['tao_goods_code'] = 'http://daylive.tstmobile.com' . $path2;
                        }else{
                            $goods[$k]['tao_goods_code'] ='';
                        }
                        if($v['jdUrl']!==''){
                            $url3 = $v['jdUrl'];
                            $qrcode_path3 = "/qrcode/" . time() . rand(100, 999) . '_qrcode.png';
                            $path3 = qrcodeLogo($url3, $v['goods_img'], './' . $qrcode_path3, 8, 9);
                            $goods[$k]['dong_goods_code'] = 'http://daylive.tstmobile.com' . $path3;
                        }else{
                            $goods[$k]['dong_goods_code'] ='';
                        }
                        if($v['jdUrl']!=='' || $v['tbUrl']!==''){
                            $url4 = 'https://m.dev.ttzxh.com/tmpl/MobileZitiCtl/index.html?apply_id='.$v['apply_id'].'&goods_id='.$v['goods_id'].'&company_name='.$live['company_name'].'&address='.$live['address'];
                            $qrcode_path4 = "/qrcode/" . time() . rand(100, 999) . '_qrcode.png';
                            $path4 = qrcodeLogo($url4, $v['goods_img'], './' . $qrcode_path4, 8, 9);
                            $goods[$k]['ti_goods_code'] = 'http://daylive.tstmobile.com' . $path4;
                        }else{
                            $goods[$k]['ti_goods_code'] ='';
                        }

                    }
                    $live['goods'] = $goods;
                } elseif($live['status']=='3') {
                    $goods = DB::name("app_paimai")->where(["apply_id" => $live['apply_id']])->select();
                    $arr = [];
                    foreach ($goods as $a => $c) {
                        $arr[] = $c['paimai_id'];
                    }
                    $live['goods'] = [];
                }
                $live['share_url'] = config('domain') . '/api/Index/share_live?apply_id=' . $live['apply_id'] . "&room_id=" . $live['room_id'];
                $r = Db::name('qiniu_token')->where(['user_id' => $uid, 'apply_id' => $apply_id])->find();
                if ($r) {
                    //七牛生成流地址
                    $chars = "abcdefghijklmnopqrstuvwxyz123456789";
                    mt_srand(10000000 * (double)microtime());
                    for ($i = 0, $str = '', $lc = strlen($chars) - 1; $i < 6; $i++) {
                        $str .= $chars[mt_rand(0, $lc)];

                    }
                    $qiniu_room_id = $r['user_qiniu_id'];
                    $qiniu_room_name = $live['qiniu_room_name'];
                    $qn = new QiniuPili();
                    $a = $qn->watch_room($qiniu_room_id, $qiniu_room_name);    //七牛创建房间
                    $live['user_qiniu_token'] = $a;
                    $live['user_qiniu_id'] = $r['user_qiniu_id'];
                } else {
                    //七牛生成流地址
                    $chars = "abcdefghijklmnopqrstuvwxyz123456789";
                    mt_srand(10000000 * (double)microtime());
                    for ($i = 0, $str = '', $lc = strlen($chars) - 1; $i < 6; $i++) {
                        $str .= $chars[mt_rand(0, $lc)];

                    }

                    $qiniu_room_id = 'qiniu-' . $str . rand(10, 99) . '-b' . rand(100.999) . '-' . rand(1000, 9999);
                    $qiniu_room_name = $live['qiniu_room_name'];
                    $qn = new QiniuPili();
                    $live['user_qiniu_id'] = $qiniu_room_id;
                    $a = $qn->watch_room($qiniu_room_id, $qiniu_room_name);    //七牛创建房间
                    $b['qiniu_token'] = $a;
                    $b['apply_id'] = $apply_id;
                    $b['user_id'] = $uid;
                    $b['user_qiniu_id'] = $qiniu_room_id;
                    $e = Db::name('qiniu_token')->insert($b);
                    if ($e) {
                        $live['user_qiniu_token'] = $a;
                    }

                }
                $da['user_id'] = $uid;
                $da['apply_id'] = $apply_id;
                $da['hx_name'] = $hx_name;
                $da['create_time'] = time();
                $da['user_name'] = $user_name;
                $re = Db::name('gl_member')->where(['user_id' => $uid, 'apply_id' => $live['apply_id']])->find();
                if (!$re) {
                    Db::name('gl_member')->insert($da);
                }
                $is_follow = $this->into_live($uid, $header_img, $live['live_id'], $live['gl_merchants_id']);
                $live['is_follow'] = $is_follow;
                $micro_count = Db::name('private_micro')->where(['apply_id' => $apply_id])->count();
                $live['micro_count'] = $micro_count + 3;
                success($live);
            }elseif ($type=='2'){
                $uid = input('uid');
                $apply_id = input('apply_id');
                $header_img = input('header_img');
                $hx_name = input('hx_name');
                $user_name = input('user_name');
                if (empty($hx_name)) error('hx_name参数错误');
                if ($header_img == '' || $header_img == 'null') {
                    $header_img = '/uploads//image/banner/20180529/ebd23eb942ba1630d18ed1bd249f6397.jpg';
                    $da['header_img'] = config('domain') . $header_img;
                }else{
                    $da['header_img'] = $header_img;
                }
                if (empty($apply_id)) error("参数错误");
                $live = Db::name('apply')->alias('a')
                    ->field('a.*,d.contact_name,d.business_img,d.gl_merchants_id,d.company_desc,d.company_name')
                    ->join("th_merchants d", "a.merchants_id = d.gl_merchants_id")
                    ->where(['a.apply_id' => $apply_id])
                    ->find();
                DB::name('black_list')->where(['merchants_id'=>$live['merchants_id'],'user_id'=>$uid])->find() ? error('你已被拉黑，无法进入!') : true;
                $live['type'] = $type;
                $data['user_id'] = $uid;
                $data['merchants_id'] = $live['gl_merchants_id'];
                $data['apply_id'] = $apply_id;
                $data['create_time'] = time();
                Db::name('watch_live')->insert($data);
                DB::name('apply')->comment('观看人数加1')->where(['apply_id'=>$apply_id])->setInc('ren_num');
                $live['play_address'] = $live['url'];
                $live['follow_num'] = Db::name('follow_merchants')->where(['user_id2' => $live['gl_merchants_id'],'is_delete'=>'1'])->count();
                $live['share_num'] = Db::name('share_merchants')->where(['merchants_id' => $live['gl_merchants_id'],'is_del'=>'1'])->count();
                $live['tag'] = Db::name('home_class')->where(['id' => $live['status']])->value('title');
                $live['anchor_id'] = Db::name('anchor')->where(['anchor_phone' => $live['zhu_phone']])->value('anchor_id');
                $live['hx_username'] = Db::name('anchor')->where(['anchor_phone' => $live['zhu_phone']])->value('hx_username');
                $live['nick_name'] = Db::name('anchor')->where(['anchor_phone' => $live['zhu_phone']])->value('nick_name');
                $live['user_img'] = Db::name('anchor')->where(['anchor_phone' => $live['zhu_phone']])->value('user_img');
                if ($live['status'] == '2') {
                    $goods = Db::name('app_good')->where(['apply_id' => $live['apply_id']])->order('goods_type desc')->select();
                    foreach ($goods as $k => $v) {
                        $url = 'http://m.dev.ttzxh.com/tmpl/product_detail.html?goods_id=' . $v['goods_id'] . '&roomid=' . $v['apply_id'] . '&saletype=1';
                        $qrcode_path = "/qrcode/" . time() . rand(100, 999) . '_qrcode.png';
                        $path = qrcodeLogo($url, $v['goods_img'], './' . $qrcode_path, 8, 9);
                        $goods[$k]['goods_code'] = 'http://daylive.tstmobile.com' . $path;
                        if($v['tbUrl']!==''){
                            $url2 = $v['tbUrl'];
                            $qrcode_path2 = "/qrcode/" . time() . rand(100, 999) . '_qrcode.png';
                            $path2 = qrcodeLogo($url2, $v['goods_img'], './' . $qrcode_path2, 8, 9);
                            $goods[$k]['tao_goods_code'] = 'http://daylive.tstmobile.com' . $path2;
                        }else{
                            $goods[$k]['tao_goods_code'] ='';
                        }
                        if($v['jdUrl']!==''){
                            $url3 = $v['jdUrl'];
                            $qrcode_path3 = "/qrcode/" . time() . rand(100, 999) . '_qrcode.png';
                            $path3 = qrcodeLogo($url3, $v['goods_img'], './' . $qrcode_path3, 8, 9);
                            $goods[$k]['dong_goods_code'] = 'http://daylive.tstmobile.com' . $path3;
                        }else{
                            $goods[$k]['dong_goods_code'] ='';
                        }
                        if($v['jdUrl']!=='' || $v['tbUrl']!==''){
                            $url4 = 'https://m.dev.ttzxh.com/tmpl/MobileZitiCtl/index.html?apply_id='.$v['apply_id'].'&goods_id='.$v['goods_id'].'&company_name='.$live['company_name'].'&address='.$live['address'];
                            $qrcode_path4 = "/qrcode/" . time() . rand(100, 999) . '_qrcode.png';
                            $path4 = qrcodeLogo($url4, $v['goods_img'], './' . $qrcode_path4, 8, 9);
                            $goods[$k]['ti_goods_code'] = 'http://daylive.tstmobile.com' . $path4;
                        }else{
                            $goods[$k]['ti_goods_code'] ='';
                        }

                    }
                    $live['goods'] = $goods;
                } elseif($live['status']=='3') {
                    $goods = DB::name("app_paimai")->where(["apply_id" => $live['apply_id']])->select();
                    $arr = [];
                    foreach ($goods as $a => $c) {
                        $arr[] = $c['paimai_id'];
                    }
                    $live['goods'] = [];
                }
                $live['share_url'] = config('domain') . '/api/Index/share_live?apply_id=' . $live['apply_id'] . "&room_id=" . $live['room_id'];
                $r = Db::name('qiniu_token')->where(['user_id' => $uid, 'apply_id' => $apply_id])->find();
                if ($r) {
                    //七牛生成流地址
                    $chars = "abcdefghijklmnopqrstuvwxyz123456789";
                    mt_srand(10000000 * (double)microtime());
                    for ($i = 0, $str = '', $lc = strlen($chars) - 1; $i < 6; $i++) {
                        $str .= $chars[mt_rand(0, $lc)];

                    }

                    $qiniu_room_id = $r['user_qiniu_id'];
                    $qiniu_room_name = $live['qiniu_room_name'];
                    $qn = new QiniuPili();
                    $a = $qn->watch_room($qiniu_room_id, $qiniu_room_name);    //七牛创建房间
                    $live['user_qiniu_token'] = $a;
                    $live['user_qiniu_id'] = $r['user_qiniu_id'];
                } else {
                    //七牛生成流地址
                    $chars = "abcdefghijklmnopqrstuvwxyz123456789";
                    mt_srand(10000000 * (double)microtime());
                    for ($i = 0, $str = '', $lc = strlen($chars) - 1; $i < 6; $i++) {
                        $str .= $chars[mt_rand(0, $lc)];

                    }

                    $qiniu_room_id = 'qiniu-' . $str . rand(10, 99) . '-b' . rand(100.999) . '-' . rand(1000, 9999);
                    $qiniu_room_name = $live['qiniu_room_name'];
                    $qn = new QiniuPili();
                    $live['user_qiniu_id'] = $qiniu_room_id;
                    $a = $qn->watch_room($qiniu_room_id, $qiniu_room_name);    //七牛创建房间
                    $b['qiniu_token'] = $a;
                    $b['apply_id'] = $apply_id;
                    $b['user_id'] = $uid;
                    $b['user_qiniu_id'] = $qiniu_room_id;
                    $e = Db::name('qiniu_token')->insert($b);
                    if ($e) {
                        $live['user_qiniu_token'] = $a;
                    }

                }
                $da['user_id'] = $uid;
                $da['apply_id'] = $apply_id;
                $da['hx_name'] = $hx_name;
                $da['create_time'] = time();
                $da['user_name'] = $user_name;
                $re = Db::name('gl_member')->where(['user_id' => $uid, 'apply_id' => $apply_id])->find();
                if (!$re) {
                    Db::name('gl_member')->insert($da);
                }
                $is_follow = DB::name('follow_merchants')->comment("判断是否关注")->where(['user_id' => $uid, 'user_id2' => $live['merchants_id']])->find();
                if($is_follow['is_delete']=='1'){
                    $is_follow = '1';
                }else{
                    $is_follow = '2';
                }
                $live['is_follow'] = $is_follow;
                $micro_count = Db::name('private_micro')->where(['apply_id' => $apply_id])->count();
                $live['micro_count'] = $micro_count + 3;
                success($live);
            }else{
                $uid = input('uid');
                $apply_id = input('apply_id');
                $header_img = input('header_img');
                $hx_name = input('hx_name');
                $user_name = input('user_name');
                if (empty($hx_name)) error('hx_name参数错误');
                if ($header_img == '' || $header_img == 'null') {
                    $header_img = '/uploads//image/banner/20180529/ebd23eb942ba1630d18ed1bd249f6397.jpg';
                    $da['header_img'] = config('domain') . $header_img;
                }else{
                    $da['header_img'] = $header_img;
                }
                if (empty($apply_id)) error("参数错误");
                $live = Db::name('live_store')->alias('a')
                    ->field('a.*,b.*,c.qiniu_room_name,b.merchants_id,d.contact_name,d.business_img,d.gl_merchants_id,d.company_desc,d.company_name')
                    ->join('th_apply b', 'a.room_id = b.room_id')
                    ->join("th_merchants d", "b.merchants_id = d.gl_merchants_id")
                    ->join('th_live c','a.live_id=c.live_id')
                    ->where(['b.apply_id' => $apply_id])
                    ->find();
                $live['play_address'] = $live['lu_url'];
                DB::name('apply')->comment('观看人数加1')->where(['apply_id'=>$apply_id])->setInc('ren_num');
                DB::name('Live_kicking')->where(['live_id'=>$live['live_id'],'user_id'=>$uid])->find() ? error('你已被踢出直播间，无法进入!') : true;
                DB::name('black_list')->where(['merchants_id'=>$live['merchants_id'],'user_id'=>$uid])->find() ? error('你已被拉黑，无法进入!') : true;
                $live['type'] = $type;
                $data['user_id'] = $uid;
                $data['merchants_id'] = $live['gl_merchants_id'];
                $data['apply_id'] = $apply_id;
                $data['create_time'] = time();
                $re1 = Db::name('watch_live')->where(['user_id'=>$uid,'apply_id'=>$apply_id])->find();
                if(!$re1){
                    Db::name('watch_live')->insert($data);
                }
                $live['follow_num'] = Db::name('follow_merchants')->where(['user_id2' => $live['gl_merchants_id'],'is_delete'=>'1'])->count();
                $live['share_num'] = Db::name('share_merchants')->where(['merchants_id' => $live['gl_merchants_id'],'is_del'=>'1'])->count();
                $live['tag'] = Db::name('home_class')->where(['id' => $live['status']])->value('title');
                $live['anchor_id'] = Db::name('anchor')->where(['anchor_phone' => $live['zhu_phone']])->value('anchor_id');
                $live['hx_username'] = Db::name('anchor')->where(['anchor_phone' => $live['zhu_phone']])->value('hx_username');
                $live['nick_name'] = Db::name('anchor')->where(['anchor_phone' => $live['zhu_phone']])->value('nick_name');
                $live['user_img'] = Db::name('anchor')->where(['anchor_phone' => $live['zhu_phone']])->value('user_img');
                if ($live['status'] == '2') {
                    $goods = Db::name('app_good')->where(['apply_id' => $live['apply_id']])->order('goods_type desc')->select();
                    foreach ($goods as $k => $v) {
                        $url = 'http://m.dev.ttzxh.com/tmpl/product_detail.html?goods_id=' . $v['goods_id'] . '&roomid=' . $v['apply_id'] . '&saletype=1';
                        $qrcode_path = "/qrcode/" . time() . rand(100, 999) . '_qrcode.png';
                        $path = qrcodeLogo($url, $v['goods_img'], './' . $qrcode_path, 8, 9);
                        $goods[$k]['goods_code'] = 'http://daylive.tstmobile.com' . $path;
                        if($v['tbUrl']!==''){
                            $url2 = $v['tbUrl'];
                            $qrcode_path2 = "/qrcode/" . time() . rand(100, 999) . '_qrcode.png';
                            $path2 = qrcodeLogo($url2, $v['goods_img'], './' . $qrcode_path2, 8, 9);
                            $goods[$k]['tao_goods_code'] = 'http://daylive.tstmobile.com' . $path2;
                        }else{
                            $goods[$k]['tao_goods_code'] ='';
                        }
                        if($v['jdUrl']!==''){
                            $url3 = $v['jdUrl'];
                            $qrcode_path3 = "/qrcode/" . time() . rand(100, 999) . '_qrcode.png';
                            $path3 = qrcodeLogo($url3, $v['goods_img'], './' . $qrcode_path3, 8, 9);
                            $goods[$k]['dong_goods_code'] = 'http://daylive.tstmobile.com' . $path3;
                        }else{
                            $goods[$k]['dong_goods_code'] ='';
                        }
                        if($v['jdUrl']!=='' || $v['tbUrl']!==''){
                            $url4 = 'https://m.dev.ttzxh.com/tmpl/MobileZitiCtl/index.html?apply_id='.$v['apply_id'].'&goods_id='.$v['goods_id'].'&company_name='.$live['company_name'].'&address='.$live['address'];
                            $qrcode_path4 = "/qrcode/" . time() . rand(100, 999) . '_qrcode.png';
                            $path4 = qrcodeLogo($url4, $v['goods_img'], './' . $qrcode_path4, 8, 9);
                            $goods[$k]['ti_goods_code'] = 'http://daylive.tstmobile.com' . $path4;
                        }else{
                            $goods[$k]['ti_goods_code'] ='';
                        }

                    }
                    $live['goods'] = $goods;
                } elseif($live['status']=='3') {
                    $goods = DB::name("app_paimai")->where(["apply_id" => $live['apply_id']])->select();
                    $arr = [];
                    foreach ($goods as $a => $c) {
                        $arr[] = $c['paimai_id'];
                    }
                    $live['goods'] = [];
                }
                $live['share_url'] = config('domain') . '/api/Index/share_live?apply_id=' . $live['apply_id'] . "&room_id=" . $live['room_id'];
                $r = Db::name('qiniu_token')->where(['user_id' => $uid, 'apply_id' => $apply_id])->find();
                if ($r) {
                    //七牛生成流地址
                    $chars = "abcdefghijklmnopqrstuvwxyz123456789";
                    mt_srand(10000000 * (double)microtime());
                    for ($i = 0, $str = '', $lc = strlen($chars) - 1; $i < 6; $i++) {
                        $str .= $chars[mt_rand(0, $lc)];

                    }
                    $qiniu_room_id = $r['user_qiniu_id'];
                    $qiniu_room_name = $live['qiniu_room_name'];
                    $qn = new QiniuPili();
                    $a = $qn->watch_room($qiniu_room_id, $qiniu_room_name);    //七牛创建房间
                    $live['user_qiniu_token'] = $a;
                    $live['user_qiniu_id'] = $r['user_qiniu_id'];
                } else {
                    //七牛生成流地址
                    $chars = "abcdefghijklmnopqrstuvwxyz123456789";
                    mt_srand(10000000 * (double)microtime());
                    for ($i = 0, $str = '', $lc = strlen($chars) - 1; $i < 6; $i++) {
                        $str .= $chars[mt_rand(0, $lc)];

                    }

                    $qiniu_room_id = 'qiniu-' . $str . rand(10, 99) . '-b' . rand(100.999) . '-' . rand(1000, 9999);
                    $qiniu_room_name = $live['qiniu_room_name'];
                    $qn = new QiniuPili();
                    $live['user_qiniu_id'] = $qiniu_room_id;
                    $a = $qn->watch_room($qiniu_room_id, $qiniu_room_name);    //七牛创建房间
                    $b['qiniu_token'] = $a;
                    $b['apply_id'] = $apply_id;
                    $b['user_id'] = $uid;
                    $b['user_qiniu_id'] = $qiniu_room_id;
                    $e = Db::name('qiniu_token')->insert($b);
                    if ($e) {
                        $live['user_qiniu_token'] = $a;
                    }

                }
                $da['user_id'] = $uid;
                $da['apply_id'] = $apply_id;
                $da['hx_name'] = $hx_name;
                $da['create_time'] = time();
                $da['user_name'] = $user_name;
                $re = Db::name('gl_member')->where(['user_id' => $uid, 'apply_id' => $live['apply_id']])->find();
                if (!$re) {
                    Db::name('gl_member')->insert($da);
                }
                $is_follow = DB::name('follow_merchants')->comment("判断是否关注")->where(['user_id' => $uid, 'user_id2' => $live['merchants_id']])->find();
                if($is_follow['is_delete']=='1'){
                    $is_follow = '1';
                }else{
                    $is_follow = '2';
                }
                $live['is_follow'] = $is_follow;
                $micro_count = Db::name('private_micro')->where(['apply_id' => $apply_id])->count();
                $live['micro_count'] = $micro_count + 3;
                success($live);
            }

        }

    }




    /**
     * 预播进入申请活动
     */
    public function yu_info(){
        $uid = input('uid');
        $apply_id = input('apply_id');
        $merchants_id = input('merchants_id');
        if(empty($apply_id))        error("参数错误");
        if(empty($merchants_id))        error("merchants_id参数错误");
        DB::name('black_list')->where(['merchants_id'=>$merchants_id,'user_id'=>$uid])->find() ? error('你已被拉黑，无法进入!') : true;
        $live = Db::name('apply')->alias('a')
            ->field('a.*,d.contact_name,d.business_img,d.gl_merchants_id,d.company_desc,d.company_name')
            ->join("th_merchants d","a.merchants_id = d.gl_merchants_id")
            ->where(['a.apply_id'=>$apply_id])
            ->find();
        $live['watch_nums'] = '0';
        $live['follow_num'] =Db::name('follow_merchants')->where(['user_id2'=>$live['gl_merchants_id']])->count();
        $live['share_num'] =Db::name('share_merchants')->where(['merchants_id'=>$live['gl_merchants_id']])->count();
        $live['tag'] =Db::name('home_class')->where(['id'=>$live['status']])->value('title');
        $live['anchor_id'] =Db::name('anchor')->where(['anchor_phone'=>$live['zhu_phone']])->value('anchor_id');
        $live['hx_username'] =Db::name('anchor')->where(['anchor_phone'=>$live['zhu_phone']])->value('hx_username');
        if($live['status']=='0'){
            $goods= Db::name('app_goods')->where(['apply_id'=>$live['apply_id']])->order('goods_type desc')->select();
            foreach ($goods as $k=>$v){
                $url = 'http://m.dev.ttzxh.com/tmpl/product_detail.html?goods_id='.$v['goods_id'].'&roomid='.$v['apply_id'].'&saletype=1';
                $qrcode_path = "/qrcode/" . time() . rand(100, 999) . '_qrcode.png';
                $path = qrcodeLogo($url,$v['goods_img'],'./'.$qrcode_path,8,9);
                $goods[$k]['goods_code'] = 'http://daylive.tstmobile.com'.$path;
            }
            $live['goods'] = $goods;
        }else{
            $goods=DB::name("app_paimai")->where(["apply_id"=>$live['apply_id']])->select();
            $arr = [];
            foreach ($goods as $a=>$c){
                $arr[] = $c['paimai_id'];
            }
            $live['goods'] = [];
        }
        $is_follow = DB::name('follow_merchants')->comment("判断是否关注")->where(['user_id' => $uid, 'user_id2' => $live['gl_merchants_id']])->find();
        if($is_follow['is_delete']=='1'){
            $is_follow = '1';
        }else{
            $is_follow = '2';
        }
        $live['share_url'] = config('domain').'/api/Index/share_live?apply_id='.$live['apply_id']."&room_id=".$live['room_id'];
        $live['is_follow'] = $is_follow;
        $live['type'] = '2';
//        DB::name('apply')->comment('观看人数加1')->where(['apply_id'=>$apply_id])->setInc('ren_num');
        success($live);
    }


    /**
     * 获取头像用户列表
     */
    public function user_imgs(){
        $apply_id = input('apply_id');
        $p = input("p");
        $p ? $p :$p = 1;
        $pagesize = input("pagesize");
        $pagesize ? $pagesize : $pagesize = 10;
        $res = Db::name('gl_member')
            ->where(['apply_id'=>$apply_id])
            ->limit(($p-1)*$pagesize,$pagesize)
            ->select();
        $count =Db::name('gl_member')->where(['apply_id'=>$apply_id])->count();
        $page = $count/$pagesize;
        if($res){
            success(['page'=>$page,'list'=>$res,'count'=>$count]);
        }else{
            success(['list'=>[],'count'=>'0','page'=>'0']);
        }
    }
    /**
     * 直播播放暂停状态
     */
    public function change_live_state(){
        $live_id = input('live_id');
        if(empty($live_id)){
            error('参数错误');
        }
        $live_state = Db::name('live')->where(['live_id'=>$live_id])->value('live_state');
        if($live_state=='0'){
            $res = Db::name('live')->where(['live_id'=>$live_id])->update(['live_state'=>'1']);

        }else{
            $res = Db::name('live')->where(['live_id'=>$live_id])->update(['live_state'=>'0']);
        }
        if($res){
            success('成功');
        }else{
            error('失败');
        }


    }

    public function live_detail(){
        $live_id = input('live_id');
        if(empty($live_id))        error("参数错误");
        $live = Db::name('live')->alias('a')
            ->field('a.*,b.*,d.contact_name,d.business_img,d.gl_merchants_id,d.company_name')
            ->join('th_apply b','a.room_id = b.room_id')
            ->join("th_merchants d","b.merchants_id = d.gl_merchants_id")
            ->where(['a.live_id'=>$live_id])
            ->find();
        success($live);
    }


    /**
     *非电商直播(无商户)
     */
    public function anchor_live_list(){
        if(Request::instance()->isPost()){
            $uid = input('uid');
            $member = Db::name('member')->where(['member_id'=>$uid])->find();
            $p = input("p");
            $p ? $p :$p = 1;
            $pagesize = input("pagesize");
            $pagesize ? $pagesize : $pagesize = 10;
            $map["live_status"] = 1;
            $type= input("type");
            switch ($type){
                case 1://广场
                    $order = 'a.intime desc';
                    break;
                case 2://关注
                    $follow_user = Db::name('follow')->where(['user_id'=>$member['member_id']])->column('user_id2');
                    if($follow_user){
                        $map['a.user_id'] = ['in',$follow_user];
                    }else{
                        success(['page'=>0,'list'=>[]]);
                    }
                    $order = 'a.intime desc';
                    break;
                case 3://热门
                    $order = 'a.watch_nums desc';
                    break;
                default:$type = 1;
            }
            $count = Db::name('live')->alias('a')
                ->join('__MEMBER__ b','a.user_id = b.member_id')
                ->where($map)->count();
            $page = ceil($count/$pagesize);
            $list = Db::name('live')->alias('a')
                ->field('a.*,b.username,b.header_img,b.member_id')
                ->join('__MEMBER__ b','a.user_id = b.member_id')
                ->where($map)->order($order)
                ->limit(($p-1)*$pagesize,$pagesize)->select();
            foreach ($list as $k=>$v){
                $list[$k]['share_url'] = config('domain').'/mall_live/#/liveRoom_mobile?live_id='.$v['live_id'].'&room_id='.$v['room_id'];
            }
            success(['page'=>$page,'list'=>$list]);
        }
    }
    /**
     *主播列表
     */
    public function anchor_list(){
        $params = Request::instance()->param();
        if(Request::instance()->isPost()){
            $uid =  $params["uid"];
            $p = input("p");
            $p ? $p :$p = 1;
            $pagesize = input("pagesize");
            $pagesize ? $pagesize : $pagesize = 10;
            $type = $params["type"];
            $map["a.type"] = ['in',[2,3]];
            $map["a.is_del"] = 1;
            switch ($type){
                case 1:
                    $order = 'a.mlive_id desc,a.is_recommend desc,b.intime desc';
                    break;
                case 2:
                    $order = 'a.mlive_id desc,a.is_recommend desc,b.intime desc';
                    $follow_user = Db::name('follow')->where(['user_id'=>$uid])->column('user_id2');
                    if($follow_user){
                        $map['a.member_id'] = ['in',$follow_user];
                    }else{
                        success(['page'=>0,'list'=>[]]);
                    }
                    break;
                case 3:
                    $order = 'a.mlive_id desc,a.intime desc';
                    $map["a.is_recommend"] = 1;
                    break;
                default: $type=1;
            }
            $member_where["type"] = ["in",[2,3]];

            $member_where["is_del"] = 1;
            $count = Db::name("Member")
                ->where($member_where)
                ->count();
            $page = ceil($count/$pagesize);
            $list = Db::name('Member')->alias('a')
                ->field('a.username,a.header_img,a.member_id,a.signature,b.live_id,b.live_status,b.title,b.play_img,b.watch_nums,b.play_address,b.room_id')
                ->join('__LIVE__ b','a.mlive_id = b.live_id','LEFT')
                ->where($map)->order($order)
                ->limit(($p-1)*$pagesize,$pagesize)
                ->select();
            foreach ($list as $k=>$v){
                $list[$k]["tv"]= '';
                $fans_count = DB::name("Follow")->where(["user_id2"=>$v['member_id']])->count();
                $list[$k]["fans_count"] = (string)$fans_count;
                if(!$v["live_id"]){
                    $list[$k]["watch_nums"] ='0';
                    $list[$k]["live_id"] = '0';
                    $list[$k]["title"] ='';
                    $list[$k]["play_address"]='';
                    $list[$k]["room_id"]='';
                    $list[$k]['share_url'] = '';
                }else{
                    $list[$k]['share_url'] = config('domain').'/mall_live/#/liveRoom_mobile?live_id='.$v['live_id'].'&room_id='.$v['room_id'];
                }
            }
            success(['page'=>$page,'list'=>$list]);
        }
    }
    public function anchor_lists(){
        $params = Request::instance()->param();
        if(Request::instance()->isPost()){
            $uid = $params["uid"];
            $p = input("p");
            $p ? $p :$p = 1;
            $pagesize = input("pagesize");
            $pagesize ? $pagesize : $pagesize = 10;
            $type = $params["type"];
            $map["a.type"] = ['in',[2,3]];
            $map["a.is_del"] = 1;
            $map["b.live_status"] =1;
            switch ($type){
                case 1:
                    $order = 'b.live_status asc,a.tuijian desc,b.intime desc';
                    break;
                case 2:
                    $order = 'b.live_status asc,a.tuijian desc,b.intime desc';
                    $follow_user = Db::name('follow')->where(['user_id'=>$uid])->column('user_id2');
                    if($follow_user){
                        $map['a.member_id'] = ['in',$follow_user];
                    }else{
                        success(['page'=>0,'list'=>[]]);
                    }
                    break;
                case 3:
                    $order = 'b.live_status asc,a.intime desc';
                    $map["a.tuijian"] = 1;
                    break;
                default: $type=1;
            }
            $anchor["type"] = ["in",[2,3]];
            $anchor["is_del"] = 1;
            $count = Db::name("Member")->where($anchor)->count();
            $member_id = DB::name("Member")->alias("a")->join('__LIVE__ b','a.member_id = b.user_id','LEFT')->where()->column("member_id");
            if(empty($member_id)){
                $anchor["member_id"] = ["not in",[]];
            }else{
                $anchor["member_id"] = ["not in",$member_id];
            }
            $page = ceil($count/$pagesize);
            //直播中的
            $yes_live = Db::name('Member')->alias('a')
                ->field('a.username,a.member_id,a.signature,b.live_id,b.live_status,b.title,b.play_img as header_img,b.watch_nums,b.play_address,b.room_id')
                ->join('__LIVE__ b','a.member_id = b.user_id','LEFT')
                ->where($map)->order($order)
                ->limit(($p-1)*$pagesize,$pagesize)
                ->select();
            //不在直播
            $no_live = DB::name("Member")->field('username,header_img,member_id,signature')->where($anchor)->order("tuijian desc")->select();
            foreach ($no_live as $k=>$v){
                $no_live[$k]["title"] = '';
                $no_live[$k]["watch_nums"] = '0';
                $no_live[$k]["play_address"] = '';
                $no_live[$k]["room_id"] = '';
            }
            $list = array_merge($yes_live,$no_live);
            success(['page'=>$page,'list'=>$list]);
        }
    }
    /**
     *直播列表
     */
    public function live_list(){
        if(Request::instance()->isPost()){
            $uid = input('uid');
            if($uid) {
                $member = Db::name('member')->where(['member_id' => $uid])->find();
            }
            $p = input('p');
            $p ? $p : $p = 1;
            $pagesize = input('pagesize');
            $pagesize ? $pagesize : $pagesize = 10;
            $type = input('type');
            switch ($type){
                case 1://综合
                    $order = 'a.intime desc';
                    break;
                case 2://关注
                    $follow_user = Db::name('follow')->where(['user_id'=>$member['member_id']])->column('user_id2');
                    if($follow_user){
                        $map['a.user_id'] = ['in',$follow_user];
                    }else{
                        success(['page'=>0,'list'=>[]]);
                    }
                    $order = 'a.intime desc';
                    break;
                case 3:
                    $order = 'a.watch_nums desc';
                    break;
                    default:$type = 1;
            }
            $map['a.live_status'] = 1;
            $map['a.is_offline'] = 1;
            $count = Db::name('live')->alias('a')
                   ->join('th_member b','a.user_id = b.member_id')
                   ->join('th_merchants c','c.member_id = a.user_id')
                   ->where($map)->count();
            $page = ceil($count/$pagesize);
            $list = Db::name('live')->alias('a')
                  ->field('a.*,b.username,b.header_img,b.member_id,b.ID,c.merchants_name')
                  ->join('th_member b','a.user_id = b.member_id')
                  ->join('th_merchants c','c.member_id = a.user_id')
                 ->where($map)->order($order)
                 ->limit(($p-1)*$pagesize,$pagesize)->select();
            foreach ($list as $k=>$v){
                $list[$k]['share_url'] = config('domain').'/mall_live/#/liveRoom_mobile?live_id='.$v['live_id'].'&room_id='.$v['room_id'];
            }
            success(['page'=>$page,'list'=>$list]);
        }
    }

    /**
     * 直播列表
     *param class_id 商家id
     */
    public function queryLiveListByClass(){
        if(Request::instance()->isPost()){
            $uid = input('uid');
            if($uid){
                $member = Db::name('member')->where(['member_id'=>$uid])->find();
            }
            $class_id = input('class_id');
            if(!empty($class_id)){
                $where[] = ['exp','FIND_IN_SET('.$class_id.',class_id)'];
                $anthor = Db::name('goods_merchants_class')->where($where)->column('member_id');
                if($anthor){
                   $map['a.member_id'] = ['in',$anthor];
                }else{
                    success(['page'=>0,'list'=>[]]);
                }
            }
            $p = input('p');
            $p ? $p : $p = 1;
            $pagesize = input('pagesize');
            $pagesize ? $pagesize : $pagesize = 10;
            $type = input('type');
            switch ($type){
                case 1://综合
                    $order = 'a.intime desc';
                    break;
                case 2://关注
                    $follow_user = Db::name('follow')->where(['user_id'=>$member['member_id']])->column('user_id2');
                    if($follow_user){
                        $map['a.member_id'] = ['in',$follow_user];
                    }else{
                        success(['page'=>0,'list'=>[]]);
                    }
                    $order = 'a.intime desc';
                    break;
                case 3:
                    $order = 'a.watch_nums desc';
                    break;
                default:$type = 1;
            }
//            $map['a.live_status'] = 1;
//            $map['a.is_offline'] = 1;
            $map['a.type'] != '1';
            $map['b.is_delete'] = '0';
            $map['b.apply_state'] = '2';
            $count = Db::name('member')->alias('a')
                ->join('th_merchants b','a.member_id = b.member_id')
                ->where($map)->count();
            $page = ceil($count/$pagesize);
            $list = Db::name('member')->alias('a')
                ->field('a.member_id,a.username,a.city,b.merchants_name,b.merchants_img,b.live_id')
                ->join('th_merchants b','a.member_id = b.member_id')
                ->where($map)->order($order)
                ->limit(($p-1)*$pagesize,$pagesize)->select();
            foreach ($list as $k=>$v){
                $list[$k]['goods_class'] = Db::name('goods_merchants_class')->alias('a')
                    ->field('b.class_id,b.class_name,b.class_uuid')
                    ->join('th_goods_class b', 'FIND_IN_SET(b.class_id,a.class_id)')
                    ->where(['a.member_id' => $v['member_id'], 'b.is_delete' => 0])
                    ->select();
                if($v['live_id']){
                    $live = Db::name('live')->where(['live_id'=>$v['live_id']])->find();
                    $list[$k]['play_img'] = $live['play_img'];
                    $list[$k]['title'] = $live['title'];
                    $list[$k]['city'] = $live['shi'];
                    $list[$k]['share_url'] = config('domain').'/mall_live/#/liveRoom_mobile?live_id='.$live['live_id'].'&room_id='.$live['room_id'];
                }else{
                    $list[$k]['play_img'] = $v['merchants_img'];
                    $list[$k]['title'] = '';
                    $list[$k]['city'] = $v['city'];
                    $list[$k]['share_url'] = '';
                }
            }
            success(['page'=>$page,'list'=>$list]);
        }
    }

    /**
     *好货分类
     */
    public function showGoodsClass(){
        if (Request::instance()->isPost()) {
            $where = [
                'class_type' => 'home',
                'is_delete' => '0',
                'class_state' => '1',
                'parent_id' => '-1'
            ];
            $list = Db::name('goods_class')
                ->field('class_id,class_name,class_desc,class_img,class_color,class_uuid,template_img')
                ->where($where)->order("sort desc")->select();
            $arr = [
                'class_id'      =>  '',
                'class_name'    =>  '全部',
                'class_desc'    =>  '',
                'class_img'     =>  '',
                'class_color'   =>  '',
                'class_uuid'    =>  '',
                'template_img'  =>  ''
            ];
            array_push($list,$arr);
            return success($list);
        }
    }

    public function queryLiveByClass(){
        $class_uuid = input('class_uuid');
        if(!$class_uuid)            error("参数错误");
        $city = input('city');
        $p = input('p');
        $p ? $p : $p = 1;
        $pagesize = input('pagesize');
        $pagesize ? $pagesize : $pagesize = 10;
        $merchant = Db::name('goods_merchants_class')->alias('a')
              ->join('th_goods_class b','FIND_IN_SET(b.class_id,a.class_id)')
              ->where(['b.class_uuid'=>$class_uuid])
              ->column('a.member_id');
        if($merchant){
            $map['a.user_id'] = ['in',$merchant];
            $map['a.live_status'] = 1;
            $map['a.is_offline'] = 1;
            if($city)       $map['a.city']  =   ['like','%'.$city.'%'];
            $count = Db::name('live')->alias('a')
                ->join('th_member b','a.user_id = b.member_id')
                ->join('th_merchants c','c.member_id = a.user_id')
                ->where($map)->count();
            $list = Db::name('live')->alias('a')
                ->field('a.*,b.username,b.header_img,b.member_id,c.merchants_name')
                ->join('th_member b','a.user_id = b.member_id')
                ->join('th_merchants c','c.member_id = a.user_id')
                ->where($map)->order("a.intime desc")
                ->limit(($p-1)*$pagesize,$pagesize)->select();
            foreach ($list as $k=>$v){
                $list[$k]['share_url'] = config('domain').'/mall_live/#/liveRoom_mobile?live_id='.$v['live_id'].'&room_id='.$v['room_id'];
            }
            $page = ceil($count/$pagesize);
            success(['page'=>$page,'list'=>$list]);
        }else{
            success(['page'=>0,'list'=>[]]);
        }

    }

    /**
     *商家直播和录播
     */
    public function merchants_live(){
        $params = Request::instance()->request();
        $member_id = empty($params["member_id"]) ? error("无法获取商家信息") : $params["member_id"];
        //获取商家直播
        $live_list = DB::name("live")
                    ->where(["user_id"=>$member_id,"live_status"=>1])
                    ->order("live_id desc")
                    ->find();
        if($live_list){
            $live_list["start_time"] = date("Y-m-d H:m",$live_list["start_time"]);
        }else{
            $live_list =(object)array();
        }
        success($live_list);
    }

    /**
     *商户录播
     */
    public function playback_list(){
        $params = Request::instance()->request();
        $member_id = empty($params["member_id"]) ? error("无法获取商家信息") : $params["member_id"];
        $p = input('p');
        empty($p) && $p = 1;
        $pageSize = input('pagesize');
        $pageSize ? $pageSize : $pageSize = 10;
        //回放列表
        $playback_list = DB::name("live_store")
            ->field('live_store_id,title,url,play_img,date,play_number')
            ->where(["user_id"=>$member_id,"is_del"=>1])
            ->order("intime desc")
            ->limit(($p-1)*$pageSize,$pageSize)
            ->select();
        foreach ($playback_list as $k=>$v){
            $playback_list[$k]['date'] = date('Y-m-d',strtotime($v['date']));
        }
        $count = DB::name("live_store")
            ->field("title,url,play_img,date,play_number")
            ->where(["user_id"=>$member_id,"is_del"=>1])
            ->count();
        $page = ceil($count/$pageSize);
        success(['list'=>$playback_list,'count'=>(string)$count,'page'=>$page]);
    }

    /**
     *@删除录播
     */
    public function del_playback(){
//        $user =$this->checklogin();
        $live_store_id = input('live_store_id');
        $result = Db::name('Live_store')->where(['live_store_id'=>$live_store_id])->update(['is_del'=>'2']);
        if($result){
            success('删除成功');
        }else{
            success('删除失败');
        }
    }
    /**
     * @点亮
     */
    public function lignt_up(){
//        $user =$this->checklogin();
        $params = Request::instance()->request();
        $live_id = empty($params["live_id"]) ? error("无法获取直播间信息") : $params["live_id"];
        $user_id2 = DB::name('Live')->where(["live_id" =>$live_id])->value('user_id');
        $lignt_up = DB::name('Live_light_up')->where(['live_id'=>$live_id,'user_id'=>$user["member_id"],'user_id2'=>$user_id2])->find();
        if($lignt_up){
            error('已点亮!');
        }else{
            if (DB::name('Live_light_up')->insert(['live_id'=>$live_id,'user_id'=>$user["member_id"],'user_id2'=>$user_id2,'intime'=>time()])){
                DB::name('Live')->comment('点亮数加1')->where(['live_id'=>$live_id])->setInc('light_up_count');
                success('点亮成功!');
            }else{
                error('点亮失败!');
            }
        }
    }

    /**
    * @关注（取消关注）
    * @type  1:关注   2：取消关注
    */
    public function follow(){
//        $user = $this->checklogin();
        $user_id2 = input('user_id2');
        if(!$user_id2)      error("参数错误");
        if ($user["member_id"] == $user_id2) error("传值错误");
        $check = Db::name('follow')->where(['user_id' => $user['member_id'], 'user_id2' => $user_id2])->find();
        if ($check) {
            $is_delete = DB::name("follow")->where(["follow_id"=>$check["follow_id"]])->delete();
            if($is_delete){
                success("取消关注");
            }else{
                success("失败");
            }
        } else {
            $data['user_id'] = $user['member_id'];
            $data['user_id2'] = $user_id2;
            $data['intime'] = time();
            $result = Db::name('follow')->insert($data);
            if ($result) {
                success('关注成功!');
            } else {
                error("失败");
            }
        }
    }
    /**
     *主播给主播点赞
     */
    public function give_praise(){
        $params = Request::instance()->param();
        $member_id = empty($params["member_id"]) ? error("无法获取主播信息") : $params["member_id"];
        $res =DB::name('Member')->where(["member_id"=>$member_id])->setInc('zan');
        if($res){
            success("点赞成功");
        }else{
            success("点赞失败");
        }
    }
    /**
     * 踢人
     */
    public function kicking(){
//        $user = $this->checklogin();
        $param = Request::instance()->request();
        $live_id = empty($param["live_id"]) ?  error("无法进入直播间") : $param["live_id"];
        $user_id = empty($param["user_id"]) ?  error("无法获取用户信息") : $param["user_id"];
        // 启动事务
        Db::startTrans();
        try{
            DB::name('live_kicking')->insert(['live_id'=>$live_id,'user_id'=>$user_id,'intime'=>time(),'date'=>date('Y-m-d',time())]);
            DB::name('live_number')->where(['live_id'=>$live_id,'user_id2'=>$user_id])->delete();
            // 提交事务
            Db::commit();
            success('成功!');
        } catch (\Exception $e) {
            Db::rollback();
            error('失败!');
        }
    }
    /**
     * @判断是否被禁言
     */
    public function is_banned(){
//        $user = $this->checklogin();
        $params = Request::instance()->request();
        $apply_id = empty($params["apply_id"]) ? error("无法获取直播间信息") : $params["apply_id"];
        if (DB::name('Banned')->where(['apply_id'=>$apply_id,'user_id2'=>$params["user_id"]])->find()){
            $result = "2";
        }else{
            $result = "1";
        }
        success($result);
    }

    /**
     * @禁言(取消禁言)
     */
    public function do_banned(){
        $params = Request::instance()->request();
        $user_id2 = empty($params["user_id"]) ? error("无法获取用户的信息") : $params["user_id"];
        $apply_id = empty($params["apply_id"]) ? error("无法获取直播间信息") : $params["apply_id"];
        $type = empty($params["type"]) ? error("参数错误") : $params["type"];
        $re = DB::name('Live')->alias("a")
        		->join('apply b','a.room_id = b.room_id')
//        		->join('control c','c.apply_id=b.apply_id')
        		->where(["b.apply_id" =>$apply_id,'b.is_del'=>'0'])
        		->find();   //场控id
        $res2 = Db::name('anchor')->where(['anchor_phone'=>$re['zhu_phone']])->find();
        $ba = DB::name('Banned')->where(['apply_id'=>$apply_id,'user_id'=>$res2['anchor_id'],'user_id2'=>$user_id2])->find();
        switch ($type){
            case 1:
                if ($ba){
                    error('已被禁言!');
                }else{
                    if (DB::name('Banned')->insert(['apply_id'=>$apply_id,'user_id'=>$res2['anchor_id'],'user_id2'=>$user_id2,'intime'=>time()])){
                        success('禁言成功!');
                    }else{
                        error('失败!');
                    }
                }
                break;
            case 2:
                if ($ba){
                    if (DB::name('Banned')->where(['banned_id'=>$ba['banned_id']])->delete()){
                        success('成功!');
                    }else{
                        error('取消成功!');
                    }
                }else{
                    error('还未被禁言!');
                }
            break;
        }
    }
    /**
     * @获取用户是否开启连麦功能
     */
    public function is_wheat(){
        $params = Request::instance()->request();
        $user_id = empty($params["uid"]) ? error("无法获取用户的信息") : $params["uid"];
        $is_wheat = DB::name('anchor')->where(['anchor_id'=>$user_id])->value('is_wheat');
        if($is_wheat){
            $is_wheat = 1;
        }else{
            $is_wheat = 2;
        }
        success($is_wheat);
    }

    /**
     * 计算连麦次数
     */
    public function wheat_num(){
        $uid = input('uid');
        $live_id  = input('live_id');
        $data['user_id'] = $uid;
        $data['live_id'] = $live_id;
        $re = Db::name('microphone')->where(['live_id'=>$live_id,'user_id'=>$uid])->find();
        if(!$re){
            Db::name('microphone')->insert($data);
        }
    }


    /**
     * 开启连麦(关闭连麦)
     * type  1:开启   2:关闭
     */
    public function do_wheat(){
        $uid= input('uid');
        $params = Request::instance()->request();
        $type = empty($params["type"]) ? error("无法进行连麦操作") : $params["type"];
        if (DB::name('anchor')->where(['anchor_id'=>$uid])->update(['is_wheat'=>$type,'update_time'=>time()])){
            success('成功!');
        }else{
            error('失败!');
        }
    }


    /**
     *退出直播间
     */
    public function out_live(){
        $uid = input('uid');
        $param = Request::instance()->request();
        $apply_id = empty($param["apply_id"]) ?  error("无法获取直播间信息") : $param["apply_id"];
        if (Db::name('gl_member')->where(['user_id'=>$uid,'apply_id'=>$apply_id])->delete()){
            success('成功退出!');
        }else{
            error('退出失败!');
        }

    }


    /**
     * 结束直播(主播端)
     */
    public function end_live(){
        $param = Request::instance()->request();
        $live_id = empty($param["live_id"]) ?  error("无法进入直播间") : $param["live_id"];
        $re = DB::name('live')->where(['live_id'=>$live_id])->update(['end_time'=>time(),'live_status'=>2,'is_normal_exit'=>1]);
        if ($re){
            $re1 = Db::name('live')->field('room_id')->where(['live_id'=>$live_id])->find();
            Db::name('apply')->where(['room_id'=>$re1['room_id']])->update(['is_shenhe'=>'6']);
            $live =  Db::name('Apply')->alias("a")
                ->field("a.*,b.*,c.anchor_name,c.anchor_id")
                ->join("live b",'a.room_id=b.room_id')
                ->join("anchor c",'a.zhu_phone=c.anchor_phone')
                ->where(['b.live_id'=>$live_id])
                ->find();
            DB::name("anchor")->where(['apply_id'=>$live['apply_id']])->update(["status"=>0]);
            DB::name("anchor")->where(['apply_id'=>$live['apply_id']])->update(["apply_id"=>0]);
            Db::name('anchor')->where(['anchor_id'=>$live['anchor_id'],'merchants_id'=>$live['merchants_id']])->update(['is_shenhe'=>'2']);
            Db::name('screen')->where(['screen_id'=>$live['screen_id']])->update(['type'=>'1']);

            if (time()-$live['start_time']>10){
                $streamKey = $live['stream_key'];
//                $streamKey = 'php-sdk-test1522395711';
                $qn = new QiniuPili();
                $fname = $qn->save_vido($streamKey);
                if ($fname['fname']) {
                    $url = config("speed_domain").'/'.$fname['fname'];
                    $live['url'] = $url;
                    $data =[
                        'stream_key'=>$streamKey,
                        'live_id'=>$live_id,
                        'user_id'=>$live['anchor_id'],
                        'play_img'=>$live['play_img'],
                        'title'=>$live['title'],
                        'play_number'=>$live["watch_nums"],
                        'lu_url'=>$url,
                        'intime'=>time(),
                        'room_id'=>$live['room_id'],
                        'date'=>date('Y-m-d H:i'),
                        'lebel'=>$live['lebel'],
                        'livewindow_type' => 1,
                        'live_time' => $live["start_time"],

                    ];
                    DB::name('Live_store')->insert($data);
                }
            }
            $url ? $live['url'] = $url : $live['url'] = "";
            $list = DB::name('Live')->where(['date'=>date('Y-m-d',time())])->order('nums desc')->select();
            $timediff = $live['end_time']-$live['start_time'];
            //计算小时数
            $remain = $timediff%86400;
            $hours = intval($remain/3600);
            //计算分钟数
            $remain = $remain%3600;
            $mins = intval($remain/60);
            //计算秒数
            $secs = $remain%60;
            $live['time'] = $hours.":".$mins.":".$secs;
            $get_fire = DB::name('Give_gift')->where(['apply_id'=>$live['apply_id']])->sum('jewel');
            $get_fire ? $live['get_fire'] = $get_fire : $live['get_fire'] = "0";
            $sale_money = $this->live_total_money($live_id);
            $res = $sale_money->data;
            $re = $this->object_array($res);
            $live['total_money'] = (string)$re['total_money'];
            $live['share_num'] = Db::name('share_merchants')->where(['apply_id'=>$live['apply_id'],'is_del'=>'1'])->count();
            $live['follow_num'] = Db::name('follow_merchants')->where(['live_id'=>$live_id,'is_delete'=>'1'])->count();
            success($live);
        }else{
            error('失败!');
        }
    }

    public function live_total_money($room_id){
        $api_url = 'https://www.ttzxh.com//index.php?ctl=Api_Publicjing&met=liveroom_sales_statistics&typ=json';
        $post_data =array(
            'room_id'=>$room_id,
        );
        $json_data = json_encode($post_data);
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
        curl_setopt($ch, CURLOPT_USERAGENT, $_SERVER['HTTP_USER_AGENT']);
        curl_setopt($ch, CURLOPT_URL, $api_url);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_POST, 1);
        curl_setopt($ch, CURLOPT_POSTFIELDS, $json_data);
        $output = curl_exec($ch);
        if(curl_exec($ch) === false)
        {
            echo 'Curl error: ' . curl_error($ch);
        }
        else
        {
            $json_encode = json_decode($output);
            return ($json_encode);
            /*
             * DO SOMETHING
             */
        }
        curl_close($ch);
    }

    /**
     * @结束直播(观看端)
     */
    public function live_end(){
        $user_id = input('uid');
        $live_id = input('live_id');
        empty($live_id) ? error('参数错误!') : true;
        $live = DB::name('Live')->alias('a')
            ->field('a.live_id,a.user_id,a.play_img,a.title,a.start_time,a.end_time,a.nums as watch_nums')
            ->where(['live_id'=>$live_id])
            ->find();
        if(!$live)          error("参数错误");
        $timediff = $live['end_time']-$live['start_time'];
        //计算小时数
        $remain = $timediff%86400;
        $hours = intval($remain/3600);
        //计算分钟数
        $remain = $remain%3600;
        $mins = intval($remain/60);
        //计算秒数
        $secs = $remain%60;
        $live['time'] = $hours.":".$mins.":".$secs;
        //有bug
//        Db::name('live')->where(['live_id','user_id'=>$user_id])->delete();
//        $merchants_res = DB::name("merchants")->where(["member_id"=>$live["user_id"]])->find();
        if (empty($user_id)){
            $live['is_follow'] = "1";
        }else{
            $is_follow = DB::name('Follow')->where(['user_id'=>$user_id,'user_id2'=>$live['user_id']])->find();
            $is_follow ? $live['is_follow'] = "2" : $live['is_follow'] = "1";
        }
        success($live);
    }

     /**
	 * @直播统计(观看端)
	 */
	public function live_end_state(){
	    $state = input('state');
	    if($state=='1'){
            $live_id = input('live_id');
            empty($live_id) ? error('参数错误!') : true;
            $live = DB::name('Live')
                ->field('live_id,watch_nums,room_id')
                ->where(['live_id'=>$live_id])
                ->find();
            $follow_num = Db::name("follow_merchants")->where(["live_id"=>$live_id])->count();
            empty($follow_num) ? $live['follow_num'] = '0' : $live['follow_num'] = $follow_num;
            $apply_id = Db::name('apply')->where(['room_id'=>$live['room_id']])->value('apply_id');
            $share_num = Db::name("share_merchants")->where(["apply_id"=>$apply_id])->count();
            empty($share_num) ? $live['share_num'] = '0' : $live['share_num'] = $share_num;
            success($live);
        }else{
	        success('成功退出');
        }

	}

    /********************************************************他人部分start***************************************************************/
    /**
     * @他人主页
     */
    public function other_center(){
        $user_id = input('user_id');
        $type = input("type");
        if(empty($type)){
            $user = $this->checklogin();
            empty($user_id) ? error('无法获取用户信息!') : true;
            $u = DB::name('Member')->find($user_id);
            $u['img'] = $u['header_img'];
            $u['follow'] = DB::name('Follow')->where(['user_id'=>$user_id])->count();
            $u['follow_to'] = DB::name('Follow')->where(['user_id2'=>$user_id])->count();
            $u['collection'] = DB::name('Collection')->where(['user_id'=>$user_id])->count();
            $is_follow = DB::name('Follow')->where(['user_id'=>$user['member_id'],'user_id2'=>$user_id])->find();
            if($is_follow){
                $u['is_follow'] = '2';
            }else{
                if($user['member_id'] == $user_id){
                    $u['is_follow'] = '3';
                }else{
                    $u['is_follow'] = '1';
                }
            }
            $u['live_count'] = DB::name('Live_store')->where(['user_id'=>$user_id,'is_del'=>1])->count();
            $give_count = DB::name('Give_gift')->where(['user_id'=>$user_id])->sum('jewel');
            $give_count ? $u['give_count'] = $give_count : $u['give_count'] = "0";
            //判断是否正在直播
            $live = DB::name('Live')
                ->alias('a')
                ->field('a.*,b.username,b.header_img,b.grade,b.hx_username,b.ID,b.sex,b.province,b.city,b.e_ticket,b.b_diamond,b.type')
                ->join('__MEMBER__ b','a.user_id=b.member_id')
                ->where(['a.user_id'=>$user_id,'a.live_status'=>1])
                ->find();
            if ($live){
                $u['is_live'] = "2";
                $live['img'] = $live['header_img'];
                $live['play_img'] = $live['play_img'];
                $live['qrcode_path'] = "baidu.com";//C('IMG_PREFIX').$live['qrcode_path'];
                $live['url'] = config('domain')."/App/Index/share_live/live_id/" . base64_encode($live['live_id']);
                $live['lebel'] = explode(',',$live['lebel']);
                $u['live'] = $live;
            }else{
                $u['is_live'] = "1";
            }
        }else{
            $u = DB::name("Member")->where(["member_id"=>$user_id])->find();
            $u['is_follow'] = '1';
        }
        success($u);
    }
    /**
     * @他人粉丝列表
     * $type   1:粉丝列表   2:关注列表
     */
    public function other_follow_list(){
        $user = $this->checklogin();
        $params = Request::instance()->param();
        $user_id = empty($params["user_id"]) ? error("获取用户信息信息失败") : $params["user_id"];
        $type = empty($params["type"]) ? error("传参数据有误") : $params["type"];
        ($type==1 || $type==2) ? true : error('传值错误!');
        $page = input('p');
        $pageSize = input('pagesize');
        $page ? $page : $page = 1;
        $pageSize ? $pageSize : $pageSize = 10;
        $follow = Db::name('Follow')->where(['user_id'=>$user['member_id'],'is_delete'=>'0'])->column('user_id2');
        switch ($type){
            case 1:
                $list = DB::name('Follow')
                    ->alias('a')
                    ->field('b.member_id,b.header_img,b.username,b.sex,b.signature,b.hx_username,b.grade')
                    ->join('__MEMBER__ b','a.user_id=b.member_id')
                    ->where(['a.user_id2'=>$user_id,'b.is_del'=>1])
                    ->order('a.intime desc')
                    ->limit(($page-1)*$pageSize,$pageSize)
                    ->select();
                break;
            case 2:
                $list = DB::name('Follow')
                    ->alias('a')
                    ->field('b.member_id,b.header_img,b.username,b.sex,b.signature,b.hx_username,b.grade')
                    ->join('__MEMBER__ b','a.user_id2=b.member_id')
                    ->where(['a.user_id'=>$user_id,'b.is_del'=>1])
                    ->order('a.intime desc')
                    ->limit(($page-1)*$pageSize,$pageSize)
                    ->select();
                break;
        }
        if ($list){
            foreach ($list as $k=>$v){
                if(in_array($v['member_id'],$follow)){
                    $list[$k]['is_follow'] = '2';
                }else{
                    if($v['member_id'] != $user['member_id']){
                        $list[$k]['is_follow'] = '1';
                    }else{
                        $list[$k]['is_follow'] = '3';
                    }
                }
            }
        }else{$list=[];}
        success($list);
    }
    /**
     * @我的粉丝列表(关注列表
     * $type   1:粉丝列表   2:关注列表
     */
    public function follow_list(){
        $params = Request::instance()->param();
        $type = empty($params["type"]) ? error("传参数据有误") : $params["type"];
        ($type==1 || $type==2) ? true : error('传值错误!');
        $page = input('p');
        $pageSize = input('pagesize');
        $page ? $page : $page = 1;
        $pageSize ? $pageSize : $pageSize = 10;
        $follow = Db::name('Follow')->where(['user_id'=>$user['member_id'],'is_delete'=>'0'])->column('user_id2');
        switch ($type){
            case 1:
                $list = DB::name('Follow')->alias('a')
                    ->field('b.member_id,b.header_img,b.username,b.sex,b.signature,b.hx_username,b.grade')
                    ->join('__MEMBER__ b','a.user_id=b.member_id')
                    ->where(['a.user_id2'=>$user['member_id'],'b.is_del'=>1])
                    ->order('a.intime desc')
                    ->limit(($page-1)*$pageSize,$pageSize)
                    ->select();
                break;
            case 2:
                $list = DB::name('Follow')
                    ->alias('a')
                    ->field('b.member_id,b.header_img,b.username,b.sex,b.signature,b.hx_username,b.grade')
                    ->join('__MEMBER__ b','a.user_id2=b.member_id')
                    ->where(['a.user_id'=>$user['member_id'],'b.is_del'=>1])
                    ->order('a.intime desc')
                    ->limit(($page-1)*$pageSize,$pageSize)
                    ->select();
                break;
        }
        if ($list){
            foreach ($list as $k=>$v){
                if(in_array($v['member_id'],$follow)){
                    $list[$k]['is_follow'] = '2';
                }else{
                    if($v['member_id'] != $user['member_id']){
                        $list[$k]['is_follow'] = '1';
                    }else{
                        $list[$k]['is_follow'] = '3';
                    }
                }
            }
        }else{$list=[];}
        success($list);
    }
    /**
     * @他人直播列表(录播列表)
     */
    public function other_live_list(){
//        $user = $this->checklogin();
        $user_id = input('user_id');
        empty($user_id) ? error('参数错误!') : true;
        $page = input('p');
        $pageSize = input('pagesize');
        $page ? $page : $page = 1;
        $pageSize ? $pageSize : $pageSize = 10;
        $list = DB::name('Live_store')
            ->alias('a')
            ->field('a.*,b.header_img,b.sex,b.username,b.ID,b.hx_username,b.grade,b.province,b.city,b.zan,b.signature,b.e_ticket,b.b_diamond')
            ->join('__MEMBER__ b ','a.user_id=b.member_id')
            ->where(['a.user_id'=>$user_id,'a.is_del'=>1])
            ->order('a.intime desc')
            ->limit(($page-1)*$pageSize,$pageSize)
            ->select();
        if ($list){
//            foreach ($list as $k=>$v){
//                if (time()-$v['intime']<(7*24*60*60)){
//                    $list[$k]['intime'] = get_times($v['intime']);
//                }else{
//                    $list[$k]['intime'] = $v['date'];
//                }
//                $list[$k]['img'] = DB::name('Member')->where(['member_id'=>$v['user_id']])->value('header_img');
//            }
            success($list);
        }else{$list=[];}
        success($list);

    }
    /********************************************************他人部分end***************************************************************/
    /**
     * @充值价格列表
     */
    public function price_list(){
        $this->checklogin();
        $list = DB::name('Price')->order('price asc')->select();
        if (!$list){$list=[];}
        success($list);
    }
    /**
     * @param  price价格
     * @param img图片
     * @礼物列表
     */
    public function gift_list(){
        $list = DB::name('Gift')->order('sort desc')->select();
        if ($list){
            foreach($list as $k=>$v){
                $list[$k]['img'] = $v['img'];
            }
        }else{$list=[];}
        success($list);
    }

    protected function  queryTv($tv_id){
        $tv = Db::name('television')->where(['tv_id'=>$tv_id])->find();
        return $tv;
    }

    /**
     * @送礼
     */
    public function give_gift(){
        $param = Request::instance()->request();
        $uid = $param['uid'];
        $num = empty($param["number"])? 1 :$param["number"];
        $apply_id = empty($param["apply_id"]) ?  error("无法获取直播间信息") : $param["apply_id"];
        $gift_id = empty($param["gift_id"]) ?  error("礼物获取失败") : $param["gift_id"];
        $system = DB::name("system")->where(["id"=>1])->find();
        $gift = DB::name("gift")->where(['gift_id' => $gift_id])->find();
        if ($gift) {
            Db::startTrans();
//            $room_id = DB::name("live")->where(["live_id"=>$live_id])->value('room_id');    //主播id
            $merchants_id = Db::name('apply')->where(['apply_id'=>$apply_id])->value('merchants_id');
            //进行主播判断(包括商家主播)
            $anchor = DB::name("merchants")->where(["gl_merchants_id"=>$merchants_id])->find();

            if($anchor){ //主播（包括平台主播，电视台主播）
                $mer_data = [
                    "user_id" => $uid,
                    "apply_id"=>$apply_id,
                    "user_id2"=>$merchants_id,
                    'gift_id'=>$gift_id,
                    'intime'=>time(),
                    'date'=>date("Y-m-d",time()),
                    'jewel'=>$gift["price"],
                    'dashang_scale'=> '',
                    'member_type'=>1,
                    'experience' => $gift['experience'],
                    'e_ticket' =>'',
                    'tv_id'=>'',
                    'number'=>$num
                ];
                $give_gift_id = DB::name("give_gift")->insertGetId($mer_data);
                if(!$give_gift_id){
                    Db::rollback();
                    error('送礼失败!');
                }else{
                    DB::commit();
                    success('送礼成功!');
                }
            }
        } else {
            error('送礼失败!');
        }
    }
    /**
     * @获取用户火力（直播间的收益）
     */
    public function get_get_money(){
        $user = $this->checklogin();
        $params = Request::instance()->request();
        $user_id = empty($params["user_id"]) ? error("无法获取主播信息"): $params["user_id"];
        $money = DB::name('member')->where(["member_id"=>$params["user_id"]])->value('e_ticket');
        success((string)$money);
    }
    /**
     * @当前登录用户的钻石余额
     */
    public function get_money(){
        $user =$this->checklogin();
        $result = ['money'=>$user['b_diamond']];
        success($result);
    }
//***************************************************************提现相关部分*********************************************************************************//
    /**
     * @获取支付宝/银行卡信息
     */
    public function get_alipay(){
        $user = $this->checklogin();
        $alipay = DB::name('Alipay')->field("alipay_id,user_id,phone,alipay,relname")->where(['user_id'=>$user['member_id']])->find();
       if(!$alipay){
           $alipay= (object)array();
       }
        success($alipay);
    }
    /**
     * @绑定修改体现账户
     */
    public function binding_alipay(){
        $user = $this->checklogin();
        $params = Request::instance()->request();
        $validate = validate('Alipay');
        //判断验证码是否有效期
        $result = DB::name("Mobile_sms")->where(["mobile"=>$params["phone"],"code"=>$params["yzm"]])->order("intime desc")->find();
        if(!$result){
            error("验证码不正确");
        }
        $state = $result["state"];
        $valid_time =time()-intval($result["intime"]);
        if($valid_time>600){
            error("验证码已失效,请重新发送");
        }
        $data = [
            'user_id'=>$user['member_id'],
            'phone'=>$params["phone"],
            'alipay'=>$params["phone"],
            'relname'=>$params["relname"],
            'intime'=>date("Y-m-d H:i:s", time()),
            'type'=>1,
            'where_it_is'=>"",
        ];
        if(empty($params["alipay_id"])){
            //添加
            if(!$validate->check($params)){
                error($validate->getError());
            }
            $res = DB::name('Alipay')->insert($data);
        }else{
            //修改
             if(!$validate->scene('edit')->check($params)){
                 error($validate->getError());
             }else{
                 $res = DB::name('Alipay')->where(['alipay_id'=>$params["alipay_id"]])->update($data);
             }
        }
        if($res){
            success("保存成功");
        }else{
            error("保存失败");
        }
    }
    /**
     * @输入票据获取兑换金额
     */
    public function return_money(){
        $user = $this->checklogin();
        $diamond = Request::instance()->request('e_ticket');
        empty($diamond) ? error('请输入你要提现的龙票数量') : true;
        $get_money = (string)sprintf("%.2f",($diamond*$this->em_scale()));
        success($get_money);
    }
    /**
     * @提现提交
     */
    public function withdraw(){
        $user = $this->checklogin();
        $params = Request::instance()->request();
        //数据验证
        $money = empty($params["money"]) ? error("输入的金额有误，请核实后重新输入") : $params["money"];
        $e_ticket = empty($params["e_ticket"]) ? error("输入的龙票有误，请核实后重新输入") : $params["e_ticket"];
        $alipay_id = empty($params["alipay_id"]) ? error("提现账号有误") : $params["alipay_id"];
        $withdraw_way = empty($params["withdraw_way"]) ? error("提现账号有误") :$params["withdraw_way"];
        //提现最小额度限制
        $lowest_limit = DB::name("system")->where(["id"=>1])->value("lowest_limit");
        if($e_ticket < $lowest_limit){
            error("提现砖石不能小于".$lowest_limit);
        }
        //进行账号验证
        $zhanghao = DB::name("alipay")->where("alipay_id",$alipay_id)->value("alipay");
        ($withdraw_way != $zhanghao) ? error("提现账号有误") :true;
        //进行提现金额判断
        $user['e_ticket'] - $e_ticket < 0 ? error('余额不足') : true;
        //获取实际可提现的金额(进行金额验证)
        $actual_amount = (string)sprintf("%.2f",($e_ticket*$this->em_scale()));
        //金额进行判断
        $actual_money = (string)sprintf("%.2f",$money);
        if($actual_amount != $actual_money){
            error("提现金额有误，请重新进行提现！！");
        }
        //验证成功后数据处理
        $data = [
            'user_id'=>$user['member_id'],
            'k'=>$e_ticket,
            'money'=>$money,
            'withdraw_type'=>'支付宝',
            'withdraw_way'=>$withdraw_way,
            'intime'=>time(),
            'date'=>date('Y-m-d',time()),
            'relname' =>DB::name("Alipay")->where("alipay_id",$alipay_id)->value("relname"),
        ];
        // 启动事务
        Db::startTrans();
        try{
            DB::name('Withdraw')->insert($data);
            $get_money = $user['e_ticket'] - $e_ticket;
            DB::name("member")->where('member_id',$user['member_id'])->update(['e_ticket'=>$get_money,'uptime'=>time()]);
            // 提交事务
            Db::commit();
            success("提现成功，请等待商家付款");
        } catch (\Exception $e) {
            // 回滚事务
            Db::rollback();
            error("提现失败，请核实提现信息");
        }
    }
    /**
     * @我的钱包
     */
    public function my_wallet(){
        $user = $this->checklogin();
        $all_fire = $user['e_ticket'];
        $all_get_money = sprintf("%.2f",$all_fire*$this->em_scale());
        //提现砖石最小值
        $lowest_limit = DB::name("system")->where(["id"=>1])->value("lowest_limit");
        //提现说明
        $result = ['all_fire'=>$all_fire,'all_get_money'=>$all_get_money,"lowest_limit"=>$lowest_limit];
        success($result);
    }
    /**
     * @提现记录
     */
    public function withdraw_list(){
        $user = $this->checklogin();
        $page = input('p');
        $pageSize = input('pagesize');
        $page ? $page : $page = 1;
        $pageSize ? $pageSize : $pageSize = 10;
        $list = DB::name('Withdraw')
            ->field('k,money,status,intime,withdraw_way,cash_time')
            ->where(['user_id'=>$user['member_id']])
            ->limit(($page-1)*$pageSize,$pageSize)
            ->order('intime desc')
            ->select();
        if ($list){
            foreach ($list as $k=>$v){
                switch ($list[$k]['status'])
                {
                    case 1:
                        $content= "申请中";
                        break;
                    case 2:
                        $content= " 驳回";
                        break;
                    case 3:
                        $content= " 已返现";
                        break;
                }
                $list[$k]["content"]=$content.":".$list[$k]['money']."元";
                $list[$k]['intime'] = date('Y-m-d H:i:s',$v['intime']);
            }
        }else{$list=[];}
        success($list);
    }
    /**
     * @票据兑换金额比例
     */
    private function em_scale(){
        $params = DB::name("system")->where("id",1)->find();
        $em_scale = $params['convert_scale4']/$params['convert_scale3'];
        return $em_scale;
    }
    /**
     * 导购视屏列表
     */
    public function video_list(){
        $user = $this->checklogin();
        $params = Request::instance()->request();
        $member_id = empty($params["mid"]) ? error("无法获取商户信息") : $params["mid"];
        $p = input('p');
        $p  ?   $p  :   $p = 1;
        $pagesize = input('pagesize');
        $pagesize   ?   $pagesize   :   $pagesize = 10;
        $count =  DB::name("video")->where(["is_del"=>1,"member_id"=>$member_id,'is_shenhe'=>'2'])->count();
        $list = DB::name("video")->field("title,video_img,url,watch_nums,video_id,date")->where(["is_del"=>1,"member_id"=>$member_id,'is_shenhe'=>'2'])
            ->limit(($p-1)*$pagesize,$pagesize)->select();
        if(empty($list)){
            $list=[];
        }
       success(["count"=>(string)$count,"list"=>$list]);
    }
    /**
     * 播放视频
     */
    public function play_video(){
        $user = $this->checklogin();
        $params = Request::instance()->request();
        $video_id = empty($params["video_id"]) ? error("无法获取视频信息") : $params["video_id"];
        $ce = DB::name("video")->where(["video_id"=>$video_id])->setInc("watch_nums");
        $watch_num = DB::name("video")->where(["video_id"=>$video_id])->value("watch_nums");
        success($watch_num);
    }
    /***************************************************************其他****************************************************/

    /***************************************************************扩张**************************************************/
    /**
     *直播分类(标签)
     */
    public function live_class(){
     	$map['is_delete'] = '0';
        $list= DB::name("home_class")->where($map)->order("sort asc")->select();
        foreach ($list as $k=>$v){
            if($v['title'] =='预播'){
                $list[$k]['type'] = '2';
            }else{
                $list[$k]['type'] = '1';
            }
        }
        if(empty($list)){
            success([]);
        }else{
            success($list);
        }
    }



     /**
	 *获取某个分类直播列表
	 */
	public function tag_live_list(){
		$params = Request::instance()->param();
		$class_id = input('jump');
        $live_class_id = Db::name('home_class')->where(['title'=>'预播'])->value('jump');
        if($class_id == $live_class_id){
            $p = empty($params["p"]) ? 1 :$params["p"];
            $pageSize = empty($params["pagesize"]) ? 20 : $params["pagesize"];
            //获取主播分配的标签;
            $count = DB::name("apply")->alias('a')
                ->join("merchants c","a.merchants_id=c.gl_merchants_id")
                ->count();
            $page = ceil($count/$pageSize);
            if($count){
                $list = DB::name("apply")->alias('a')
                    ->field("a.*,c.business_img,c.company_name")
                    ->join("merchants c","a.merchants_id=c.gl_merchants_id")
                    ->limit(($p-1)*$pageSize,$pageSize)
                    ->select();
                foreach ($list as $k=>$v){
                    $list[$k]['share_url'] = config('domain').'/mall_live/#/liveRoom_mobile?room_id='.$v['room_id'];
                }
            }else{
                $list = [];
            }
        }else{
            $map['a.status'] = $class_id;
            $p = empty($params["p"]) ? 1 :$params["p"];
            $pageSize = empty($params["pagesize"]) ? 20 : $params["pagesize"];
            //获取主播分配的标签;
            $count = DB::name("apply")->alias('a')
                ->join('live_class b','a.class_id = b.live_class_id')
                ->where($map)->count();
            $page = ceil($count/$pageSize);
            if($count){
                $list = DB::name("apply")->alias('a')
                    ->field("a.*,b.*,c.business_img,c.company_name")
                    ->join('live_class b','a.class_id = b.live_class_id')
                    ->join("merchants c","a.merchants_id=c.gl_merchants_id")
                    ->where($map)
                    ->limit(($p-1)*$pageSize,$pageSize)
                    ->select();
                foreach ($list as $k=>$v){
                    $list[$k]['share_url'] = config('domain').'/mall_live/#/liveRoom_mobile?room_id='.$v['room_id'];
                }
            }else{
                $list = [];
            }
        }

		success(['page'=>$page,'list'=>$list]);
	}


    /**
     *获取分类直播列表
     */
    public function limit_live_list(){
        $data= DB::name("home_class")
                ->field('title,img,sort,id,jump,status')
                ->where(['status'=>'2'])
				->order("sort asc")
				->select();
        foreach ($data as $k=>&$v){
            if($v['title']=='展销现场'){
                $v['tag'] = '展销直播';
            }
        	if($v['title']=='直播售卖'){
        		$v['tag'] = '热门售卖';

            }
        	if($v['title']=='直播拍卖'){
				$v['tag'] = '热门拍卖';
            }
            $count = Db::name('apply')->where(['is_shenhe'=>['in','4','6'],'status'=>$v['id']])->count();
            if($count>=2){
                $v['list'] = Db::name("apply")->alias("a")
                    ->field("a.*,b.*")
                    ->join("live b","a.room_id=b.room_id")
                    ->join("merchants c","a.merchants_id=c.gl_merchants_id")
                    ->where(["a.status"=>$v['id'],'a.is_shenhe'=>'4','a.is_del'=>'0'])
                    ->order("b.share desc")
                    ->limit("2")
                    ->select();
                foreach ($v['list'] as $a=>$b){
                    $v['list'][$a]['business_img'] = Db::name('merchants')->where(['gl_merchants_id'=>$b['merchants_id']])->value('business_img');
                    $v['list'][$a]['company_name'] = Db::name('merchants')->where(['gl_merchants_id'=>$b['merchants_id']])->value('company_name');
                    $da= Db::name('share_merchants')->where(['merchants_id'=>$b['merchants_id']])->count();
                    $v['list'][$a]['share_num'] = $da + $b['share'];
                }
                foreach ($v['list'] as $ke=>$va){
                    $v['list'][$ke]['share_url'] = config("domain")."/mall_live/#/liveRoom_mobile?apply_id=".$va["apply_id"]."&room_id=".$va['room_id'];
                    if($va['is_shenhe']=='4' && $va['live_status']=='2'){
                        $v['list'][$ke]['wz_type'] = '4';
                    }
                    $v['list'][$ke]['type'] = '1';
                }
            }elseif ($count >= 1 && $count<2){
                $a = Db::name("apply")->alias("a")
                    ->field("a.*,b.*")
                    ->join("live b","a.room_id=b.room_id")
                    ->join("merchants c","a.merchants_id=c.gl_merchants_id")
                    ->where(["a.status"=>$v['id'],'a.is_shenhe'=>'4','a.is_del'=>'0'])
                    ->order("b.share desc")
                    ->limit("1")
                    ->select();
                foreach ($a as $key=>$val){
                    $a[$key]['business_img'] = Db::name('merchants')->where(['gl_merchants_id'=>$val['merchants_id']])->value('business_img');
                    $a[$key]['company_name'] = Db::name('merchants')->where(['gl_merchants_id'=>$val['merchants_id']])->value('company_name');
                    $da= Db::name('share_merchants')->where(['merchants_id'=>$val['merchants_id']])->count();
                    $a[$key]['share_num'] = $da + $val['share'];
                }
                foreach ($a as $ke=>$va){
                    $a[$ke]['share_url'] = config("domain")."/mall_live/#/liveRoom_mobile?apply_id=".$va["apply_id"]."&room_id=".$va['room_id'];
                    if($va['is_shenhe']=='4' && $va['live_status']=='2'){
                        $a[$ke]['wz_type'] = '4';
                    }
                    $a[$ke]['type'] = '1';

                }

                $b = Db::name("apply")->alias("a")
                    ->field("a.*,b.*")
                    ->join("live_store b","a.room_id=b.room_id")
                    ->join("merchants c","a.merchants_id=c.gl_merchants_id")
                    ->where(["a.status"=>$v['id'],'a.is_del'=>'0'])
                    ->limit("1")
                    ->select();
                foreach ($b as $key=>$value){
                    $b[$key]['business_img'] = Db::name('merchants')->where(['gl_merchants_id'=>$value['merchants_id']])->value('business_img');
                    $b[$key]['company_name'] = Db::name('merchants')->where(['gl_merchants_id'=>$value['merchants_id']])->value('company_name');
                    $da= Db::name('share_merchants')->where(['merchants_id'=>$value['merchants_id']])->count();
                    $b[$key]['share_num'] = $da + $value['share'];
                    $b[$key]['watch_nums']= $value['play_number']+ $value['ren_num'];
                }
                foreach ($b as $ke=>$va){
                    $b[$ke]['share_url'] = config("domain")."/mall_live/#/liveRoom_mobile?apply_id=".$va["apply_id"]."&room_id=".$va['room_id'];
                    $b[$ke]['type'] = '3';
                }
                $v['list'] = array_merge($a,$b);

            }else{
                $v['list'] = Db::name("apply")->alias("a")
                    ->field("a.*,b.*")
                    ->join("live_store b","a.room_id=b.room_id")
                    ->join("merchants c","a.merchants_id=c.gl_merchants_id")
                    ->where(["a.status"=>$v['id'],'a.is_del'=>'0'])
                    ->limit("2")
                    ->select();
                foreach ($v['list'] as $a=>$b){
                    $v['list'][$a]['business_img'] = Db::name('merchants')->where(['gl_merchants_id'=>$b['merchants_id']])->value('business_img');
                    $v['list'][$a]['company_name'] = Db::name('merchants')->where(['gl_merchants_id'=>$b['merchants_id']])->value('company_name');
                    $da= Db::name('share_merchants')->where(['merchants_id'=>$b['merchants_id']])->count();
                    $v['list'][$a]['share_num'] = $da + $b['share'];
                    $v['list'][$a]['watch_nums']= $b['play_number']+ $b['ren_num'];
                }
                foreach ($v['list'] as $ke=>$va){
                    $v['list'][$ke]['share_url'] = config("domain")."/mall_live/#/liveRoom_mobile?apply_id=".$va["apply_id"]."&room_id=".$va['room_id'];
                    $v['list'][$ke]['type'] = '3';
                }
            }


        }

        success(['list'=>$data]);
    }
//	/**
//	*直播售卖首页
//	*/
//	public function now_live(){
//		$jump = input("jump");
//        $live_class_id = Db::name('home_class')->where(['title'=>'预播'])->value('jump');
//		if($jump==$live_class_id){
//            $res['now'] = Db::name('apply')->alias("a")
//                ->field("a.*,c.business_img,c.company_name")
//                ->join("merchants c","a.merchants_id=c.gl_merchants_id")
//                ->order('a.apply_id desc')
//                ->limit("2")
//                ->select();
//            foreach ($res['now'] as $a=>$b){
//                $res['now'][$a]['nums'] = '0';
//                $res['now'][$a]['type'] = '2';
//            }
//            $res['history'] = [];
//        }else if($jump=='1'){
//            $res['now'] = Db::name('live')->alias("a")
//                ->field("a.*,b.class_id,b.address,b.cover_img,c.business_img,c.company_name")
//                ->join("apply b",'a.room_id=b.room_id')
//                ->join("merchants c","b.merchants_id=c.gl_merchants_id")
//                ->where(['b.is_shenhe'=>'4','b.status'=>['in','2,3']])
//                ->limit("3")
//                ->select();
//            foreach ($res['now'] as $k=>$v){
//                $res['now'][$k]['type'] = '1';
//            }
//            $res['history'] = Db::name('live_store')->alias("a")
//                ->field("a.*,b.apply_id,b.class_id,b.address,b.cover_img,c.business_img,c.company_name")
//                ->join("apply b",'a.room_id=b.room_id')
//                ->join("merchants c","b.merchants_id=c.gl_merchants_id")
//                ->where(['b.status' =>['in','2,3']])
//                ->limit("4")->select();
//            foreach ($res['history'] as $k=>$v){
//                $res['history'][$k]['nums'] = $v['play_number'];
//                $res['history'][$k]['type'] = '1';
//            }
//        }else{
//            $res['now'] = Db::name('live')->alias("a")
//                ->field("a.*,b.class_id,b.address,b.cover_img,c.business_img,c.company_name")
//                ->join("apply b",'a.room_id=b.room_id')
//                ->join("merchants c","b.merchants_id=c.gl_merchants_id")
//                ->where(['b.status' =>$jump,'b.is_shenhe'=>'4'])
//                ->limit("2")
//                ->select();
//            foreach ($res['now'] as $k=>$v){
//                $res['now'][$k]['type'] = '1';
//            }
//            $res['history'] = Db::name('live_store')->alias("a")
//                ->field("a.*,b.apply_id,b.class_id,b.address,b.cover_img,c.business_img,c.company_name")
//                ->join("apply b",'a.room_id=b.room_id')
//                ->join("merchants c","b.merchants_id=c.gl_merchants_id")
//                ->where(['b.status' => $jump])
//                ->limit("4")->select();
//            foreach ($res['history'] as $k=>$v){
//                $res['history'][$k]['nums'] = $v['play_number'];
//                $res['history'][$k]['type'] = '1';
//            }
//        }
//
//
//		success(['list'=>$res]);
//	}

	/**
	*直播售卖更多
	*/
	public function more_live(){
        $params = Request::instance()->request();
        $jump = input("jump");
		$live_status = input("live_status");
		$p = empty($params["p"]) ? 1 :$params["p"];
		$pageSize = empty($params["pagesize"]) ? 20 : $params["pagesize"];
        $live_class_id = Db::name('home_class')->where(['title'=>'预播'])->value('jump');
        if($jump == $live_class_id){
            $list = Db::name('apply')->alias("a")
                ->field("a.*,c.business_img,c.company_name")
                ->join("merchants c","a.merchants_id=c.gl_merchants_id")
                ->where(['a.is_shenhe'=>'2'])
                ->limit(($p-1)*$pageSize,$pageSize)
                ->select();
            foreach ($list as $k=>$v){
                $list[$k]['type'] = '2';
                $list[$k]['watch_nums'] = $v['ren_num'];
                $list[$k]['play_address'] = $v['url'];
                $list[$k]['starts_time'] =abs(time()-$v['start_time']);
            }
            $re = $this->quick_sort2($list);
            if($list){
                $res = $re;
            }else{
                $res = [];
            }
        }else{
            $a = Db::name('live')->alias("a")
                ->field("a.play_address,a.live_status,a.watch_nums,b.*,c.business_img,c.company_name")
                ->join("apply b",'a.room_id=b.room_id')
                ->join("merchants c","b.merchants_id=c.gl_merchants_id")
                ->where(['b.status'=>$jump,'b.is_shenhe'=>'4'])
                ->limit(($p-1)*$pageSize,$pageSize)
                ->select();
            foreach ($a as $k=>$v){
                if($v['is_shenhe']=='4' && $v['live_status']=='2'){
                    $a[$k]['wz_type'] = '4';
                }
                $a[$k]['type'] = '1';
                $a[$k]['watch_nums'] = $v['watch_nums'];
                $a[$k]['url'] = $v['play_address'];
            }
            $b = Db::name('live_store')->alias("a")
                ->field("a.lu_url,b.*,c.business_img,c.company_name,d.watch_nums")
                ->join("apply b",'a.room_id=b.room_id')
                ->join("merchants c","b.merchants_id=c.gl_merchants_id")
                ->join("live d","a.live_id=d.live_id")
                ->where(['b.status'=>$jump,'b.is_shenhe'=>'6'])
                ->limit(($p-1)*$pageSize,$pageSize)
                ->select();

            foreach ($b as $k=>$v){
                $b[$k]['type'] = '3';
                $b[$k]['watch_nums'] = $v['watch_nums'] + $v['ren_num'];
                $b[$k]['play_address'] = $v['url'];
            }
            $res = array_merge($a,$b);
		}
		success(['list'=>$res]);
	}

    /**
     * @param $arrUsers
     * @return mixed
     *二维数组某个字段进行排序
     */
    function quick_sort2($arrUsers)
    {
        $sort = array(
            'direction' => 'SORT_DESC', //排序顺序标志 SORT_DESC 降序；SORT_ASC 升序
            'field'     => 'starts_time',       //排序字段
        );
        $arrSort = array();
        foreach($arrUsers AS $uniqid => $row){
            foreach($row AS $key=>$value){
                $arrSort[$key][$uniqid] = $value;
            }
        }
        if($sort['direction']){
            array_multisort($arrSort[$sort['field']], constant($sort['direction']), $arrUsers);
        }
        return $arrUsers;
    }



    /**
     * 搜索商家直播列表
     */
    public function search_live(){
        if (Request::instance()->isPost()) {
            $name = input('company_name');
            $p = input('p');
            $p ? $p : $p = 1;
            $pagesize = input('pagesize');
            $pagesize ? $pagesize : $pagesize = 10;
            $name && $where['b.company_name|a.merchants_id'] = ['like', '%' . $name . '%'];
            $count = Db::name('apply')->alias('a')
                ->join('live c','a.room_id=c.room_id')
                ->join('merchants b','a.merchants_id = b.gl_merchants_id')
                ->where($where)
                ->count();
            $res = Db::name('apply')->alias('a')
                ->field('a.apply_id,a.cover_img,a.title,a.merchants_id,a.zhu_phone,a.room_id,a.address,a.control_num,c.live_id,c.qiniu_room_id,c.qiniu_room_name,c.qiniu_token,c.watch_nums,c.nums,b.business_img,b.company_name')
                ->join('live c','a.room_id=c.room_id')
                ->join('merchants b','a.merchants_id = b.gl_merchants_id')
                ->where($where)
                ->limit(($p-1)*$pagesize,$pagesize)
                ->select();
            $page = ceil($count / $pagesize);
            success(['page' => $page, 'list' => $res]);
        }
    }

    /**
     * 点击直播商家头像效果
     */
    public function header_info(){
        $apply_id = input('apply_id');
        empty($apply_id) ? error("申请id错误") : true;
        $info = Db::name('apply')->field('merchants_id,zhu_phone')->where(['apply_id'=>$apply_id])->find();
        $res = Db::name('merchants')
            ->field('gl_merchants_id,business_img,company_name')
            ->where(['gl_merchants_id'=>$info['merchants_id']])
            ->find();
        $res['follow_sum'] = Db::name('follow_merchants')->where(['user_id2'=>$res['gl_merchants_id']])->count();
        $res['anchor_id'] = Db::name('anchor')->where(['anchor_phone'=>$info['zhu_phone']])->value('anchor_id');
        $res['hx_username'] = Db::name('anchor')->where(['anchor_phone'=>$info['zhu_phone']])->value('hx_username');
        success($res);

    }

    /**
     * 是否禁言
     */
    public function is_band(){
        $apply_id = input('apply_id');
        if(empty($apply_id))  error('apply_id参数错误');
        $user_id = input('user_id');
        if(empty($user_id)) error('user_id参数错误');
        $re = Db::name('banned')->where(['apply_id'=>$apply_id,'user_id2'=>$user_id])->find();
        if($re){
            success('1');
        }else{
            success('2');
        }

    }


//	/**
//	*观众列表
//	*/
//	public function user_list(){
//		$p = empty($params["p"]) ? 1 :$params["p"];
//		$pageSize = empty($params["pagesize"]) ? 20 : $params["pagesize"];
//		$res = Db::name('live')->alias("a")
//			->field("a.*,b.address")
//			->where(['a.live_status'=>'1'])
//			->join("apply b",'a.room_id=b.room_id')
//			->limit(($p-1)*$pageSize,$pageSize)
//			->select();
//		if($res){
//			$list = $res;
//		}else{
//			$list = [];
//		}
//		success(['list'=>$res]);
//	}
/**
 * 直播热力排行
 */
  public function hot_sort(){
    $type = input('type');
    $goods_sell_type='1';
    $list = $this->get_hot_sort($type,$goods_sell_type);
    $res = $list->data;
    $re = $this->object_array($res);
    foreach ($re as $k=>$v){
        $data= Db::name('share_merchants')->where(['merchants_id'=>$v['user_id']])->count();
        $re[$k]['share_num'] = $data;

    }
    $result = $this->quick_sort($re);
    success($result);

  }





  public function get_hot_sort($type,$goods_sell_type){
        $api_url = 'https://www.ttzxh.com//index.php?ctl=Api_Publicjing&met=api_selltype_list&typ=json';
        $post_data =array(
            'type' => $type,
            'goods_sell_type'=>$goods_sell_type,
        );
        $json_data = json_encode($post_data);
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
        curl_setopt($ch, CURLOPT_USERAGENT, $_SERVER['HTTP_USER_AGENT']);
        curl_setopt($ch, CURLOPT_URL, $api_url);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_POST, 1);
        curl_setopt($ch, CURLOPT_POSTFIELDS, $json_data);
        $output = curl_exec($ch);
        if(curl_exec($ch) === false)
        {
            echo 'Curl error: ' . curl_error($ch);
        }
        else
        {
            $json_encode = json_decode($output);
            return ($json_encode);
            /*
             * DO SOMETHING
             */
        }
        curl_close($ch);
    }

    /**
     *
     * 数据转换 stdClass Object转array
     * @access public
     */
    public function object_array($array) {
        if(is_object($array)) {
            $array = (array)$array;
        }
        if(is_array($array)) {
            foreach($array as $key=>$value) {
                $array[$key] =self::object_array($value);
            }
        }
        return $array;
    }

    /**
     * @param $arrUsers
     * @return mixed
     *二维数组某个字段进行排序
     */
    function quick_sort($arrUsers)
    {
        $sort = array(
            'direction' => 'SORT_DESC', //排序顺序标志 SORT_DESC 降序；SORT_ASC 升序
            'field'     => 'share_num',       //排序字段
        );
        $arrSort = array();
        foreach($arrUsers AS $uniqid => $row){
            foreach($row AS $key=>$value){
                $arrSort[$key][$uniqid] = $value;
            }
        }
        if($sort['direction']){
            array_multisort($arrSort[$sort['field']], constant($sort['direction']), $arrUsers);
        }
        return $arrUsers;
    }


//    /**
//     * 私信添加
//     *
//     */
//    public function add_message(){
//        $data['user_id'] = input('user_id');
//        if(empty($data['user_id']))  error('user_id参数错误');
//        $data['user_name'] = input('user_name');
//        if(empty($data['user_name']))  error('user_name参数错误');
//        $data['header_img'] = input('header_img');
//        if(empty($data['header_img']))  error('header_img参数错误');
//        $data['user_address'] = input('user_address');
//        if(empty($data['user_address']))  error('user_address参数错误');
//        $data['hx_name'] = input('hx_name');
//        if(empty($data['hx_name']))  error('hx_name参数错误');
//        $data['live_id'] = input('live_id');
//        if(empty($data['live_id']))  error('live_id参数错误');
//        $data['create_time'] = time();
//        $res = Db::name('private_letter')->insert($data);
//        if($res){
//            success('添加成功');
//        }else{
//            error('添加失败');
//        }
//    }
//
//    /**
//     * 修改是否查看
//     */
//    public function change_state(){
//        $message_id = input('message_id');
//        if(empty($message_id))  error('message_id参数错误');
//        $re = Db::name('private_letter')->where(['message_id'=>$message_id])->update(['is_read'=>'1']);
//        if($re){
//            success('成功');
//        }else{
//            error('失败');
//        }
//    }
//    /**
//     * 私信列表
//     */
//    public function message_list(){
//        $params = Request::instance()->request();
//        $live_id = input('live_id');
//        $p = empty($params["p"]) ? 1 :$params["p"];
//        $pageSize = empty($params["pagesize"]) ? 20 : $params["pagesize"];
//        $list = Db::name('private_letter')
//            ->where(['live_id'=>$live_id,'is_read'=>'0'])
//            ->limit(($p - 1) * $pageSize, $pageSize)
//            ->select();
//        foreach ($list as $k=>$v){
//            $list[$k]['create_time'] = date("Y-m-d H:i:s",$v['create_time']);
//        }
//        //获取直播总的僵尸粉数量(包括观看人数)
//        $count  = DB::name('private_letter')
//            ->where(['live_id'=>$live_id])
//            ->count();
//        $page = ceil($count/$pageSize);
//        if($list){
//            success(['list'=>$list,'page'=>$page]);
//        }else{
//            error(['list'=>[]]);
//        }
//
//    }



    /**
     * 添加麦克风
     *
     */
    public function add_microphone(){
        $data['user_id'] = input('user_id');
        if(empty($data['user_id']))  error('user_id参数错误');
        $data['header_img'] = input('header_img');
        if($data['header_img'] == 'null' || $data['header_img']==''){
            $data['header_img'] = config('domain').'/uploads/image/20171227/a7de424d12f4fdd77de7f6f9a35a8c48.jpg';
        }
        $data['user_address'] = input('user_address');
        if(empty($data['user_address']))  error('user_address参数错误');
        $data['hx_name'] = input('hx_name');
        if(empty($data['hx_name']))  error('hx_name参数错误');
        $data['apply_id'] = input('apply_id');
        if(empty($data['apply_id']))  error('apply_id');
        $data['user_name'] = input('user_name');
        if(empty($data['user_name']))  error('user_name参数错误');
        $data['create_time'] = time();
        Db::name(private_micro)->where(['user_id'=>$data['user_id'],'apply_id'=>$data['apply_id']])->delete();
            $res = Db::name('private_micro')->insert($data);
            if($res){
                success('添加成功');
            }else{
                error('添加失败');
            }

    }
    /**
     * 麦克风列表
     */
    public function microphone_list(){
        $params = Request::instance()->request();
        $apply_id = input('apply_id');
        $p = empty($params["p"]) ? 1 :$params["p"];
        $pageSize = empty($params["pagesize"]) ? 20 : $params["pagesize"];
        $list = Db::name('private_micro')
            ->where(['apply_id'=>$apply_id])
            ->limit(($p - 1) * $pageSize, $pageSize)
            ->select();
        foreach ($list as $k=>$v){
            $list[$k]['create_time'] = date("H:i:s",$v['create_time']);
            $list[$k]['update_time'] =$v['create_time'];
        }
        //获取直播总的僵尸粉数量(包括观看人数)
        $count  = DB::name('private_micro')
            ->where(['apply_id'=>$apply_id])
            ->count();
        $page = ceil($count/$pageSize);
        if($list){
            success(['list'=>$list,'page'=>$page]);
        }else{
            success(['list'=>[]]);
        }

    }


    /**
     * 主播端大屏连麦列表
     *
     */
    public function mac_microphone(){
        $apply_id = input('apply_id');
        if(empty($apply_id))  error('apply_id参数错误');
        $screen_id = Db::name('apply')->where(['apply_id'=>$apply_id])->find();
        $a = explode(',',$screen_id['screen_id']);
        $arr = [];
        foreach ($a as $b){
            $re = Db::name('screen')->alias('a')
                 ->field('a.screen_id,a.Mac_address,a.desc,a.hx_username,a.hx_password,b.model,b.img')
                ->join('screen_class b','a.screen_class_id = b.screen_class_id')
                ->where(['a.screen_id'=>$b])
                ->find();
            $arr[] = $re;
        }
        if($re){
            success($arr);
        }else{
            error('大屏连麦为空');
        }
    }




    /**
     * 拒绝连麦
     */
    public function del_microphone(){
        $apply_id = input('apply_id');
        empty($apply_id) ? error('apply_id参数错误') : true;
        $type = input('type');
        if($type == '1'){
            $id = input('ids');
            empty($id) ? error('ids参数错误') : true;
            $res = Db::name('private_micro')->where(['micro_id'=>['in',$id],'apply_id'=>$apply_id])->delete();
            if($res){
                success('删除成功');
            }else{
                error('删除失败');
            }
        }else{
            $res = Db::name('private_micro')->where(['apply_id'=>$apply_id])->delete();
            if($res){
                success('删除成功');
            }else{
                error('删除失败');
            }
        }


    }

    /**
     * 点击用户头像获取用户信息
     */
    public function user_info(){
        $user_id2 = input('merchants_id');
        $uid = input('user_id');
        $apply_id = input('apply_id');
        $res = Db::name('gl_member')->where(['user_id'=>$uid,'apply_id'=>$apply_id])->find();
        $res['user_shares'] = Db::name('share_merchants')->where(['merchants_id'=>$user_id2,'is_del'=>'1'])->count();
        $res['user_follows'] = Db::name('follow_merchants')->where(['user_id2'=>$user_id2,'is_delete'=>'1'])->count();
        $re = Db::name('black_list')->where(['user_id'=>$uid,'apply_id'=>$apply_id])->find();
        if(!$re){
            $res['type'] = '1';
        }else{
            $res['type'] = '2';
        }
        $ba = DB::name('Banned')->where(['apply_id'=>$apply_id,'user_id2'=>$uid])->find();
        if(!$ba){
            $res['jin'] = '1';
        }else{
            $res['jin'] = '2';
        }
        if($res){
            success($res);
        }else{
            error('用户不存在');
        }
    }

    public function test_live(){
        $live = Db::name('live')->where(['live_id'=>'15'])->find();
        if($live){
            success($live);
        }else{
            error('没开播');
        }
    }

    /**
     * 存储字符串（搜索商家记录）
     */
    public function search_string(){
        $type = input('type');
        if(empty($type))   error('type参数错误');
        if($type =='1'){
            $string = input('string');
            if(empty($string)) error('string参数错误');
            $data['string_content'] = $string;
            $re = Db::name('string')->insert($data);
            if($re){
                success('成功');
            }else{
                error('失败');
            }
        }elseif($type=='2'){
            $re = Db::name('string')->where(['is_del'=>'1'])->delete();
            if($re){
                success('删除成功');
            }else{
                error('删除失败');
            }
        }else{
            $re = Db::name('string')->select();
            if($re){
                success(['list'=>$re]);
            }else{
                error('查询失败');
            }
        }
    }


    /**
     * 根据mac地址获取大屏的环信账号
     */
    public function mac_info(){
        $mac = input('mac');
        if(empty($mac))  error('mac地址参数错误');
        $res = Db::name('screen')->alias('a')
            ->field('a.screen_id,a.hx_username,a.hx_password,a.Mac_address,a.desc,b.apply_id,d.img,d.model,d.screen_color')
            ->join('apply b','a.screen_id = b.screen_id')
//            ->join('live c','b.room_id = c.room_id')
            ->join('screen_class d','a.screen_class_id = d.screen_class_id')
            ->where(['a.Mac_address'=>$mac,'a.type'=>'2','a.is_del'=>'0','b.is_shenhe'=>'4','b.is_del'=>'0'])
            ->find();
        $url3 = 'http://daylive.tstmobile.com/download/daylive.apk';
        $qrcode_path3 = "/qrcode/" . time() . rand(100, 999) . '_qrcode.png';
        $path3 = qrcodeLogo($url3, $res['img'], './' . $qrcode_path3, 8, 9);
        $res['qr_code'] = 'http://daylive.tstmobile.com' . $path3;
        if($res){
            success($res);
        }else{
            error('此大屏没有直播');
        }

    }


    public function test_img(){
        $size = getimagesize('https://www.dev.ttzxh.com/imageRemote.php/shop/data/upload/media/5805f0c2ac68da90f85f4dfb138c9106/10002/1/image/20180521/1526885989176271.jpg');
        $width = $size[0];
        $height = $size[1];
        if($width>200 || $height>200){
            echo "图片长或宽超出限制";
            exit;
        }else{
            echo  123;die;
        }
    }

    /**
     * 直播专场
     */
    public function zhuan_live_list(){
        $p = input('p');
        empty($p) && $p = 1;
        $pageSize = input('pagesize');
        $pageSize ? $pageSize : $pageSize = 10;
        $a = Db::name('live')->alias("a")
            ->field("a.*,b.apply_id,b.address,b.cover_img,b.is_shenhe,c.business_img,c.company_name")
            ->join("apply b",'a.room_id=b.room_id')
            ->join("merchants c","b.merchants_id=c.gl_merchants_id")
            ->where(['b.is_shenhe'=>'4','b.zhuan_type'=>'1'])
            ->limit(($p-1)*$pageSize,$pageSize)
            ->select();
        foreach ($a as $k=>$v){
            if($v['is_shenhe']=='4' && $v['live_status']=='2'){
                $a[$k]['wz_type'] = '4';
            }
            $a[$k]['type'] = '1';
            $a[$k]['nums'] = $v['watch_nums'];
        }
        $count= Db::name('live')->alias("a")
            ->field("a.*,b.address,c.business_img,c.company_name")
            ->join("apply b",'a.room_id=b.room_id')
            ->join("merchants c","b.merchants_id=c.gl_merchants_id")
            ->where(['b.is_shenhe'=>'4','b.zhuan_type'=>'1'])
            ->count();
        $page= ceil($count/$pageSize);

        success(['list'=>$a,'page'=>$page]);
    }


    /**
     * 根据环信名获取用户头像和昵称
     */
    public function hx_user_info(){
        $hx_name = input('hx_name');
        $a = substr($hx_name,0,5);
        if($a !=='user_'){
            if(!$hx_name)  error('参数错误');
            $res = Db::name('anchor')->field('anchor_id,user_img,anchor_name')->where(['hx_username'=>$hx_name])->find();
            $res['user_id'] = $res['anchor_id'];
            $res['header_img'] = $res['user_img'];
            $res['user_name'] = $res['anchor_name'];
            if($res){
                success($res);
            }else{
                error('用户信息失败');
            }
        }else{
            if(!$hx_name)  error('参数错误');
            $res = Db::name('gl_member')->field('user_id,header_img,user_name')->where(['hx_name'=>$hx_name])->find();
            if($res){
                success($res);
            }else{
                error('用户信息失败');
            }
        }

    }

    /**
     * @助通短信发送
     */
    protected  function zhutong_sendSMS($content,$mobile){
        //$url 		= "http://api.zthysms.com/sendSms.do";//提交地址
        $url 		= "http://www.ztsms.cn/sendNSms.do";//提交地址
        $username 	= "YLD";//用户名
        $password 	= "Zhengan88";//原密码
        // 初始化
        vendor('zhutong.zhutong');
        $data = array(
            'content' 	=> $content,//短信内容
            'mobile' 	=> $mobile,//手机号码
            'productid' => '676767',//产品id
            'xh'		=> ''//小号
        );
        $sendAPI = new \sendAPI($url, $username, $password);
        $sendAPI->data = $data;//初始化数据包
        $return = $sendAPI->sendSMS('POST');//GET or POST
        return $return;
    }

    /**
     * 发送验证码
     */
    public function sendSMS($mobile,$company_name,$nick_name){
        if (empty($mobile) || !preg_match('#^13[\d]{9}$|14^[0-9]\d{8}|^15[0-9]\d{8}$|^18[0-9]\d{8}|^17[0-9]\d{8}$#', $mobile)) {
            error("手机格式不正确");
        }else{
//            $mobile_code = random(6, 1);
//            $content = "您的验证码为".$mobile_code.",如非本人操作请忽略此消息。【百台云】";
            $content = "您关注的".'「'.$company_name.'」'."旗下的主播".'「'.$nick_name.'」'."开播了。【体验购】";
        }
        $gateway = $this->zhutong_sendSMS($content,$mobile);
        $arr = explode(',',$gateway);
        //$result = substr($gateway,0,2);
        switch ($arr['0']){
            case 1:
//                success('验证码发送成功');
                break;
            case 12:
                error('提交号码错误!');
                break;
            case 13:
                error('短信内容为空!');
                break;
            case 17:
                error('一分钟内一个手机号只能发两次!');
                break;
            case 19:
                error('号码为黑号!');
                break;
            case 26:
                error('一小时内只能发五条!');
                break;
            case 27:
                error('一天一手机号只能发20条');
                break;
            default:
//                error('发送失败!');
        }
    }


}
